
ROS_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a344  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d80  0800a4d8  0800a4d8  0000b4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d258  0800d258  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d258  0800d258  0000e258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d260  0800d260  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d260  0800d260  0000e260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d264  0800d264  0000e264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800d268  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1ec  2**0
                  CONTENTS
 10 .bss          000006f0  200001ec  200001ec  0000f1ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008dc  200008dc  0000f1ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c95  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d8  00000000  00000000  00022eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00026090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d49  00000000  00000000  000271d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c454  00000000  00000000  00027f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179f3  00000000  00000000  0003436d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d061f  00000000  00000000  0004bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c37f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005810  00000000  00000000  0011c3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  00121bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4bc 	.word	0x0800a4bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a4bc 	.word	0x0800a4bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_DMA_Init+0x68>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a16      	ldr	r2, [pc, #88]	@ (8000f00 <MX_DMA_Init+0x68>)
 8000ea8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_DMA_Init+0x68>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <MX_DMA_Init+0x68>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <MX_DMA_Init+0x68>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <MX_DMA_Init+0x68>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2010      	movs	r0, #16
 8000edc:	f002 fb79 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee0:	2010      	movs	r0, #16
 8000ee2:	f002 fb92 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	203a      	movs	r0, #58	@ 0x3a
 8000eec:	f002 fb71 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ef0:	203a      	movs	r0, #58	@ 0x3a
 8000ef2:	f002 fb8a 	bl	800360a <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	@ 0x30
 8000f08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a5d      	ldr	r2, [pc, #372]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	4b57      	ldr	r3, [pc, #348]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a56      	ldr	r2, [pc, #344]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b54      	ldr	r3, [pc, #336]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b50      	ldr	r3, [pc, #320]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a4f      	ldr	r2, [pc, #316]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b4d      	ldr	r3, [pc, #308]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b49      	ldr	r3, [pc, #292]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a48      	ldr	r2, [pc, #288]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b46      	ldr	r3, [pc, #280]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b42      	ldr	r3, [pc, #264]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a41      	ldr	r2, [pc, #260]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a3a      	ldr	r2, [pc, #232]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b38      	ldr	r3, [pc, #224]	@ (8001098 <MX_GPIO_Init+0x194>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	4835      	ldr	r0, [pc, #212]	@ (800109c <MX_GPIO_Init+0x198>)
 8000fc8:	f003 f8d8 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_RES_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2130      	movs	r1, #48	@ 0x30
 8000fd0:	4833      	ldr	r0, [pc, #204]	@ (80010a0 <MX_GPIO_Init+0x19c>)
 8000fd2:	f003 f8d3 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	21ff      	movs	r1, #255	@ 0xff
 8000fda:	4832      	ldr	r0, [pc, #200]	@ (80010a4 <MX_GPIO_Init+0x1a0>)
 8000fdc:	f003 f8ce 	bl	800417c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin|KEY3_Pin|KEY2_Pin;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	482c      	ldr	r0, [pc, #176]	@ (80010a8 <MX_GPIO_Init+0x1a4>)
 8000ff6:	f002 ff25 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001002:	2302      	movs	r3, #2
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4822      	ldr	r0, [pc, #136]	@ (800109c <MX_GPIO_Init+0x198>)
 8001012:	f002 ff17 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RES_Pin;
 8001016:	2330      	movs	r3, #48	@ 0x30
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800101e:	2302      	movs	r3, #2
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	481c      	ldr	r0, [pc, #112]	@ (80010a0 <MX_GPIO_Init+0x19c>)
 800102e:	f002 ff09 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001032:	23ff      	movs	r3, #255	@ 0xff
 8001034:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4816      	ldr	r0, [pc, #88]	@ (80010a4 <MX_GPIO_Init+0x1a0>)
 800104a:	f002 fefb 	bl	8003e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	2006      	movs	r0, #6
 8001054:	f002 fabd 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001058:	2006      	movs	r0, #6
 800105a:	f002 fad6 	bl	800360a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	2007      	movs	r0, #7
 8001064:	f002 fab5 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001068:	2007      	movs	r0, #7
 800106a:	f002 face 	bl	800360a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2101      	movs	r1, #1
 8001072:	2008      	movs	r0, #8
 8001074:	f002 faad 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001078:	2008      	movs	r0, #8
 800107a:	f002 fac6 	bl	800360a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	2009      	movs	r0, #9
 8001084:	f002 faa5 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001088:	2009      	movs	r0, #9
 800108a:	f002 fabe 	bl	800360a <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	@ 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000

080010ac <User_USART_Init>:
extern float left_speed;
extern float right_speed;

//接收结构体初始化
void User_USART_Init(User_USART *Data)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    for(uint16_t i=0; i < RXBUFFER_LEN; i++)	Data->RxBuffer[i] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81fb      	strh	r3, [r7, #14]
 80010b8:	e007      	b.n	80010ca <User_USART_Init+0x1e>
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	70da      	strb	r2, [r3, #3]
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	3301      	adds	r3, #1
 80010c8:	81fb      	strh	r3, [r7, #14]
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	2b2b      	cmp	r3, #43	@ 0x2b
 80010ce:	d9f4      	bls.n	80010ba <User_USART_Init+0xe>
    Data->frame_head = 0x55;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2255      	movs	r2, #85	@ 0x55
 80010d4:	709a      	strb	r2, [r3, #2]
    Data->Rx_flag = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
    Data->Rx_len = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	705a      	strb	r2, [r3, #1]
    HAL_UART_Transmit(&huart1, lock, 5,0xff);
 80010e2:	23ff      	movs	r3, #255	@ 0xff
 80010e4:	2205      	movs	r2, #5
 80010e6:	490d      	ldr	r1, [pc, #52]	@ (800111c <User_USART_Init+0x70>)
 80010e8:	480d      	ldr	r0, [pc, #52]	@ (8001120 <User_USART_Init+0x74>)
 80010ea:	f005 f92b 	bl	8006344 <HAL_UART_Transmit>
    HAL_Delay(200);
 80010ee:	20c8      	movs	r0, #200	@ 0xc8
 80010f0:	f002 f970 	bl	80033d4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, change1, 5,0xff);
 80010f4:	23ff      	movs	r3, #255	@ 0xff
 80010f6:	2205      	movs	r2, #5
 80010f8:	490a      	ldr	r1, [pc, #40]	@ (8001124 <User_USART_Init+0x78>)
 80010fa:	4809      	ldr	r0, [pc, #36]	@ (8001120 <User_USART_Init+0x74>)
 80010fc:	f005 f922 	bl	8006344 <HAL_UART_Transmit>
	HAL_Delay(200);
 8001100:	20c8      	movs	r0, #200	@ 0xc8
 8001102:	f002 f967 	bl	80033d4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, save, 5,0xff);
 8001106:	23ff      	movs	r3, #255	@ 0xff
 8001108:	2205      	movs	r2, #5
 800110a:	4907      	ldr	r1, [pc, #28]	@ (8001128 <User_USART_Init+0x7c>)
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <User_USART_Init+0x74>)
 800110e:	f005 f919 	bl	8006344 <HAL_UART_Transmit>
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000
 8001120:	2000063c 	.word	0x2000063c
 8001124:	20000008 	.word	0x20000008
 8001128:	20000010 	.word	0x20000010

0800112c <JY901_Process>:

void JY901_Process(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
    if (JY901_data.Rx_len < RXBUFFER_LEN) return;    //如果位数不对
 8001132:	4b82      	ldr	r3, [pc, #520]	@ (800133c <JY901_Process+0x210>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	2b2b      	cmp	r3, #43	@ 0x2b
 8001138:	f240 80fa 	bls.w	8001330 <JY901_Process+0x204>

    for (uint8_t i = 0; i < 4; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	e0f1      	b.n	8001326 <JY901_Process+0x1fa>
    {
        if (JY901_data.RxBuffer[i * 11] != JY901_data.frame_head) return;    					//如果帧头不对
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	4a7b      	ldr	r2, [pc, #492]	@ (800133c <JY901_Process+0x210>)
 8001150:	4413      	add	r3, r2
 8001152:	78da      	ldrb	r2, [r3, #3]
 8001154:	4b79      	ldr	r3, [pc, #484]	@ (800133c <JY901_Process+0x210>)
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 80eb 	bne.w	8001334 <JY901_Process+0x208>
        switch (JY901_data.RxBuffer[i * 11 + 1])
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	3301      	adds	r3, #1
 800116c:	4a73      	ldr	r2, [pc, #460]	@ (800133c <JY901_Process+0x210>)
 800116e:	4413      	add	r3, r2
 8001170:	78db      	ldrb	r3, [r3, #3]
 8001172:	3b51      	subs	r3, #81	@ 0x51
 8001174:	2b08      	cmp	r3, #8
 8001176:	f200 80d3 	bhi.w	8001320 <JY901_Process+0x1f4>
 800117a:	a201      	add	r2, pc, #4	@ (adr r2, 8001180 <JY901_Process+0x54>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	080011a5 	.word	0x080011a5
 8001184:	08001207 	.word	0x08001207
 8001188:	08001267 	.word	0x08001267
 800118c:	08001321 	.word	0x08001321
 8001190:	08001321 	.word	0x08001321
 8001194:	08001321 	.word	0x08001321
 8001198:	08001321 	.word	0x08001321
 800119c:	08001321 	.word	0x08001321
 80011a0:	080012c7 	.word	0x080012c7
        {
            case 0x51:
                memcpy(&stcAcc, &JY901_data.RxBuffer[2 + i * 11], 8);
 80011a4:	79fa      	ldrb	r2, [r7, #7]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	3302      	adds	r3, #2
 80011b2:	4a62      	ldr	r2, [pc, #392]	@ (800133c <JY901_Process+0x210>)
 80011b4:	4413      	add	r3, r2
 80011b6:	3303      	adds	r3, #3
 80011b8:	2208      	movs	r2, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	4860      	ldr	r0, [pc, #384]	@ (8001340 <JY901_Process+0x214>)
 80011be:	f007 f934 	bl	800842a <memcpy>
                for (uint8_t j = 0; j < 3; j++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	71bb      	strb	r3, [r7, #6]
 80011c6:	e01a      	b.n	80011fe <JY901_Process+0xd2>
                    JY901_data.acc.a[j] = (float) stcAcc.a[j] / 32768 * 16;                     //官方加速度解算
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	4a5d      	ldr	r2, [pc, #372]	@ (8001340 <JY901_Process+0x214>)
 80011cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d8:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001344 <JY901_Process+0x218>
 80011dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80011e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ea:	4a54      	ldr	r2, [pc, #336]	@ (800133c <JY901_Process+0x210>)
 80011ec:	330e      	adds	r3, #14
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	3304      	adds	r3, #4
 80011f4:	edc3 7a00 	vstr	s15, [r3]
                for (uint8_t j = 0; j < 3; j++)
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	3301      	adds	r3, #1
 80011fc:	71bb      	strb	r3, [r7, #6]
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d9e1      	bls.n	80011c8 <JY901_Process+0x9c>
                break;
 8001204:	e08c      	b.n	8001320 <JY901_Process+0x1f4>
            case 0x52:
                memcpy(&stcGyro, &JY901_data.RxBuffer[2 + i * 11], 8);
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	3302      	adds	r3, #2
 8001214:	4a49      	ldr	r2, [pc, #292]	@ (800133c <JY901_Process+0x210>)
 8001216:	4413      	add	r3, r2
 8001218:	3303      	adds	r3, #3
 800121a:	2208      	movs	r2, #8
 800121c:	4619      	mov	r1, r3
 800121e:	484a      	ldr	r0, [pc, #296]	@ (8001348 <JY901_Process+0x21c>)
 8001220:	f007 f903 	bl	800842a <memcpy>
                for (uint8_t j = 0; j < 3; j++)
 8001224:	2300      	movs	r3, #0
 8001226:	717b      	strb	r3, [r7, #5]
 8001228:	e019      	b.n	800125e <JY901_Process+0x132>
                    JY901_data.w.w[j] = (float) stcGyro.w[j] / 32768 * 2000;                    //官方角速度解算
 800122a:	797b      	ldrb	r3, [r7, #5]
 800122c:	4a46      	ldr	r2, [pc, #280]	@ (8001348 <JY901_Process+0x21c>)
 800122e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123a:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001344 <JY901_Process+0x218>
 800123e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001242:	797b      	ldrb	r3, [r7, #5]
 8001244:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800134c <JY901_Process+0x220>
 8001248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124c:	4a3b      	ldr	r2, [pc, #236]	@ (800133c <JY901_Process+0x210>)
 800124e:	3312      	adds	r3, #18
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	edc3 7a00 	vstr	s15, [r3]
                for (uint8_t j = 0; j < 3; j++)
 8001258:	797b      	ldrb	r3, [r7, #5]
 800125a:	3301      	adds	r3, #1
 800125c:	717b      	strb	r3, [r7, #5]
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d9e2      	bls.n	800122a <JY901_Process+0xfe>
                break;
 8001264:	e05c      	b.n	8001320 <JY901_Process+0x1f4>
            case 0x53:
                memcpy(&stcAngle, &JY901_data.RxBuffer[2 + i * 11], 8);
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	3302      	adds	r3, #2
 8001274:	4a31      	ldr	r2, [pc, #196]	@ (800133c <JY901_Process+0x210>)
 8001276:	4413      	add	r3, r2
 8001278:	3303      	adds	r3, #3
 800127a:	2208      	movs	r2, #8
 800127c:	4619      	mov	r1, r3
 800127e:	4834      	ldr	r0, [pc, #208]	@ (8001350 <JY901_Process+0x224>)
 8001280:	f007 f8d3 	bl	800842a <memcpy>
                for (uint8_t j = 0; j < 3; j++)
 8001284:	2300      	movs	r3, #0
 8001286:	713b      	strb	r3, [r7, #4]
 8001288:	e019      	b.n	80012be <JY901_Process+0x192>
                    JY901_data.angle.angle[j] = (float) stcAngle.Angle[j] / 32768 * 180;        //官方角度解算
 800128a:	793b      	ldrb	r3, [r7, #4]
 800128c:	4a30      	ldr	r2, [pc, #192]	@ (8001350 <JY901_Process+0x224>)
 800128e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001344 <JY901_Process+0x218>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	793b      	ldrb	r3, [r7, #4]
 80012a4:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001354 <JY901_Process+0x228>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	4a23      	ldr	r2, [pc, #140]	@ (800133c <JY901_Process+0x210>)
 80012ae:	330c      	adds	r3, #12
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	edc3 7a00 	vstr	s15, [r3]
                for (uint8_t j = 0; j < 3; j++)
 80012b8:	793b      	ldrb	r3, [r7, #4]
 80012ba:	3301      	adds	r3, #1
 80012bc:	713b      	strb	r3, [r7, #4]
 80012be:	793b      	ldrb	r3, [r7, #4]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d9e2      	bls.n	800128a <JY901_Process+0x15e>
                break;
 80012c4:	e02c      	b.n	8001320 <JY901_Process+0x1f4>
            case 0x59:
				memcpy(&stcQ, &JY901_data.RxBuffer[2 + i*11], 8);
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	3302      	adds	r3, #2
 80012d4:	4a19      	ldr	r2, [pc, #100]	@ (800133c <JY901_Process+0x210>)
 80012d6:	4413      	add	r3, r2
 80012d8:	3303      	adds	r3, #3
 80012da:	2208      	movs	r2, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	481e      	ldr	r0, [pc, #120]	@ (8001358 <JY901_Process+0x22c>)
 80012e0:	f007 f8a3 	bl	800842a <memcpy>
				for(uint8_t j = 0; j < 4; j++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	70fb      	strb	r3, [r7, #3]
 80012e8:	e016      	b.n	8001318 <JY901_Process+0x1ec>
					JY901_data.q.q[j] = (float) stcQ.q[j] / 32768;		       					//官方四元数解算
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001358 <JY901_Process+0x22c>)
 80012ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001344 <JY901_Process+0x218>
 8001300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <JY901_Process+0x210>)
 8001306:	3314      	adds	r3, #20
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3304      	adds	r3, #4
 800130e:	edc3 7a00 	vstr	s15, [r3]
				for(uint8_t j = 0; j < 4; j++)
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	3301      	adds	r3, #1
 8001316:	70fb      	strb	r3, [r7, #3]
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d9e5      	bls.n	80012ea <JY901_Process+0x1be>
				break;
 800131e:	bf00      	nop
    for (uint8_t i = 0; i < 4; i++)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3301      	adds	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b03      	cmp	r3, #3
 800132a:	f67f af0a 	bls.w	8001142 <JY901_Process+0x16>
 800132e:	e002      	b.n	8001336 <JY901_Process+0x20a>
    if (JY901_data.Rx_len < RXBUFFER_LEN) return;    //如果位数不对
 8001330:	bf00      	nop
 8001332:	e000      	b.n	8001336 <JY901_Process+0x20a>
        if (JY901_data.RxBuffer[i * 11] != JY901_data.frame_head) return;    					//如果帧头不对
 8001334:	bf00      	nop
        }
    }
}
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000208 	.word	0x20000208
 8001340:	2000026c 	.word	0x2000026c
 8001344:	47000000 	.word	0x47000000
 8001348:	20000274 	.word	0x20000274
 800134c:	44fa0000 	.word	0x44fa0000
 8001350:	2000027c 	.word	0x2000027c
 8001354:	43340000 	.word	0x43340000
 8001358:	20000284 	.word	0x20000284

0800135c <update_velocity>:
        (int)(right_speed * 1000.0f));   // m/s -> mm/s

    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, length, 100);
}
void update_velocity(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	x_speed +=	(last_acc + JY901_data.acc.a[0]) * 0.5f * SAMPLE_INTERVAL;
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <update_velocity+0x48>)
 8001362:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <update_velocity+0x4c>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80013ac <update_velocity+0x50>
 800137c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <update_velocity+0x54>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <update_velocity+0x54>)
 800138c:	edc3 7a00 	vstr	s15, [r3]
	last_acc = JY901_data.acc.a[0];
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <update_velocity+0x48>)
 8001392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <update_velocity+0x4c>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000208 	.word	0x20000208
 80013a8:	20000290 	.word	0x20000290
 80013ac:	3c23d70a 	.word	0x3c23d70a
 80013b0:	2000028c 	.word	0x2000028c

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f001 ff99 	bl	80032f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f8d1 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f7ff fd9f 	bl	8000f04 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c6:	f7ff fd67 	bl	8000e98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013ca:	f001 fe23 	bl	8003014 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80013ce:	f001 fe4b 	bl	8003068 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013d2:	f000 fdb1 	bl	8001f38 <MX_SPI1_Init>
  MX_TIM2_Init();
 80013d6:	f001 fb65 	bl	8002aa4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013da:	f001 fc17 	bl	8002c0c <MX_TIM5_Init>
  MX_TIM3_Init();
 80013de:	f001 fbbb 	bl	8002b58 <MX_TIM3_Init>
  MX_TIM9_Init();
 80013e2:	f001 fc9d 	bl	8002d20 <MX_TIM9_Init>
  MX_TIM6_Init();
 80013e6:	f001 fc61 	bl	8002cac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	User_USART_Init(&JY901_data);
 80013ea:	4846      	ldr	r0, [pc, #280]	@ (8001504 <main+0x150>)
 80013ec:	f7ff fe5e 	bl	80010ac <User_USART_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,uart_data,40);
 80013f0:	2228      	movs	r2, #40	@ 0x28
 80013f2:	4945      	ldr	r1, [pc, #276]	@ (8001508 <main+0x154>)
 80013f4:	4845      	ldr	r0, [pc, #276]	@ (800150c <main+0x158>)
 80013f6:	f005 f830 	bl	800645a <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2,IMU_data,44);
 80013fa:	222c      	movs	r2, #44	@ 0x2c
 80013fc:	4944      	ldr	r1, [pc, #272]	@ (8001510 <main+0x15c>)
 80013fe:	4845      	ldr	r0, [pc, #276]	@ (8001514 <main+0x160>)
 8001400:	f005 f82b 	bl	800645a <HAL_UARTEx_ReceiveToIdle_DMA>

	ST7735_Init();
 8001404:	f000 fecc 	bl	80021a0 <ST7735_Init>

	ST7735_DrawString(0,0,"F4 & ROS",ST7735_WHITE,ST7735_BLACK,&Font_11x18);
 8001408:	4b43      	ldr	r3, [pc, #268]	@ (8001518 <main+0x164>)
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001414:	4a41      	ldr	r2, [pc, #260]	@ (800151c <main+0x168>)
 8001416:	2100      	movs	r1, #0
 8001418:	2000      	movs	r0, #0
 800141a:	f001 f8f7 	bl	800260c <ST7735_DrawString>
	ST7735_DrawString(0,58,"N0:",ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 800141e:	4b40      	ldr	r3, [pc, #256]	@ (8001520 <main+0x16c>)
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	2300      	movs	r3, #0
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800142a:	4a3e      	ldr	r2, [pc, #248]	@ (8001524 <main+0x170>)
 800142c:	213a      	movs	r1, #58	@ 0x3a
 800142e:	2000      	movs	r0, #0
 8001430:	f001 f8ec 	bl	800260c <ST7735_DrawString>
	ST7735_DrawString(80,58,"N1:",ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001434:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <main+0x16c>)
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	2300      	movs	r3, #0
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001440:	4a39      	ldr	r2, [pc, #228]	@ (8001528 <main+0x174>)
 8001442:	213a      	movs	r1, #58	@ 0x3a
 8001444:	2050      	movs	r0, #80	@ 0x50
 8001446:	f001 f8e1 	bl	800260c <ST7735_DrawString>
	ST7735_DrawString(0,68,"N2:",ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 800144a:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <main+0x16c>)
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	2300      	movs	r3, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001456:	4a35      	ldr	r2, [pc, #212]	@ (800152c <main+0x178>)
 8001458:	2144      	movs	r1, #68	@ 0x44
 800145a:	2000      	movs	r0, #0
 800145c:	f001 f8d6 	bl	800260c <ST7735_DrawString>
	ST7735_DrawString(80,68,"N3:",ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <main+0x16c>)
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	2300      	movs	r3, #0
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800146c:	4a30      	ldr	r2, [pc, #192]	@ (8001530 <main+0x17c>)
 800146e:	2144      	movs	r1, #68	@ 0x44
 8001470:	2050      	movs	r0, #80	@ 0x50
 8001472:	f001 f8cb 	bl	800260c <ST7735_DrawString>

	ST7735_DrawString(0,18,"X :",ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001476:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <main+0x16c>)
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001482:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <main+0x180>)
 8001484:	2112      	movs	r1, #18
 8001486:	2000      	movs	r0, #0
 8001488:	f001 f8c0 	bl	800260c <ST7735_DrawString>
	ST7735_DrawString(0,28,"Y :",ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <main+0x16c>)
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	2300      	movs	r3, #0
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001498:	4a27      	ldr	r2, [pc, #156]	@ (8001538 <main+0x184>)
 800149a:	211c      	movs	r1, #28
 800149c:	2000      	movs	r0, #0
 800149e:	f001 f8b5 	bl	800260c <ST7735_DrawString>
	ST7735_DrawString(0,38,"Z :",ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <main+0x16c>)
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2300      	movs	r3, #0
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <main+0x188>)
 80014b0:	2126      	movs	r1, #38	@ 0x26
 80014b2:	2000      	movs	r0, #0
 80014b4:	f001 f8aa 	bl	800260c <ST7735_DrawString>
	ST7735_DrawString(0,48,"IMU_FPS :",ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <main+0x16c>)
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	2300      	movs	r3, #0
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <main+0x18c>)
 80014c6:	2130      	movs	r1, #48	@ 0x30
 80014c8:	2000      	movs	r0, #0
 80014ca:	f001 f89f 	bl	800260c <ST7735_DrawString>

	PID_IncInit(&MotorPID, 0.2f, 0.07f, 0, 2000.0f, -2000.0f);//kp ki kd max min
 80014ce:	ed9f 2a1d 	vldr	s4, [pc, #116]	@ 8001544 <main+0x190>
 80014d2:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 8001548 <main+0x194>
 80014d6:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 800154c <main+0x198>
 80014da:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001550 <main+0x19c>
 80014de:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8001554 <main+0x1a0>
 80014e2:	481d      	ldr	r0, [pc, #116]	@ (8001558 <main+0x1a4>)
 80014e4:	f000 fcf8 	bl	8001ed8 <PID_IncInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  set_pwm(1,left_pwm);
 80014e8:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <main+0x1a8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 fc7e 	bl	8001df0 <set_pwm>
	  set_pwm(2,right_pwm);
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <main+0x1ac>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	2002      	movs	r0, #2
 80014fc:	f000 fc78 	bl	8001df0 <set_pwm>
	  set_pwm(1,left_pwm);
 8001500:	bf00      	nop
 8001502:	e7f1      	b.n	80014e8 <main+0x134>
 8001504:	20000208 	.word	0x20000208
 8001508:	200002c0 	.word	0x200002c0
 800150c:	2000063c 	.word	0x2000063c
 8001510:	20000294 	.word	0x20000294
 8001514:	20000684 	.word	0x20000684
 8001518:	0800ceb4 	.word	0x0800ceb4
 800151c:	0800a4d8 	.word	0x0800a4d8
 8001520:	0800ceac 	.word	0x0800ceac
 8001524:	0800a4e4 	.word	0x0800a4e4
 8001528:	0800a4e8 	.word	0x0800a4e8
 800152c:	0800a4ec 	.word	0x0800a4ec
 8001530:	0800a4f0 	.word	0x0800a4f0
 8001534:	0800a4f4 	.word	0x0800a4f4
 8001538:	0800a4f8 	.word	0x0800a4f8
 800153c:	0800a4fc 	.word	0x0800a4fc
 8001540:	0800a500 	.word	0x0800a500
 8001544:	c4fa0000 	.word	0xc4fa0000
 8001548:	44fa0000 	.word	0x44fa0000
 800154c:	00000000 	.word	0x00000000
 8001550:	3d8f5c29 	.word	0x3d8f5c29
 8001554:	3e4ccccd 	.word	0x3e4ccccd
 8001558:	20000318 	.word	0x20000318
 800155c:	200002e8 	.word	0x200002e8
 8001560:	200002ec 	.word	0x200002ec

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	@ 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	2230      	movs	r2, #48	@ 0x30
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f006 fecd 	bl	8008312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	4b28      	ldr	r3, [pc, #160]	@ (8001630 <SystemClock_Config+0xcc>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	4a27      	ldr	r2, [pc, #156]	@ (8001630 <SystemClock_Config+0xcc>)
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	@ 0x40
 8001598:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <SystemClock_Config+0xcc>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <SystemClock_Config+0xd0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a21      	ldr	r2, [pc, #132]	@ (8001634 <SystemClock_Config+0xd0>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <SystemClock_Config+0xd0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ca:	2302      	movs	r3, #2
 80015cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80015d4:	2306      	movs	r3, #6
 80015d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015d8:	23a8      	movs	r3, #168	@ 0xa8
 80015da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015dc:	2302      	movs	r3, #2
 80015de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015e0:	2304      	movs	r3, #4
 80015e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fdf9 	bl	80041e0 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015f4:	f000 fb82 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2302      	movs	r3, #2
 80015fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001604:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800160a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2105      	movs	r1, #5
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f85a 	bl	80046d0 <HAL_RCC_ClockConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001622:	f000 fb6b 	bl	8001cfc <Error_Handler>
  }
}
 8001626:	bf00      	nop
 8001628:	3750      	adds	r7, #80	@ 0x50
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000

08001638 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0a0      	sub	sp, #128	@ 0x80
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
    uint8_t RXD_Buffer[33];
    if(huart == &huart1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a59      	ldr	r2, [pc, #356]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x174>)
 8001648:	4293      	cmp	r3, r2
 800164a:	f040 808f 	bne.w	800176c <HAL_UARTEx_RxEventCallback+0x134>
    {
        memcpy(RXD_Buffer, uart_data, Size);
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001654:	4956      	ldr	r1, [pc, #344]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x178>)
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fee7 	bl	800842a <memcpy>
        RXD_Buffer[Size] = '\0'; // 补0结束符
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	3380      	adds	r3, #128	@ 0x80
 8001660:	443b      	add	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	f803 2c2c 	strb.w	r2, [r3, #-44]

        char rxd_buf_char[50] = {0}; // 新建一个char数组，防止类型冲突
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	222e      	movs	r2, #46	@ 0x2e
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f006 fe4c 	bl	8008312 <memset>
        memcpy(rxd_buf_char, RXD_Buffer, Size); // 拷贝到char数组中
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fed0 	bl	800842a <memcpy>
        rxd_buf_char[Size] = '\0'; // 再补一个结束符
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	3380      	adds	r3, #128	@ 0x80
 800168e:	443b      	add	r3, r7
 8001690:	2200      	movs	r2, #0
 8001692:	f803 2c78 	strb.w	r2, [r3, #-120]

        if (rxd_buf_char[0] == '[')
 8001696:	7a3b      	ldrb	r3, [r7, #8]
 8001698:	2b5b      	cmp	r3, #91	@ 0x5b
 800169a:	d162      	bne.n	8001762 <HAL_UARTEx_RxEventCallback+0x12a>
        {
            char *comma_ptr = strchr(rxd_buf_char, ',');
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	212c      	movs	r1, #44	@ 0x2c
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 fe3d 	bl	8008322 <strchr>
 80016a8:	67f8      	str	r0, [r7, #124]	@ 0x7c
            char *right_bracket_ptr = strchr(rxd_buf_char, ']');
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	215d      	movs	r1, #93	@ 0x5d
 80016b0:	4618      	mov	r0, r3
 80016b2:	f006 fe36 	bl	8008322 <strchr>
 80016b6:	67b8      	str	r0, [r7, #120]	@ 0x78

            if (comma_ptr != NULL && right_bracket_ptr != NULL && comma_ptr < right_bracket_ptr)
 80016b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d051      	beq.n	8001762 <HAL_UARTEx_RxEventCallback+0x12a>
 80016be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d04e      	beq.n	8001762 <HAL_UARTEx_RxEventCallback+0x12a>
 80016c4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d24a      	bcs.n	8001762 <HAL_UARTEx_RxEventCallback+0x12a>
            {
                char left_str[10] = {0};
 80016cc:	2300      	movs	r3, #0
 80016ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	809a      	strh	r2, [r3, #4]
                char right_str[10] = {0};
 80016da:	2300      	movs	r3, #0
 80016dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	809a      	strh	r2, [r3, #4]

                memcpy(left_str, rxd_buf_char + 1, comma_ptr - (rxd_buf_char + 1));
 80016e8:	f107 0108 	add.w	r1, r7, #8
 80016ec:	3101      	adds	r1, #1
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	3301      	adds	r3, #1
 80016f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 fe93 	bl	800842a <memcpy>
                left_str[comma_ptr - (rxd_buf_char + 1)] = '\0';
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	3301      	adds	r3, #1
 800170a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	3380      	adds	r3, #128	@ 0x80
 8001710:	443b      	add	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	f803 2c38 	strb.w	r2, [r3, #-56]

                memcpy(right_str, comma_ptr + 1, right_bracket_ptr - (comma_ptr + 1));
 8001718:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800171a:	1c59      	adds	r1, r3, #1
 800171c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800171e:	3301      	adds	r3, #1
 8001720:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	461a      	mov	r2, r3
 8001726:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800172a:	4618      	mov	r0, r3
 800172c:	f006 fe7d 	bl	800842a <memcpy>
                right_str[right_bracket_ptr - (comma_ptr + 1)] = '\0';
 8001730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001732:	3301      	adds	r3, #1
 8001734:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	3380      	adds	r3, #128	@ 0x80
 800173a:	443b      	add	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	f803 2c44 	strb.w	r2, [r3, #-68]

                left_pwm = atoi(left_str);
 8001742:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001746:	4618      	mov	r0, r3
 8001748:	f005 ffca 	bl	80076e0 <atoi>
 800174c:	4603      	mov	r3, r0
 800174e:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_UARTEx_RxEventCallback+0x17c>)
 8001750:	6013      	str	r3, [r2, #0]
                right_pwm = atoi(right_str);
 8001752:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001756:	4618      	mov	r0, r3
 8001758:	f005 ffc2 	bl	80076e0 <atoi>
 800175c:	4603      	mov	r3, r0
 800175e:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_UARTEx_RxEventCallback+0x180>)
 8001760:	6013      	str	r3, [r2, #0]
            }
        }

        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 40); // 继续接收
 8001762:	2228      	movs	r2, #40	@ 0x28
 8001764:	4912      	ldr	r1, [pc, #72]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x178>)
 8001766:	4811      	ldr	r0, [pc, #68]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x174>)
 8001768:	f004 fe77 	bl	800645a <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    if(huart == &huart2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a13      	ldr	r2, [pc, #76]	@ (80017bc <HAL_UARTEx_RxEventCallback+0x184>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d116      	bne.n	80017a2 <HAL_UARTEx_RxEventCallback+0x16a>
    {
        IMU_FPS_sum++;
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_UARTEx_RxEventCallback+0x188>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <HAL_UARTEx_RxEventCallback+0x188>)
 800177e:	701a      	strb	r2, [r3, #0]
//        HAL_UART_Transmit(&huart1, "IMU_data get!!!!!!!\r\n", 22,0xff);
        memcpy(JY901_data.RxBuffer,IMU_data, JY901_data.Rx_len);
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001782:	785b      	ldrb	r3, [r3, #1]
 8001784:	461a      	mov	r2, r3
 8001786:	4910      	ldr	r1, [pc, #64]	@ (80017c8 <HAL_UARTEx_RxEventCallback+0x190>)
 8001788:	4810      	ldr	r0, [pc, #64]	@ (80017cc <HAL_UARTEx_RxEventCallback+0x194>)
 800178a:	f006 fe4e 	bl	800842a <memcpy>
        JY901_data.Rx_len = sizeof(IMU_data);
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001790:	222c      	movs	r2, #44	@ 0x2c
 8001792:	705a      	strb	r2, [r3, #1]
        JY901_Process();
 8001794:	f7ff fcca 	bl	800112c <JY901_Process>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart2,IMU_data,44);
 8001798:	222c      	movs	r2, #44	@ 0x2c
 800179a:	490b      	ldr	r1, [pc, #44]	@ (80017c8 <HAL_UARTEx_RxEventCallback+0x190>)
 800179c:	4807      	ldr	r0, [pc, #28]	@ (80017bc <HAL_UARTEx_RxEventCallback+0x184>)
 800179e:	f004 fe5c 	bl	800645a <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 80017a2:	bf00      	nop
 80017a4:	3780      	adds	r7, #128	@ 0x80
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000063c 	.word	0x2000063c
 80017b0:	200002c0 	.word	0x200002c0
 80017b4:	200002e8 	.word	0x200002e8
 80017b8:	200002ec 	.word	0x200002ec
 80017bc:	20000684 	.word	0x20000684
 80017c0:	200002f2 	.word	0x200002f2
 80017c4:	20000208 	.word	0x20000208
 80017c8:	20000294 	.word	0x20000294
 80017cc:	2000020b 	.word	0x2000020b

080017d0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	6078      	str	r0, [r7, #4]
    if (htim == (&htim6))	//5hz,0.2s一次
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4aa2      	ldr	r2, [pc, #648]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d11f      	bne.n	8001820 <HAL_TIM_PeriodElapsedCallback+0x50>
    {
//    	n1++;
    	left_count = (uint32_t)Read_Encoder_Count(&htim2);
 80017e0:	48a1      	ldr	r0, [pc, #644]	@ (8001a68 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80017e2:	f000 fb3d 	bl	8001e60 <Read_Encoder_Count>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4aa0      	ldr	r2, [pc, #640]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80017ea:	6013      	str	r3, [r2, #0]
    	right_count = (uint32_t)Read_Encoder_Count(&htim3);
 80017ec:	48a0      	ldr	r0, [pc, #640]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80017ee:	f000 fb37 	bl	8001e60 <Read_Encoder_Count>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a9f      	ldr	r2, [pc, #636]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80017f6:	6013      	str	r3, [r2, #0]

    	left_speed = Calculate_Encoder_Speed(left_count);
 80017f8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fb45 	bl	8001e8c <Calculate_Encoder_Speed>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
 8001806:	4b9c      	ldr	r3, [pc, #624]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001808:	edc3 7a00 	vstr	s15, [r3]
    	right_speed = Calculate_Encoder_Speed(right_count);
 800180c:	4b99      	ldr	r3, [pc, #612]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fb3b 	bl	8001e8c <Calculate_Encoder_Speed>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	4b98      	ldr	r3, [pc, #608]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800181c:	edc3 7a00 	vstr	s15, [r3]
//			linear_vel[i] = angular_vel[i] * (WHEEL_DIAMETER / 2);
//		}
//    	send_raspi();
    }

    if (htim == (&htim5))	//100Mhz,10ms一次
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a97      	ldr	r2, [pc, #604]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	f040 8220 	bne.w	8001c6a <HAL_TIM_PeriodElapsedCallback+0x49a>
    {
    	//send_raspi();
		IMU_FPS=IMU_FPS_sum;
 800182a:	4b96      	ldr	r3, [pc, #600]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	4b96      	ldr	r3, [pc, #600]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001830:	701a      	strb	r2, [r3, #0]
		IMU_FPS_sum=0;
 8001832:	4b94      	ldr	r3, [pc, #592]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
		update_velocity();
 8001838:	f7ff fd90 	bl	800135c <update_velocity>
		cnt++;
 800183c:	4b93      	ldr	r3, [pc, #588]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b91      	ldr	r3, [pc, #580]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001846:	701a      	strb	r2, [r3, #0]
		if(cnt == 10)
 8001848:	4b90      	ldr	r3, [pc, #576]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b0a      	cmp	r3, #10
 800184e:	d106      	bne.n	800185e <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			cnt = 0;
 8001850:	4b8e      	ldr	r3, [pc, #568]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
			x_speed = 0;
 8001856:	4b8e      	ldr	r3, [pc, #568]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
		}

		if(n0 % 4 == 0)
 800185e:	4b8d      	ldr	r3, [pc, #564]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d175      	bne.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x186>
		{
			ST7735_DrawInt(20,58,left_pwm,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 800186a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800187a:	213a      	movs	r1, #58	@ 0x3a
 800187c:	2014      	movs	r0, #20
 800187e:	f000 ff4f 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawInt(100,58,right_pwm,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001882:	4b87      	ldr	r3, [pc, #540]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b85      	ldr	r3, [pc, #532]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	2300      	movs	r3, #0
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001892:	213a      	movs	r1, #58	@ 0x3a
 8001894:	2064      	movs	r0, #100	@ 0x64
 8001896:	f000 ff43 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawInt(20,68,left_count,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 800189a:	4b74      	ldr	r3, [pc, #464]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b7e      	ldr	r3, [pc, #504]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018ac:	2144      	movs	r1, #68	@ 0x44
 80018ae:	2014      	movs	r0, #20
 80018b0:	f000 ff36 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawInt(100,68,right_count,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 80018b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b78      	ldr	r3, [pc, #480]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2300      	movs	r3, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c6:	2144      	movs	r1, #68	@ 0x44
 80018c8:	2064      	movs	r0, #100	@ 0x64
 80018ca:	f000 ff29 	bl	8002720 <ST7735_DrawInt>

			ST7735_DrawFloat(30,18, JY901_data.angle.angle[0],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 80018ce:	4b75      	ldr	r3, [pc, #468]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018d0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80018d4:	2301      	movs	r3, #1
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	4b70      	ldr	r3, [pc, #448]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	2112      	movs	r1, #18
 80018e8:	201e      	movs	r0, #30
 80018ea:	f000 fedf 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,28, JY901_data.angle.angle[1],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 80018ee:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018f0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80018f4:	2301      	movs	r3, #1
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	4b68      	ldr	r3, [pc, #416]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	211c      	movs	r1, #28
 8001908:	201e      	movs	r0, #30
 800190a:	f000 fecf 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,38, JY901_data.angle.angle[2],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 800190e:	4b65      	ldr	r3, [pc, #404]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001910:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001914:	2301      	movs	r3, #1
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	4b60      	ldr	r3, [pc, #384]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001922:	eeb0 0a67 	vmov.f32	s0, s15
 8001926:	2126      	movs	r1, #38	@ 0x26
 8001928:	201e      	movs	r0, #30
 800192a:	f000 febf 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(70,48,IMU_FPS,ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 800192e:	4b56      	ldr	r3, [pc, #344]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193a:	2301      	movs	r3, #1
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	4b57      	ldr	r3, [pc, #348]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001948:	eeb0 0a67 	vmov.f32	s0, s15
 800194c:	2130      	movs	r1, #48	@ 0x30
 800194e:	2046      	movs	r0, #70	@ 0x46
 8001950:	f000 feac 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,28, JY901_data.q.q[1],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
			ST7735_DrawFloat(30,38, JY901_data.q.q[2],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
			ST7735_DrawFloat(70,48,JY901_data.q.q[3],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
		}
    }
}
 8001954:	e189      	b.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x49a>
		else if(n0 %4 == 1)
 8001956:	4b4f      	ldr	r3, [pc, #316]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	425a      	negs	r2, r3
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	bf58      	it	pl
 8001966:	4253      	negpl	r3, r2
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 80a3 	bne.w	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x2e4>
			ST7735_DrawFloat(20,58, n0,ST7735_WHITE,ST7735_BLACK,&Font_7x10,2);
 800196e:	4b49      	ldr	r3, [pc, #292]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	2302      	movs	r3, #2
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2300      	movs	r3, #0
 8001984:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	213a      	movs	r1, #58	@ 0x3a
 800198e:	2014      	movs	r0, #20
 8001990:	f000 fe8c 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawInt(100,58,n1,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001994:	4b44      	ldr	r3, [pc, #272]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b40      	ldr	r3, [pc, #256]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2300      	movs	r3, #0
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019a4:	213a      	movs	r1, #58	@ 0x3a
 80019a6:	2064      	movs	r0, #100	@ 0x64
 80019a8:	f000 feba 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawInt(20,68,n2,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 80019ac:	4b3f      	ldr	r3, [pc, #252]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2300      	movs	r3, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019bc:	2144      	movs	r1, #68	@ 0x44
 80019be:	2014      	movs	r0, #20
 80019c0:	f000 feae 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawInt(100,68,n3,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 80019c4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d4:	2144      	movs	r1, #68	@ 0x44
 80019d6:	2064      	movs	r0, #100	@ 0x64
 80019d8:	f000 fea2 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawFloat(30,18, JY901_data.acc.a[0],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 80019dc:	4b31      	ldr	r3, [pc, #196]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019de:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f0:	eeb0 0a67 	vmov.f32	s0, s15
 80019f4:	2112      	movs	r1, #18
 80019f6:	201e      	movs	r0, #30
 80019f8:	f000 fe58 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,28, JY901_data.acc.a[1],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019fe:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001a02:	2301      	movs	r3, #1
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a10:	eeb0 0a67 	vmov.f32	s0, s15
 8001a14:	211c      	movs	r1, #28
 8001a16:	201e      	movs	r0, #30
 8001a18:	f000 fe48 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,38, JY901_data.acc.a[2],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001a1c:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a1e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001a22:	2301      	movs	r3, #1
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a30:	eeb0 0a67 	vmov.f32	s0, s15
 8001a34:	2126      	movs	r1, #38	@ 0x26
 8001a36:	201e      	movs	r0, #30
 8001a38:	f000 fe38 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(70,48,IMU_FPS,ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a48:	2301      	movs	r3, #1
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	2130      	movs	r1, #48	@ 0x30
 8001a5c:	2046      	movs	r0, #70	@ 0x46
 8001a5e:	f000 fe25 	bl	80026ac <ST7735_DrawFloat>
}
 8001a62:	e102      	b.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x49a>
 8001a64:	200005ac 	.word	0x200005ac
 8001a68:	200004d4 	.word	0x200004d4
 8001a6c:	200002f4 	.word	0x200002f4
 8001a70:	2000051c 	.word	0x2000051c
 8001a74:	200002f8 	.word	0x200002f8
 8001a78:	200002fc 	.word	0x200002fc
 8001a7c:	20000300 	.word	0x20000300
 8001a80:	20000564 	.word	0x20000564
 8001a84:	200002f2 	.word	0x200002f2
 8001a88:	200002f0 	.word	0x200002f0
 8001a8c:	200002f1 	.word	0x200002f1
 8001a90:	2000028c 	.word	0x2000028c
 8001a94:	20000304 	.word	0x20000304
 8001a98:	200002e8 	.word	0x200002e8
 8001a9c:	0800ceac 	.word	0x0800ceac
 8001aa0:	200002ec 	.word	0x200002ec
 8001aa4:	20000208 	.word	0x20000208
 8001aa8:	20000308 	.word	0x20000308
 8001aac:	2000030c 	.word	0x2000030c
 8001ab0:	20000310 	.word	0x20000310
		else if(n0 %4 == 2)
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	425a      	negs	r2, r3
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	bf58      	it	pl
 8001ac4:	4253      	negpl	r3, r2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d154      	bne.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x3a4>
			ST7735_DrawInt(20,58,v1,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001aca:	4b6b      	ldr	r3, [pc, #428]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad4:	4b69      	ldr	r3, [pc, #420]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ae0:	ee17 2a90 	vmov	r2, s15
 8001ae4:	213a      	movs	r1, #58	@ 0x3a
 8001ae6:	2014      	movs	r0, #20
 8001ae8:	f000 fe1a 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawFloat(30,18, JY901_data.w.w[0],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001aec:	4b64      	ldr	r3, [pc, #400]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001aee:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001af2:	2301      	movs	r3, #1
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	4b61      	ldr	r3, [pc, #388]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b00:	eeb0 0a67 	vmov.f32	s0, s15
 8001b04:	2112      	movs	r1, #18
 8001b06:	201e      	movs	r0, #30
 8001b08:	f000 fdd0 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,28, JY901_data.w.w[1],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001b0e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	4b59      	ldr	r3, [pc, #356]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b20:	eeb0 0a67 	vmov.f32	s0, s15
 8001b24:	211c      	movs	r1, #28
 8001b26:	201e      	movs	r0, #30
 8001b28:	f000 fdc0 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,38, JY901_data.w.w[2],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001b2c:	4b54      	ldr	r3, [pc, #336]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001b2e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001b32:	2301      	movs	r3, #1
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	4b51      	ldr	r3, [pc, #324]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b40:	eeb0 0a67 	vmov.f32	s0, s15
 8001b44:	2126      	movs	r1, #38	@ 0x26
 8001b46:	201e      	movs	r0, #30
 8001b48:	f000 fdb0 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(70,48,IMU_FPS,ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b58:	2301      	movs	r3, #1
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	4b47      	ldr	r3, [pc, #284]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2300      	movs	r3, #0
 8001b62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b66:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6a:	2130      	movs	r1, #48	@ 0x30
 8001b6c:	2046      	movs	r0, #70	@ 0x46
 8001b6e:	f000 fd9d 	bl	80026ac <ST7735_DrawFloat>
}
 8001b72:	e07a      	b.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x49a>
		else if(n0 %4 == 3)
 8001b74:	4b3f      	ldr	r3, [pc, #252]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	425a      	negs	r2, r3
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	f002 0203 	and.w	r2, r2, #3
 8001b82:	bf58      	it	pl
 8001b84:	4253      	negpl	r3, r2
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d16f      	bne.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x49a>
			ST7735_DrawInt(20,58,n0,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2300      	movs	r3, #0
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b9a:	213a      	movs	r1, #58	@ 0x3a
 8001b9c:	2014      	movs	r0, #20
 8001b9e:	f000 fdbf 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawInt(100,58,n1,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b35      	ldr	r3, [pc, #212]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bb2:	213a      	movs	r1, #58	@ 0x3a
 8001bb4:	2064      	movs	r0, #100	@ 0x64
 8001bb6:	f000 fdb3 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawInt(20,68,n2,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001bba:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bca:	2144      	movs	r1, #68	@ 0x44
 8001bcc:	2014      	movs	r0, #20
 8001bce:	f000 fda7 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawInt(120,68,n3,ST7735_WHITE,ST7735_BLACK,&Font_7x10);
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001be2:	2144      	movs	r1, #68	@ 0x44
 8001be4:	2078      	movs	r0, #120	@ 0x78
 8001be6:	f000 fd9b 	bl	8002720 <ST7735_DrawInt>
			ST7735_DrawFloat(30,18, JY901_data.q.q[0],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001bea:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001bec:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001c02:	2112      	movs	r1, #18
 8001c04:	201e      	movs	r0, #30
 8001c06:	f000 fd51 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,28, JY901_data.q.q[1],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001c0c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001c10:	2301      	movs	r3, #1
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c22:	211c      	movs	r1, #28
 8001c24:	201e      	movs	r0, #30
 8001c26:	f000 fd41 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(30,38, JY901_data.q.q[2],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001c2c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001c30:	2301      	movs	r3, #1
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c42:	2126      	movs	r1, #38	@ 0x26
 8001c44:	201e      	movs	r0, #30
 8001c46:	f000 fd31 	bl	80026ac <ST7735_DrawFloat>
			ST7735_DrawFloat(70,48,JY901_data.q.q[3],ST7735_WHITE,ST7735_BLACK,&Font_7x10,1);
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001c4c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001c50:	2301      	movs	r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c62:	2130      	movs	r1, #48	@ 0x30
 8001c64:	2046      	movs	r0, #70	@ 0x46
 8001c66:	f000 fd21 	bl	80026ac <ST7735_DrawFloat>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000304 	.word	0x20000304
 8001c78:	20000314 	.word	0x20000314
 8001c7c:	0800ceac 	.word	0x0800ceac
 8001c80:	20000208 	.word	0x20000208
 8001c84:	200002f0 	.word	0x200002f0
 8001c88:	20000308 	.word	0x20000308
 8001c8c:	2000030c 	.word	0x2000030c
 8001c90:	20000310 	.word	0x20000310

08001c94 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin==KEY0_Pin)
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d104      	bne.n	8001cae <HAL_GPIO_EXTI_Callback+0x1a>
    {
        n0++;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x58>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4a10      	ldr	r2, [pc, #64]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x58>)
 8001cac:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin==KEY1_Pin)
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d104      	bne.n	8001cbe <HAL_GPIO_EXTI_Callback+0x2a>
    {
        n1++;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001cbc:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin==KEY2_Pin)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d104      	bne.n	8001cce <HAL_GPIO_EXTI_Callback+0x3a>
    {
        n2++;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ccc:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin==KEY3_Pin)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d104      	bne.n	8001cde <HAL_GPIO_EXTI_Callback+0x4a>
    {
        n3++;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]
    }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000304 	.word	0x20000304
 8001cf0:	20000308 	.word	0x20000308
 8001cf4:	2000030c 	.word	0x2000030c
 8001cf8:	20000310 	.word	0x20000310

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <Error_Handler+0x8>

08001d08 <Motor_Left>:
//PB3\PB5 TIM3 CJ1\2 编码器 采用输入捕获
//PD4\5 右前轮 1、0正转，0、1反转  PD6\7 右后轮 1、0正转，0、1反转
//PD2\3 左前轮 0、1正转，1、0反转  PD0\1 左后轮 0、1正转，1、0反转

void Motor_Left(int ch)//ch 0正 1反
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	if(ch == 0)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d114      	bne.n	8001d40 <Motor_Left+0x38>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4817      	ldr	r0, [pc, #92]	@ (8001d78 <Motor_Left+0x70>)
 8001d1c:	f002 fa2e 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2101      	movs	r1, #1
 8001d24:	4814      	ldr	r0, [pc, #80]	@ (8001d78 <Motor_Left+0x70>)
 8001d26:	f002 fa29 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2108      	movs	r1, #8
 8001d2e:	4812      	ldr	r0, [pc, #72]	@ (8001d78 <Motor_Left+0x70>)
 8001d30:	f002 fa24 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2104      	movs	r1, #4
 8001d38:	480f      	ldr	r0, [pc, #60]	@ (8001d78 <Motor_Left+0x70>)
 8001d3a:	f002 fa1f 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_RESET);
	}
}
 8001d3e:	e016      	b.n	8001d6e <Motor_Left+0x66>
	else if(ch == 1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d113      	bne.n	8001d6e <Motor_Left+0x66>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2101      	movs	r1, #1
 8001d4a:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <Motor_Left+0x70>)
 8001d4c:	f002 fa16 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2102      	movs	r1, #2
 8001d54:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <Motor_Left+0x70>)
 8001d56:	f002 fa11 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	4806      	ldr	r0, [pc, #24]	@ (8001d78 <Motor_Left+0x70>)
 8001d60:	f002 fa0c 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2108      	movs	r1, #8
 8001d68:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <Motor_Left+0x70>)
 8001d6a:	f002 fa07 	bl	800417c <HAL_GPIO_WritePin>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020c00 	.word	0x40020c00

08001d7c <Motor_Right>:

void Motor_Right(int ch)//ch 0正 1反
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if(ch == 0)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d114      	bne.n	8001db4 <Motor_Right+0x38>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,GPIO_PIN_SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	4817      	ldr	r0, [pc, #92]	@ (8001dec <Motor_Right+0x70>)
 8001d90:	f002 f9f4 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2120      	movs	r1, #32
 8001d98:	4814      	ldr	r0, [pc, #80]	@ (8001dec <Motor_Right+0x70>)
 8001d9a:	f002 f9ef 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2140      	movs	r1, #64	@ 0x40
 8001da2:	4812      	ldr	r0, [pc, #72]	@ (8001dec <Motor_Right+0x70>)
 8001da4:	f002 f9ea 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	480f      	ldr	r0, [pc, #60]	@ (8001dec <Motor_Right+0x70>)
 8001dae:	f002 f9e5 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,GPIO_PIN_RESET);
	}
}
 8001db2:	e016      	b.n	8001de2 <Motor_Right+0x66>
	else if(ch == 1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d113      	bne.n	8001de2 <Motor_Right+0x66>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2120      	movs	r1, #32
 8001dbe:	480b      	ldr	r0, [pc, #44]	@ (8001dec <Motor_Right+0x70>)
 8001dc0:	f002 f9dc 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2110      	movs	r1, #16
 8001dc8:	4808      	ldr	r0, [pc, #32]	@ (8001dec <Motor_Right+0x70>)
 8001dca:	f002 f9d7 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	4806      	ldr	r0, [pc, #24]	@ (8001dec <Motor_Right+0x70>)
 8001dd4:	f002 f9d2 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2140      	movs	r1, #64	@ 0x40
 8001ddc:	4803      	ldr	r0, [pc, #12]	@ (8001dec <Motor_Right+0x70>)
 8001dde:	f002 f9cd 	bl	800417c <HAL_GPIO_WritePin>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020c00 	.word	0x40020c00

08001df0 <set_pwm>:

void set_pwm(int ch,int speed)		//speed 0-1000
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
	if(ch==1) //左轮
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d113      	bne.n	8001e28 <set_pwm+0x38>
	{
		if(speed>=0)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db07      	blt.n	8001e16 <set_pwm+0x26>
		{
			Motor_Left(0);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff ff7e 	bl	8001d08 <Motor_Left>
			__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_2,speed);
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <set_pwm+0x6c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	639a      	str	r2, [r3, #56]	@ 0x38
		{
			Motor_Right(1);
			__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,-speed);
		}
	}
}
 8001e14:	e01e      	b.n	8001e54 <set_pwm+0x64>
			Motor_Left(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff ff76 	bl	8001d08 <Motor_Left>
			__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_2,-speed);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	425a      	negs	r2, r3
 8001e20:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <set_pwm+0x6c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001e26:	e015      	b.n	8001e54 <set_pwm+0x64>
	else if(ch==2)  //右轮
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d112      	bne.n	8001e54 <set_pwm+0x64>
		if(speed>=0)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db07      	blt.n	8001e44 <set_pwm+0x54>
			Motor_Right(0);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff ffa1 	bl	8001d7c <Motor_Right>
			__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,speed);
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <set_pwm+0x6c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e42:	e007      	b.n	8001e54 <set_pwm+0x64>
			Motor_Right(1);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7ff ff99 	bl	8001d7c <Motor_Right>
			__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,-speed);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	425a      	negs	r2, r3
 8001e4e:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <set_pwm+0x6c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200005f4 	.word	0x200005f4

08001e60 <Read_Encoder_Count>:

uint32_t Read_Encoder_Count(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
	count = __HAL_TIM_GET_COUNTER(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    return count;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <Calculate_Encoder_Speed>:

float Calculate_Encoder_Speed(int32_t delta)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    const float wheel_circumference = PI * WHEEL_DIAMETER;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <Calculate_Encoder_Speed+0x44>)
 8001e96:	60fb      	str	r3, [r7, #12]

    // delta 就是本周期的编码器计数增量（脉冲数）
    // 转/秒 = 脉冲数 / 每圈脉冲数 / 采样周期（秒）
    float rps = (delta * (1000.0f / SAMPLE_PERIOD_MS)) / ENCODER_RESOLUTION;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001ea6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eaa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001ed4 <Calculate_Encoder_Speed+0x48>
 8001eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb2:	edc7 7a02 	vstr	s15, [r7, #8]

    // 线速度 = 转速 × 圆周长
    return rps * wheel_circumference;
 8001eb6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	3e714639 	.word	0x3e714639
 8001ed4:	45dde000 	.word	0x45dde000

08001ed8 <PID_IncInit>:
{

}

void PID_IncInit(PID_IncTypeDef *pid, float kp, float ki, float kd, float outMax, float outMin)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6178      	str	r0, [r7, #20]
 8001ee0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ee4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ee8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001eec:	edc7 1a01 	vstr	s3, [r7, #4]
 8001ef0:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = kp;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	601a      	str	r2, [r3, #0]
    pid->Ki = ki;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
    pid->Kd = kd;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	609a      	str	r2, [r3, #8]
    pid->Error = 0.0f;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
    pid->PrevError = 0.0f;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
    pid->PrevPrevError = 0.0f;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
    pid->OutMax = outMax;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
    pid->OutMin = outMin;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	61da      	str	r2, [r3, #28]
}
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f3e:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <MX_SPI1_Init+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f42:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f84:	220a      	movs	r2, #10
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f8a:	f002 fd81 	bl	8004a90 <HAL_SPI_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f94:	f7ff feb2 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000338 	.word	0x20000338
 8001fa0:	40013000 	.word	0x40013000

08001fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <HAL_SPI_MspInit+0x84>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12b      	bne.n	800201e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a17      	ldr	r2, [pc, #92]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a10      	ldr	r2, [pc, #64]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ffe:	23a0      	movs	r3, #160	@ 0xa0
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <HAL_SPI_MspInit+0x8c>)
 800201a:	f001 ff13 	bl	8003e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	@ 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40013000 	.word	0x40013000
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000

08002034 <ST7735_Reset>:
#define ST7735_MADCTL_MV  0x20

extern int n0;

void ST7735_Reset(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ST7735_RST_GPIO_Port, ST7735_RST_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	2120      	movs	r1, #32
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <ST7735_Reset+0x28>)
 800203e:	f002 f89d 	bl	800417c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002042:	2064      	movs	r0, #100	@ 0x64
 8002044:	f001 f9c6 	bl	80033d4 <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RST_GPIO_Port, ST7735_RST_Pin, GPIO_PIN_SET);
 8002048:	2201      	movs	r2, #1
 800204a:	2120      	movs	r1, #32
 800204c:	4803      	ldr	r0, [pc, #12]	@ (800205c <ST7735_Reset+0x28>)
 800204e:	f002 f895 	bl	800417c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002052:	2064      	movs	r0, #100	@ 0x64
 8002054:	f001 f9be 	bl	80033d4 <HAL_Delay>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40020800 	.word	0x40020800

08002060 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	2110      	movs	r1, #16
 800206e:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <ST7735_WriteCommand+0x40>)
 8002070:	f002 f884 	bl	800417c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	2110      	movs	r1, #16
 8002078:	480a      	ldr	r0, [pc, #40]	@ (80020a4 <ST7735_WriteCommand+0x44>)
 800207a:	f002 f87f 	bl	800417c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ST7735_SPI_INSTANCE, &cmd, 1, HAL_MAX_DELAY);
 800207e:	1df9      	adds	r1, r7, #7
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	2201      	movs	r2, #1
 8002086:	4808      	ldr	r0, [pc, #32]	@ (80020a8 <ST7735_WriteCommand+0x48>)
 8002088:	f002 fd8b 	bl	8004ba2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	2110      	movs	r1, #16
 8002090:	4804      	ldr	r0, [pc, #16]	@ (80020a4 <ST7735_WriteCommand+0x44>)
 8002092:	f002 f873 	bl	800417c <HAL_GPIO_WritePin>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020800 	.word	0x40020800
 80020a8:	20000338 	.word	0x20000338

080020ac <ST7735_WriteByte>:

void ST7735_WriteByte(uint8_t data)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	2110      	movs	r1, #16
 80020ba:	480c      	ldr	r0, [pc, #48]	@ (80020ec <ST7735_WriteByte+0x40>)
 80020bc:	f002 f85e 	bl	800417c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2110      	movs	r1, #16
 80020c4:	480a      	ldr	r0, [pc, #40]	@ (80020f0 <ST7735_WriteByte+0x44>)
 80020c6:	f002 f859 	bl	800417c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ST7735_SPI_INSTANCE, &data, 1, HAL_MAX_DELAY);
 80020ca:	1df9      	adds	r1, r7, #7
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
 80020d0:	2201      	movs	r2, #1
 80020d2:	4808      	ldr	r0, [pc, #32]	@ (80020f4 <ST7735_WriteByte+0x48>)
 80020d4:	f002 fd65 	bl	8004ba2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80020d8:	2201      	movs	r2, #1
 80020da:	2110      	movs	r1, #16
 80020dc:	4804      	ldr	r0, [pc, #16]	@ (80020f0 <ST7735_WriteByte+0x44>)
 80020de:	f002 f84d 	bl	800417c <HAL_GPIO_WritePin>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40020800 	.word	0x40020800
 80020f4:	20000338 	.word	0x20000338

080020f8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t *data, size_t data_size)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	2110      	movs	r1, #16
 8002106:	480c      	ldr	r0, [pc, #48]	@ (8002138 <ST7735_WriteData+0x40>)
 8002108:	f002 f838 	bl	800417c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	2110      	movs	r1, #16
 8002110:	480a      	ldr	r0, [pc, #40]	@ (800213c <ST7735_WriteData+0x44>)
 8002112:	f002 f833 	bl	800417c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ST7735_SPI_INSTANCE, data, data_size, HAL_MAX_DELAY);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b29a      	uxth	r2, r3
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4807      	ldr	r0, [pc, #28]	@ (8002140 <ST7735_WriteData+0x48>)
 8002122:	f002 fd3e 	bl	8004ba2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002126:	2201      	movs	r2, #1
 8002128:	2110      	movs	r1, #16
 800212a:	4804      	ldr	r0, [pc, #16]	@ (800213c <ST7735_WriteData+0x44>)
 800212c:	f002 f826 	bl	800417c <HAL_GPIO_WritePin>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40020000 	.word	0x40020000
 800213c:	40020800 	.word	0x40020800
 8002140:	20000338 	.word	0x20000338

08002144 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t rotation)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  uint8_t madctl = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]

  switch (rotation)
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d817      	bhi.n	8002188 <ST7735_SetRotation+0x44>
 8002158:	a201      	add	r2, pc, #4	@ (adr r2, 8002160 <ST7735_SetRotation+0x1c>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002171 	.word	0x08002171
 8002164:	08002177 	.word	0x08002177
 8002168:	0800217d 	.word	0x0800217d
 800216c:	08002183 	.word	0x08002183
  {
    case 0:
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_MODE;
 8002170:	23c0      	movs	r3, #192	@ 0xc0
 8002172:	73fb      	strb	r3, [r7, #15]
      break;
 8002174:	e008      	b.n	8002188 <ST7735_SetRotation+0x44>
    case 1:
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_MODE;
 8002176:	23a0      	movs	r3, #160	@ 0xa0
 8002178:	73fb      	strb	r3, [r7, #15]
      break;
 800217a:	e005      	b.n	8002188 <ST7735_SetRotation+0x44>
    case 2:
      madctl = ST7735_MADCTL_MODE;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
      break;
 8002180:	e002      	b.n	8002188 <ST7735_SetRotation+0x44>
    case 3:
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_MODE;
 8002182:	2360      	movs	r3, #96	@ 0x60
 8002184:	73fb      	strb	r3, [r7, #15]
      break;
 8002186:	bf00      	nop
  }

  ST7735_WriteCommand(ST7735_MADCTL);
 8002188:	2036      	movs	r0, #54	@ 0x36
 800218a:	f7ff ff69 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(madctl);
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff8b 	bl	80020ac <ST7735_WriteByte>
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop

080021a0 <ST7735_Init>:

void ST7735_Init(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  // Initialize the display
  ST7735_Reset();
 80021a4:	f7ff ff46 	bl	8002034 <ST7735_Reset>
  ST7735_WriteCommand(ST7735_SLPOUT);
 80021a8:	2011      	movs	r0, #17
 80021aa:	f7ff ff59 	bl	8002060 <ST7735_WriteCommand>
  HAL_Delay(120);
 80021ae:	2078      	movs	r0, #120	@ 0x78
 80021b0:	f001 f910 	bl	80033d4 <HAL_Delay>
  ST7735_WriteCommand(ST7735_FRMCTR1);
 80021b4:	20b1      	movs	r0, #177	@ 0xb1
 80021b6:	f7ff ff53 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x01);
 80021ba:	2001      	movs	r0, #1
 80021bc:	f7ff ff76 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 80021c0:	202c      	movs	r0, #44	@ 0x2c
 80021c2:	f7ff ff73 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 80021c6:	202d      	movs	r0, #45	@ 0x2d
 80021c8:	f7ff ff70 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_FRMCTR2);
 80021cc:	20b2      	movs	r0, #178	@ 0xb2
 80021ce:	f7ff ff47 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x01);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7ff ff6a 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 80021d8:	202c      	movs	r0, #44	@ 0x2c
 80021da:	f7ff ff67 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 80021de:	202d      	movs	r0, #45	@ 0x2d
 80021e0:	f7ff ff64 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_FRMCTR3);
 80021e4:	20b3      	movs	r0, #179	@ 0xb3
 80021e6:	f7ff ff3b 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x01);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f7ff ff5e 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 80021f0:	202c      	movs	r0, #44	@ 0x2c
 80021f2:	f7ff ff5b 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 80021f6:	202d      	movs	r0, #45	@ 0x2d
 80021f8:	f7ff ff58 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x01);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7ff ff55 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 8002202:	202c      	movs	r0, #44	@ 0x2c
 8002204:	f7ff ff52 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 8002208:	202d      	movs	r0, #45	@ 0x2d
 800220a:	f7ff ff4f 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_INVCTR);
 800220e:	20b4      	movs	r0, #180	@ 0xb4
 8002210:	f7ff ff26 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x07);
 8002214:	2007      	movs	r0, #7
 8002216:	f7ff ff49 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR1);
 800221a:	20c0      	movs	r0, #192	@ 0xc0
 800221c:	f7ff ff20 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0xA2);
 8002220:	20a2      	movs	r0, #162	@ 0xa2
 8002222:	f7ff ff43 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x02);
 8002226:	2002      	movs	r0, #2
 8002228:	f7ff ff40 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x84);
 800222c:	2084      	movs	r0, #132	@ 0x84
 800222e:	f7ff ff3d 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR2);
 8002232:	20c1      	movs	r0, #193	@ 0xc1
 8002234:	f7ff ff14 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0xC5);
 8002238:	20c5      	movs	r0, #197	@ 0xc5
 800223a:	f7ff ff37 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR3);
 800223e:	20c2      	movs	r0, #194	@ 0xc2
 8002240:	f7ff ff0e 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x0A);
 8002244:	200a      	movs	r0, #10
 8002246:	f7ff ff31 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff ff2e 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR4);
 8002250:	20c3      	movs	r0, #195	@ 0xc3
 8002252:	f7ff ff05 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x8A);
 8002256:	208a      	movs	r0, #138	@ 0x8a
 8002258:	f7ff ff28 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2A);
 800225c:	202a      	movs	r0, #42	@ 0x2a
 800225e:	f7ff ff25 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR5);
 8002262:	20c4      	movs	r0, #196	@ 0xc4
 8002264:	f7ff fefc 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x8A);
 8002268:	208a      	movs	r0, #138	@ 0x8a
 800226a:	f7ff ff1f 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0xEE);
 800226e:	20ee      	movs	r0, #238	@ 0xee
 8002270:	f7ff ff1c 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_VMCTR1);
 8002274:	20c5      	movs	r0, #197	@ 0xc5
 8002276:	f7ff fef3 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x0E);
 800227a:	200e      	movs	r0, #14
 800227c:	f7ff ff16 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_INVERSE ? ST7735_INVON : ST7735_INVOFF);
 8002280:	2020      	movs	r0, #32
 8002282:	f7ff feed 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteCommand(ST7735_COLMOD);
 8002286:	203a      	movs	r0, #58	@ 0x3a
 8002288:	f7ff feea 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x05);
 800228c:	2005      	movs	r0, #5
 800228e:	f7ff ff0d 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_CASET);
 8002292:	202a      	movs	r0, #42	@ 0x2a
 8002294:	f7ff fee4 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x00);
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff ff07 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff ff04 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff ff01 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x7F);
 80022aa:	207f      	movs	r0, #127	@ 0x7f
 80022ac:	f7ff fefe 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_RASET);
 80022b0:	202b      	movs	r0, #43	@ 0x2b
 80022b2:	f7ff fed5 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x00);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7ff fef8 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff fef5 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff fef2 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x9F);
 80022c8:	209f      	movs	r0, #159	@ 0x9f
 80022ca:	f7ff feef 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_GMCTRP1);
 80022ce:	20e0      	movs	r0, #224	@ 0xe0
 80022d0:	f7ff fec6 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x02);
 80022d4:	2002      	movs	r0, #2
 80022d6:	f7ff fee9 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x1C);
 80022da:	201c      	movs	r0, #28
 80022dc:	f7ff fee6 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x07);
 80022e0:	2007      	movs	r0, #7
 80022e2:	f7ff fee3 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x12);
 80022e6:	2012      	movs	r0, #18
 80022e8:	f7ff fee0 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x37);
 80022ec:	2037      	movs	r0, #55	@ 0x37
 80022ee:	f7ff fedd 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x32);
 80022f2:	2032      	movs	r0, #50	@ 0x32
 80022f4:	f7ff feda 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x29);
 80022f8:	2029      	movs	r0, #41	@ 0x29
 80022fa:	f7ff fed7 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 80022fe:	202d      	movs	r0, #45	@ 0x2d
 8002300:	f7ff fed4 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x29);
 8002304:	2029      	movs	r0, #41	@ 0x29
 8002306:	f7ff fed1 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x25);
 800230a:	2025      	movs	r0, #37	@ 0x25
 800230c:	f7ff fece 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2B);
 8002310:	202b      	movs	r0, #43	@ 0x2b
 8002312:	f7ff fecb 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x39);
 8002316:	2039      	movs	r0, #57	@ 0x39
 8002318:	f7ff fec8 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff fec5 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x01);
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff fec2 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x03);
 8002328:	2003      	movs	r0, #3
 800232a:	f7ff febf 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x10);
 800232e:	2010      	movs	r0, #16
 8002330:	f7ff febc 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_GMCTRN1);
 8002334:	20e1      	movs	r0, #225	@ 0xe1
 8002336:	f7ff fe93 	bl	8002060 <ST7735_WriteCommand>
  ST7735_WriteByte(0x03);
 800233a:	2003      	movs	r0, #3
 800233c:	f7ff feb6 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x1D);
 8002340:	201d      	movs	r0, #29
 8002342:	f7ff feb3 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x07);
 8002346:	2007      	movs	r0, #7
 8002348:	f7ff feb0 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x06);
 800234c:	2006      	movs	r0, #6
 800234e:	f7ff fead 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2E);
 8002352:	202e      	movs	r0, #46	@ 0x2e
 8002354:	f7ff feaa 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 8002358:	202c      	movs	r0, #44	@ 0x2c
 800235a:	f7ff fea7 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x29);
 800235e:	2029      	movs	r0, #41	@ 0x29
 8002360:	f7ff fea4 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 8002364:	202d      	movs	r0, #45	@ 0x2d
 8002366:	f7ff fea1 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2E);
 800236a:	202e      	movs	r0, #46	@ 0x2e
 800236c:	f7ff fe9e 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x2E);
 8002370:	202e      	movs	r0, #46	@ 0x2e
 8002372:	f7ff fe9b 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x37);
 8002376:	2037      	movs	r0, #55	@ 0x37
 8002378:	f7ff fe98 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x3F);
 800237c:	203f      	movs	r0, #63	@ 0x3f
 800237e:	f7ff fe95 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 8002382:	2000      	movs	r0, #0
 8002384:	f7ff fe92 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff fe8f 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x02);
 800238e:	2002      	movs	r0, #2
 8002390:	f7ff fe8c 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteByte(0x10);
 8002394:	2010      	movs	r0, #16
 8002396:	f7ff fe89 	bl	80020ac <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_NORON);
 800239a:	2013      	movs	r0, #19
 800239c:	f7ff fe60 	bl	8002060 <ST7735_WriteCommand>
  HAL_Delay(10);
 80023a0:	200a      	movs	r0, #10
 80023a2:	f001 f817 	bl	80033d4 <HAL_Delay>
  ST7735_WriteCommand(ST7735_DISPON);
 80023a6:	2029      	movs	r0, #41	@ 0x29
 80023a8:	f7ff fe5a 	bl	8002060 <ST7735_WriteCommand>
  HAL_Delay(10);
 80023ac:	200a      	movs	r0, #10
 80023ae:	f001 f811 	bl	80033d4 <HAL_Delay>

  ST7735_SetRotation(ST7735_ROTATION);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff fec6 	bl	8002144 <ST7735_SetRotation>
  ST7735_FillScreen(ST7735_BLACK);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 f966 	bl	800268a <ST7735_FillScreen>
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80023c2:	b590      	push	{r4, r7, lr}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4604      	mov	r4, r0
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	461a      	mov	r2, r3
 80023d0:	4623      	mov	r3, r4
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	4603      	mov	r3, r0
 80023d6:	71bb      	strb	r3, [r7, #6]
 80023d8:	460b      	mov	r3, r1
 80023da:	717b      	strb	r3, [r7, #5]
 80023dc:	4613      	mov	r3, r2
 80023de:	713b      	strb	r3, [r7, #4]
  x0 += ST7735_XSTART;
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	3301      	adds	r3, #1
 80023e4:	71fb      	strb	r3, [r7, #7]
  y0 += ST7735_YSTART;
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	331a      	adds	r3, #26
 80023ea:	71bb      	strb	r3, [r7, #6]

  x1 += ST7735_XSTART;
 80023ec:	797b      	ldrb	r3, [r7, #5]
 80023ee:	3301      	adds	r3, #1
 80023f0:	717b      	strb	r3, [r7, #5]
  y1 += ST7735_YSTART;
 80023f2:	793b      	ldrb	r3, [r7, #4]
 80023f4:	331a      	adds	r3, #26
 80023f6:	713b      	strb	r3, [r7, #4]

  ST7735_WriteCommand(ST7735_CASET);
 80023f8:	202a      	movs	r0, #42	@ 0x2a
 80023fa:	f7ff fe31 	bl	8002060 <ST7735_WriteCommand>
  uint8_t data[] = { 0x00, x0, 0x00, x1};
 80023fe:	2300      	movs	r3, #0
 8002400:	733b      	strb	r3, [r7, #12]
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	737b      	strb	r3, [r7, #13]
 8002406:	2300      	movs	r3, #0
 8002408:	73bb      	strb	r3, [r7, #14]
 800240a:	797b      	ldrb	r3, [r7, #5]
 800240c:	73fb      	strb	r3, [r7, #15]
  ST7735_WriteData(data, sizeof(data));
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	2104      	movs	r1, #4
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe6f 	bl	80020f8 <ST7735_WriteData>

  ST7735_WriteCommand(ST7735_RASET);
 800241a:	202b      	movs	r0, #43	@ 0x2b
 800241c:	f7ff fe20 	bl	8002060 <ST7735_WriteCommand>
  data[1] = y0;
 8002420:	79bb      	ldrb	r3, [r7, #6]
 8002422:	737b      	strb	r3, [r7, #13]
  data[3] = y1;
 8002424:	793b      	ldrb	r3, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  ST7735_WriteData(data, sizeof(data));
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	2104      	movs	r1, #4
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fe62 	bl	80020f8 <ST7735_WriteData>
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}

0800243c <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4623      	mov	r3, r4
 800244c:	80fb      	strh	r3, [r7, #6]
 800244e:	4603      	mov	r3, r0
 8002450:	80bb      	strh	r3, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	807b      	strh	r3, [r7, #2]
 8002456:	4613      	mov	r3, r2
 8002458:	803b      	strh	r3, [r7, #0]
  static uint8_t buff[ST7735_WIDTH * 2];
  uint16_t i = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	81fb      	strh	r3, [r7, #14]

  for (i = 0; i < width; i++) {
 800245e:	2300      	movs	r3, #0
 8002460:	81fb      	strh	r3, [r7, #14]
 8002462:	e011      	b.n	8002488 <ST7735_DrawRectangle+0x4c>
    buff[i * 2] = color >> 8;
 8002464:	8c3b      	ldrh	r3, [r7, #32]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	b29a      	uxth	r2, r3
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	b2d1      	uxtb	r1, r2
 8002470:	4a1f      	ldr	r2, [pc, #124]	@ (80024f0 <ST7735_DrawRectangle+0xb4>)
 8002472:	54d1      	strb	r1, [r2, r3]
    buff[i * 2 + 1] = color & 0xFF;
 8002474:	89fb      	ldrh	r3, [r7, #14]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	3301      	adds	r3, #1
 800247a:	8c3a      	ldrh	r2, [r7, #32]
 800247c:	b2d1      	uxtb	r1, r2
 800247e:	4a1c      	ldr	r2, [pc, #112]	@ (80024f0 <ST7735_DrawRectangle+0xb4>)
 8002480:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < width; i++) {
 8002482:	89fb      	ldrh	r3, [r7, #14]
 8002484:	3301      	adds	r3, #1
 8002486:	81fb      	strh	r3, [r7, #14]
 8002488:	89fa      	ldrh	r2, [r7, #14]
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	429a      	cmp	r2, r3
 800248e:	d3e9      	bcc.n	8002464 <ST7735_DrawRectangle+0x28>
  }

  ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	b2d8      	uxtb	r0, r3
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	b2d9      	uxtb	r1, r3
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b2dc      	uxtb	r4, r3
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	883b      	ldrh	r3, [r7, #0]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4622      	mov	r2, r4
 80024ba:	f7ff ff82 	bl	80023c2 <ST7735_SetAddressWindow>
  ST7735_WriteCommand(ST7735_RAMWR);
 80024be:	202c      	movs	r0, #44	@ 0x2c
 80024c0:	f7ff fdce 	bl	8002060 <ST7735_WriteCommand>
  // Write the color data
  for (i = 0; i < height; i++) {
 80024c4:	2300      	movs	r3, #0
 80024c6:	81fb      	strh	r3, [r7, #14]
 80024c8:	e008      	b.n	80024dc <ST7735_DrawRectangle+0xa0>
    ST7735_WriteData(buff, sizeof(uint16_t) * width);
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4619      	mov	r1, r3
 80024d0:	4807      	ldr	r0, [pc, #28]	@ (80024f0 <ST7735_DrawRectangle+0xb4>)
 80024d2:	f7ff fe11 	bl	80020f8 <ST7735_WriteData>
  for (i = 0; i < height; i++) {
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	3301      	adds	r3, #1
 80024da:	81fb      	strh	r3, [r7, #14]
 80024dc:	89fa      	ldrh	r2, [r7, #14]
 80024de:	883b      	ldrh	r3, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3f2      	bcc.n	80024ca <ST7735_DrawRectangle+0x8e>
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd90      	pop	{r4, r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000390 	.word	0x20000390

080024f4 <ST7735_DrawChar>:

void ST7735_DrawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bgColor, const FontDef *font)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4604      	mov	r4, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4623      	mov	r3, r4
 8002504:	80fb      	strh	r3, [r7, #6]
 8002506:	4603      	mov	r3, r0
 8002508:	80bb      	strh	r3, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	70fb      	strb	r3, [r7, #3]
 800250e:	4613      	mov	r3, r2
 8002510:	803b      	strh	r3, [r7, #0]
  uint32_t i, b, j;

  ST7735_SetAddressWindow(x, y, x + font->width - 1, y + font->height - 1);
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	b2d8      	uxtb	r0, r3
 8002516:	88bb      	ldrh	r3, [r7, #4]
 8002518:	b2d9      	uxtb	r1, r3
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b2dc      	uxtb	r4, r3
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	4413      	add	r3, r2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4622      	mov	r2, r4
 800253c:	f7ff ff41 	bl	80023c2 <ST7735_SetAddressWindow>
  ST7735_WriteCommand(0x2C);
 8002540:	202c      	movs	r0, #44	@ 0x2c
 8002542:	f7ff fd8d 	bl	8002060 <ST7735_WriteCommand>

  for (i = 0; i < font->height; i++) {
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e051      	b.n	80025f0 <ST7735_DrawChar+0xfc>
    b = font->data[(font == &Font_Custom ? (c - 46) : (c - 32)) * font->height + i];
 800254c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002552:	492d      	ldr	r1, [pc, #180]	@ (8002608 <ST7735_DrawChar+0x114>)
 8002554:	428b      	cmp	r3, r1
 8002556:	d102      	bne.n	800255e <ST7735_DrawChar+0x6a>
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	3b2e      	subs	r3, #46	@ 0x2e
 800255c:	e001      	b.n	8002562 <ST7735_DrawChar+0x6e>
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	3b20      	subs	r3, #32
 8002562:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002564:	7849      	ldrb	r1, [r1, #1]
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4619      	mov	r1, r3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	440b      	add	r3, r1
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++) {
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e02f      	b.n	80025de <ST7735_DrawChar+0xea>
      if ((b << j) & (font->width > 16 ? 0x80000000:0x8000))  {
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	2a10      	cmp	r2, #16
 800258c:	d902      	bls.n	8002594 <ST7735_DrawChar+0xa0>
 800258e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002592:	e001      	b.n	8002598 <ST7735_DrawChar+0xa4>
 8002594:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <ST7735_DrawChar+0xc8>
        uint8_t data[] = { color >> 8, color & 0xFF };
 800259e:	883b      	ldrh	r3, [r7, #0]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	743b      	strb	r3, [r7, #16]
 80025a8:	883b      	ldrh	r3, [r7, #0]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	747b      	strb	r3, [r7, #17]
        ST7735_WriteData(data, sizeof(data));
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	2102      	movs	r1, #2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fd9f 	bl	80020f8 <ST7735_WriteData>
 80025ba:	e00d      	b.n	80025d8 <ST7735_DrawChar+0xe4>
      } else {
        uint8_t data[] = { bgColor >> 8, bgColor & 0xFF };
 80025bc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	733b      	strb	r3, [r7, #12]
 80025c6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	737b      	strb	r3, [r7, #13]
        ST7735_WriteData(data, sizeof(data));
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	2102      	movs	r1, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fd90 	bl	80020f8 <ST7735_WriteData>
    for (j = 0; j < font->width; j++) {
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	3301      	adds	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d3c9      	bcc.n	800257e <ST7735_DrawChar+0x8a>
  for (i = 0; i < font->height; i++) {
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	461a      	mov	r2, r3
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d3a7      	bcc.n	800254c <ST7735_DrawChar+0x58>
      }
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3724      	adds	r7, #36	@ 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}
 8002606:	bf00      	nop
 8002608:	0800cebc 	.word	0x0800cebc

0800260c <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t color, uint16_t bgColor, const FontDef *font)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b087      	sub	sp, #28
 8002610:	af02      	add	r7, sp, #8
 8002612:	60ba      	str	r2, [r7, #8]
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	81fb      	strh	r3, [r7, #14]
 800261a:	460b      	mov	r3, r1
 800261c:	81bb      	strh	r3, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  while (*str) {
 8002622:	e028      	b.n	8002676 <ST7735_DrawString+0x6a>
    if (x + font->width > ST7735_WIDTH) {
 8002624:	89fb      	ldrh	r3, [r7, #14]
 8002626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	4413      	add	r3, r2
 800262c:	2ba0      	cmp	r3, #160	@ 0xa0
 800262e:	dd07      	ble.n	8002640 <ST7735_DrawString+0x34>
      x = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	81fb      	strh	r3, [r7, #14]
      y += font->height;
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	461a      	mov	r2, r3
 800263a:	89bb      	ldrh	r3, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	81bb      	strh	r3, [r7, #12]
    }

    if (y + font->height > ST7735_HEIGHT) {
 8002640:	89bb      	ldrh	r3, [r7, #12]
 8002642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002644:	7852      	ldrb	r2, [r2, #1]
 8002646:	4413      	add	r3, r2
 8002648:	2b50      	cmp	r3, #80	@ 0x50
 800264a:	dc19      	bgt.n	8002680 <ST7735_DrawString+0x74>
      break;
    }

    ST7735_DrawChar(x, y, *str, color, bgColor, font);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	88fc      	ldrh	r4, [r7, #6]
 8002652:	89b9      	ldrh	r1, [r7, #12]
 8002654:	89f8      	ldrh	r0, [r7, #14]
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	8c3b      	ldrh	r3, [r7, #32]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4623      	mov	r3, r4
 8002660:	f7ff ff48 	bl	80024f4 <ST7735_DrawChar>
    x += font->width;
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	4413      	add	r3, r2
 800266e:	81fb      	strh	r3, [r7, #14]
    str++;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3301      	adds	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1d2      	bne.n	8002624 <ST7735_DrawString+0x18>
  }
}
 800267e:	e000      	b.n	8002682 <ST7735_DrawString+0x76>
      break;
 8002680:	bf00      	nop
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}

0800268a <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af02      	add	r7, sp, #8
 8002690:	4603      	mov	r3, r0
 8002692:	80fb      	strh	r3, [r7, #6]
  ST7735_DrawRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2350      	movs	r3, #80	@ 0x50
 800269a:	22a0      	movs	r2, #160	@ 0xa0
 800269c:	2100      	movs	r1, #0
 800269e:	2000      	movs	r0, #0
 80026a0:	f7ff fecc 	bl	800243c <ST7735_DrawRectangle>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <ST7735_DrawFloat>:
  ST7735_WriteCommand(ST7735_RAMWR);

  ST7735_WriteData((uint8_t *)image, sizeof(uint16_t) * width * height);
}
void ST7735_DrawFloat(uint16_t x, uint16_t y, float number, uint16_t color, uint16_t bgColor, const FontDef *font, uint8_t decimalPlaces)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b093      	sub	sp, #76	@ 0x4c
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	4604      	mov	r4, r0
 80026b4:	4608      	mov	r0, r1
 80026b6:	ed87 0a02 	vstr	s0, [r7, #8]
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	81fb      	strh	r3, [r7, #14]
 80026c2:	4603      	mov	r3, r0
 80026c4:	81bb      	strh	r3, [r7, #12]
 80026c6:	460b      	mov	r3, r1
 80026c8:	80fb      	strh	r3, [r7, #6]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80bb      	strh	r3, [r7, #4]
    char buffer[32];
    char format[16];
    snprintf(format, sizeof(format), "%%.%df", decimalPlaces);
 80026ce:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80026d2:	f107 0010 	add.w	r0, r7, #16
 80026d6:	4a11      	ldr	r2, [pc, #68]	@ (800271c <ST7735_DrawFloat+0x70>)
 80026d8:	2110      	movs	r1, #16
 80026da:	f005 fda3 	bl	8008224 <sniprintf>
    snprintf(buffer, sizeof(buffer), format, number);
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	f7fd ff32 	bl	8000548 <__aeabi_f2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	f107 0110 	add.w	r1, r7, #16
 80026ec:	f107 0020 	add.w	r0, r7, #32
 80026f0:	e9cd 2300 	strd	r2, r3, [sp]
 80026f4:	460a      	mov	r2, r1
 80026f6:	2120      	movs	r1, #32
 80026f8:	f005 fd94 	bl	8008224 <sniprintf>
    ST7735_DrawString(x, y, buffer, color, bgColor, font);
 80026fc:	88fc      	ldrh	r4, [r7, #6]
 80026fe:	f107 0220 	add.w	r2, r7, #32
 8002702:	89b9      	ldrh	r1, [r7, #12]
 8002704:	89f8      	ldrh	r0, [r7, #14]
 8002706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	88bb      	ldrh	r3, [r7, #4]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	4623      	mov	r3, r4
 8002710:	f7ff ff7c 	bl	800260c <ST7735_DrawString>
}
 8002714:	bf00      	nop
 8002716:	3744      	adds	r7, #68	@ 0x44
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	0800a50c 	.word	0x0800a50c

08002720 <ST7735_DrawInt>:
void ST7735_DrawInt(uint16_t x, uint16_t y, int number, uint16_t color, uint16_t bgColor, const FontDef *font)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b08f      	sub	sp, #60	@ 0x3c
 8002724:	af02      	add	r7, sp, #8
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	81fb      	strh	r3, [r7, #14]
 800272e:	460b      	mov	r3, r1
 8002730:	81bb      	strh	r3, [r7, #12]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
    char buffer[32];
    snprintf(buffer, sizeof(buffer), "%d", number);  // 使用 "%d" 格式化整数
 8002736:	f107 0010 	add.w	r0, r7, #16
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <ST7735_DrawInt+0x48>)
 800273e:	2120      	movs	r1, #32
 8002740:	f005 fd70 	bl	8008224 <sniprintf>
    ST7735_DrawString(x, y, buffer, color, bgColor, font);
 8002744:	88fc      	ldrh	r4, [r7, #6]
 8002746:	f107 0210 	add.w	r2, r7, #16
 800274a:	89b9      	ldrh	r1, [r7, #12]
 800274c:	89f8      	ldrh	r0, [r7, #14]
 800274e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4623      	mov	r3, r4
 800275a:	f7ff ff57 	bl	800260c <ST7735_DrawString>
}
 800275e:	bf00      	nop
 8002760:	3734      	adds	r7, #52	@ 0x34
 8002762:	46bd      	mov	sp, r7
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	bf00      	nop
 8002768:	0800a514 	.word	0x0800a514

0800276c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	4b10      	ldr	r3, [pc, #64]	@ (80027b8 <HAL_MspInit+0x4c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	4a0f      	ldr	r2, [pc, #60]	@ (80027b8 <HAL_MspInit+0x4c>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002780:	6453      	str	r3, [r2, #68]	@ 0x44
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <HAL_MspInit+0x4c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_MspInit+0x4c>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	4a08      	ldr	r2, [pc, #32]	@ (80027b8 <HAL_MspInit+0x4c>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	@ 0x40
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_MspInit+0x4c>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800

080027bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <NMI_Handler+0x4>

080027c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <HardFault_Handler+0x4>

080027cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <MemManage_Handler+0x4>

080027d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <BusFault_Handler+0x4>

080027dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <UsageFault_Handler+0x4>

080027e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002812:	f000 fdbf 	bl	8003394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}

0800281a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY3_Pin);
 800281e:	2001      	movs	r0, #1
 8002820:	f001 fcc6 	bl	80041b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY2_Pin);
 800282c:	2002      	movs	r0, #2
 800282e:	f001 fcbf 	bl	80041b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}

08002836 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 800283a:	2004      	movs	r0, #4
 800283c:	f001 fcb8 	bl	80041b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8002848:	2008      	movs	r0, #8
 800284a:	f001 fcb1 	bl	80041b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <DMA1_Stream5_IRQHandler+0x10>)
 800285a:	f001 f889 	bl	8003970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2000072c 	.word	0x2000072c

08002868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <TIM2_IRQHandler+0x10>)
 800286e:	f002 fdf9 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200004d4 	.word	0x200004d4

0800287c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002880:	4802      	ldr	r0, [pc, #8]	@ (800288c <TIM3_IRQHandler+0x10>)
 8002882:	f002 fdef 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000051c 	.word	0x2000051c

08002890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002894:	4802      	ldr	r0, [pc, #8]	@ (80028a0 <USART1_IRQHandler+0x10>)
 8002896:	f003 fe3d 	bl	8006514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000063c 	.word	0x2000063c

080028a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028a8:	4802      	ldr	r0, [pc, #8]	@ (80028b4 <USART2_IRQHandler+0x10>)
 80028aa:	f003 fe33 	bl	8006514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000684 	.word	0x20000684

080028b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80028bc:	4802      	ldr	r0, [pc, #8]	@ (80028c8 <TIM5_IRQHandler+0x10>)
 80028be:	f002 fdd1 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000564 	.word	0x20000564

080028cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028d0:	4802      	ldr	r0, [pc, #8]	@ (80028dc <TIM6_DAC_IRQHandler+0x10>)
 80028d2:	f002 fdc7 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200005ac 	.word	0x200005ac

080028e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028e4:	4802      	ldr	r0, [pc, #8]	@ (80028f0 <DMA2_Stream2_IRQHandler+0x10>)
 80028e6:	f001 f843 	bl	8003970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200006cc 	.word	0x200006cc

080028f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return 1;
 80028f8:	2301      	movs	r3, #1
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_kill>:

int _kill(int pid, int sig)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800290e:	f005 fd5f 	bl	80083d0 <__errno>
 8002912:	4603      	mov	r3, r0
 8002914:	2216      	movs	r2, #22
 8002916:	601a      	str	r2, [r3, #0]
  return -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_exit>:

void _exit (int status)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800292c:	f04f 31ff 	mov.w	r1, #4294967295
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ffe7 	bl	8002904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <_exit+0x12>

0800293a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e00a      	b.n	8002962 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800294c:	f3af 8000 	nop.w
 8002950:	4601      	mov	r1, r0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	60ba      	str	r2, [r7, #8]
 8002958:	b2ca      	uxtb	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	dbf0      	blt.n	800294c <_read+0x12>
  }

  return len;
 800296a:	687b      	ldr	r3, [r7, #4]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	e009      	b.n	800299a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	60ba      	str	r2, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	dbf1      	blt.n	8002986 <_write+0x12>
  }
  return len;
 80029a2:	687b      	ldr	r3, [r7, #4]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_close>:

int _close(int file)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029d4:	605a      	str	r2, [r3, #4]
  return 0;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_isatty>:

int _isatty(int file)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029ec:	2301      	movs	r3, #1
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a1c:	4a14      	ldr	r2, [pc, #80]	@ (8002a70 <_sbrk+0x5c>)
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <_sbrk+0x60>)
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a28:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <_sbrk+0x64>)
 8002a32:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <_sbrk+0x68>)
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <_sbrk+0x64>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d207      	bcs.n	8002a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a44:	f005 fcc4 	bl	80083d0 <__errno>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e009      	b.n	8002a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a54:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <_sbrk+0x64>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	4a05      	ldr	r2, [pc, #20]	@ (8002a78 <_sbrk+0x64>)
 8002a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20020000 	.word	0x20020000
 8002a74:	00000400 	.word	0x00000400
 8002a78:	200004d0 	.word	0x200004d0
 8002a7c:	200008e0 	.word	0x200008e0

08002a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <SystemInit+0x20>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <SystemInit+0x20>)
 8002a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ac2:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002ac4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ac8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002aca:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002aea:	481a      	ldr	r0, [pc, #104]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002aec:	f002 fa7a 	bl	8004fe4 <HAL_TIM_Base_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002af6:	f7ff f901 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002afa:	2307      	movs	r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002afe:	2360      	movs	r3, #96	@ 0x60
 8002b00:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4810      	ldr	r0, [pc, #64]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002b12:	f002 ff20 	bl	8005956 <HAL_TIM_SlaveConfigSynchro>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002b1c:	f7ff f8ee 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002b2e:	f003 fb29 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002b38:	f7ff f8e0 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2); // 启动TIM2
 8002b3c:	4805      	ldr	r0, [pc, #20]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002b3e:	f002 faa1 	bl	8005084 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0); // 清零计数器
 8002b42:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <MX_TIM2_Init+0xb0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END TIM2_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200004d4 	.word	0x200004d4

08002b58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b76:	4b23      	ldr	r3, [pc, #140]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002b78:	4a23      	ldr	r2, [pc, #140]	@ (8002c08 <MX_TIM3_Init+0xb0>)
 8002b7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b7c:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b82:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b9c:	4819      	ldr	r0, [pc, #100]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002b9e:	f002 fa21 	bl	8004fe4 <HAL_TIM_Base_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ba8:	f7ff f8a8 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002bac:	2307      	movs	r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002bb0:	2360      	movs	r3, #96	@ 0x60
 8002bb2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4810      	ldr	r0, [pc, #64]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002bc4:	f002 fec7 	bl	8005956 <HAL_TIM_SlaveConfigSynchro>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002bce:	f7ff f895 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4809      	ldr	r0, [pc, #36]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002be0:	f003 fad0 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002bea:	f7ff f887 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3); // 启动TIM3
 8002bee:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002bf0:	f002 fa48 	bl	8005084 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim3, 0); // 清零计数器
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <MX_TIM3_Init+0xac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END TIM3_Init 2 */

}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	2000051c 	.word	0x2000051c
 8002c08:	40000400 	.word	0x40000400

08002c0c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c20:	463b      	mov	r3, r7
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca8 <MX_TIM5_Init+0x9c>)
 8002c2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16800-1;
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c30:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002c34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c3e:	2263      	movs	r2, #99	@ 0x63
 8002c40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c42:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c48:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c4e:	4815      	ldr	r0, [pc, #84]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c50:	f002 f9c8 	bl	8004fe4 <HAL_TIM_Base_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c5a:	f7ff f84f 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480e      	ldr	r0, [pc, #56]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c6c:	f002 fdac 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c76:	f7ff f841 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c82:	463b      	mov	r3, r7
 8002c84:	4619      	mov	r1, r3
 8002c86:	4807      	ldr	r0, [pc, #28]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c88:	f003 fa7c 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c92:	f7ff f833 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
	HAL_TIM_Base_Start_IT(&htim5);
 8002c96:	4803      	ldr	r0, [pc, #12]	@ (8002ca4 <MX_TIM5_Init+0x98>)
 8002c98:	f002 fa5c 	bl	8005154 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM5_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000564 	.word	0x20000564
 8002ca8:	40000c00 	.word	0x40000c00

08002cac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002cba:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <MX_TIM6_Init+0x6c>)
 8002cbc:	4a17      	ldr	r2, [pc, #92]	@ (8002d1c <MX_TIM6_Init+0x70>)
 8002cbe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 8002cc0:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <MX_TIM6_Init+0x6c>)
 8002cc2:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002cc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc8:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <MX_TIM6_Init+0x6c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 8002cce:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <MX_TIM6_Init+0x6c>)
 8002cd0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002cd4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd6:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <MX_TIM6_Init+0x6c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cdc:	480e      	ldr	r0, [pc, #56]	@ (8002d18 <MX_TIM6_Init+0x6c>)
 8002cde:	f002 f981 	bl	8004fe4 <HAL_TIM_Base_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002ce8:	f7ff f808 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4807      	ldr	r0, [pc, #28]	@ (8002d18 <MX_TIM6_Init+0x6c>)
 8002cfa:	f003 fa43 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002d04:	f7fe fffa 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8002d08:	4803      	ldr	r0, [pc, #12]	@ (8002d18 <MX_TIM6_Init+0x6c>)
 8002d0a:	f002 fa23 	bl	8005154 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200005ac 	.word	0x200005ac
 8002d1c:	40001000 	.word	0x40001000

08002d20 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
 8002d34:	615a      	str	r2, [r3, #20]
 8002d36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d3a:	4a24      	ldr	r2, [pc, #144]	@ (8002dcc <MX_TIM9_Init+0xac>)
 8002d3c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8002d3e:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d40:	22a7      	movs	r2, #167	@ 0xa7
 8002d42:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d44:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d50:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002d5e:	481a      	ldr	r0, [pc, #104]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d60:	f002 fa68 	bl	8005234 <HAL_TIM_PWM_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002d6a:	f7fe ffc7 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d6e:	2360      	movs	r3, #96	@ 0x60
 8002d70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	2200      	movs	r2, #0
 8002d82:	4619      	mov	r1, r3
 8002d84:	4810      	ldr	r0, [pc, #64]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d86:	f002 fc5d 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002d90:	f7fe ffb4 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	2204      	movs	r2, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	480b      	ldr	r0, [pc, #44]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002d9c:	f002 fc52 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002da6:	f7fe ffa9 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002daa:	2100      	movs	r1, #0
 8002dac:	4806      	ldr	r0, [pc, #24]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002dae:	f002 fa91 	bl	80052d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8002db2:	2104      	movs	r1, #4
 8002db4:	4804      	ldr	r0, [pc, #16]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002db6:	f002 fa8d 	bl	80052d4 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002dba:	4803      	ldr	r0, [pc, #12]	@ (8002dc8 <MX_TIM9_Init+0xa8>)
 8002dbc:	f000 f8f0 	bl	8002fa0 <HAL_TIM_MspPostInit>

}
 8002dc0:	bf00      	nop
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200005f4 	.word	0x200005f4
 8002dcc:	40014000 	.word	0x40014000

08002dd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08e      	sub	sp, #56	@ 0x38
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df0:	d134      	bne.n	8002e5c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	4b54      	ldr	r3, [pc, #336]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a53      	ldr	r2, [pc, #332]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b51      	ldr	r3, [pc, #324]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	4b4d      	ldr	r3, [pc, #308]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a4c      	ldr	r2, [pc, #304]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e42:	4619      	mov	r1, r3
 8002e44:	4841      	ldr	r0, [pc, #260]	@ (8002f4c <HAL_TIM_Base_MspInit+0x17c>)
 8002e46:	f000 fffd 	bl	8003e44 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	201c      	movs	r0, #28
 8002e50:	f000 fbbf 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e54:	201c      	movs	r0, #28
 8002e56:	f000 fbd8 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002e5a:	e070      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a3b      	ldr	r2, [pc, #236]	@ (8002f50 <HAL_TIM_Base_MspInit+0x180>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d134      	bne.n	8002ed0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	4b37      	ldr	r3, [pc, #220]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	4a36      	ldr	r2, [pc, #216]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e76:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	4b30      	ldr	r3, [pc, #192]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e92:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4824      	ldr	r0, [pc, #144]	@ (8002f4c <HAL_TIM_Base_MspInit+0x17c>)
 8002eba:	f000 ffc3 	bl	8003e44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	201d      	movs	r0, #29
 8002ec4:	f000 fb85 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ec8:	201d      	movs	r0, #29
 8002eca:	f000 fb9e 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 8002ece:	e036      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f54 <HAL_TIM_Base_MspInit+0x184>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d116      	bne.n	8002f08 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eea:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2032      	movs	r0, #50	@ 0x32
 8002efc:	f000 fb69 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f00:	2032      	movs	r0, #50	@ 0x32
 8002f02:	f000 fb82 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 8002f06:	e01a      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <HAL_TIM_Base_MspInit+0x188>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d115      	bne.n	8002f3e <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002f1c:	f043 0310 	orr.w	r3, r3, #16
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <HAL_TIM_Base_MspInit+0x178>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	2036      	movs	r0, #54	@ 0x36
 8002f34:	f000 fb4d 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f38:	2036      	movs	r0, #54	@ 0x36
 8002f3a:	f000 fb66 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 8002f3e:	bf00      	nop
 8002f40:	3738      	adds	r7, #56	@ 0x38
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40001000 	.word	0x40001000

08002f5c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0b      	ldr	r2, [pc, #44]	@ (8002f98 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b0a      	ldr	r3, [pc, #40]	@ (8002f9c <HAL_TIM_PWM_MspInit+0x40>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	4a09      	ldr	r2, [pc, #36]	@ (8002f9c <HAL_TIM_PWM_MspInit+0x40>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f7e:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <HAL_TIM_PWM_MspInit+0x40>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <HAL_TIM_MspPostInit+0x68>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d11d      	bne.n	8002ffe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_TIM_MspPostInit+0x6c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	4a10      	ldr	r2, [pc, #64]	@ (800300c <HAL_TIM_MspPostInit+0x6c>)
 8002fcc:	f043 0310 	orr.w	r3, r3, #16
 8002fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <HAL_TIM_MspPostInit+0x6c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002fde:	2360      	movs	r3, #96	@ 0x60
 8002fe0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ff2:	f107 030c 	add.w	r3, r7, #12
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4805      	ldr	r0, [pc, #20]	@ (8003010 <HAL_TIM_MspPostInit+0x70>)
 8002ffa:	f000 ff23 	bl	8003e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002ffe:	bf00      	nop
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40014000 	.word	0x40014000
 800300c:	40023800 	.word	0x40023800
 8003010:	40021000 	.word	0x40021000

08003014 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 800301a:	4a12      	ldr	r2, [pc, #72]	@ (8003064 <MX_USART1_UART_Init+0x50>)
 800301c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800301e:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 8003020:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003026:	4b0e      	ldr	r3, [pc, #56]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003032:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 800303a:	220c      	movs	r2, #12
 800303c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800304a:	4805      	ldr	r0, [pc, #20]	@ (8003060 <MX_USART1_UART_Init+0x4c>)
 800304c:	f003 f92a 	bl	80062a4 <HAL_UART_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003056:	f7fe fe51 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000063c 	.word	0x2000063c
 8003064:	40011000 	.word	0x40011000

08003068 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800306c:	4b11      	ldr	r3, [pc, #68]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 800306e:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <MX_USART2_UART_Init+0x50>)
 8003070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800307a:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003086:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 800308e:	220c      	movs	r2, #12
 8003090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003092:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800309e:	4805      	ldr	r0, [pc, #20]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 80030a0:	f003 f900 	bl	80062a4 <HAL_UART_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030aa:	f7fe fe27 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000684 	.word	0x20000684
 80030b8:	40004400 	.word	0x40004400

080030bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	@ 0x30
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 031c 	add.w	r3, r7, #28
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a68      	ldr	r2, [pc, #416]	@ (800327c <HAL_UART_MspInit+0x1c0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d163      	bne.n	80031a6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	4b67      	ldr	r3, [pc, #412]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	4a66      	ldr	r2, [pc, #408]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80030e8:	f043 0310 	orr.w	r3, r3, #16
 80030ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ee:	4b64      	ldr	r3, [pc, #400]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	4b60      	ldr	r3, [pc, #384]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	4a5f      	ldr	r2, [pc, #380]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6313      	str	r3, [r2, #48]	@ 0x30
 800310a:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003116:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800311a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003128:	2307      	movs	r3, #7
 800312a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 031c 	add.w	r3, r7, #28
 8003130:	4619      	mov	r1, r3
 8003132:	4854      	ldr	r0, [pc, #336]	@ (8003284 <HAL_UART_MspInit+0x1c8>)
 8003134:	f000 fe86 	bl	8003e44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003138:	4b53      	ldr	r3, [pc, #332]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 800313a:	4a54      	ldr	r2, [pc, #336]	@ (800328c <HAL_UART_MspInit+0x1d0>)
 800313c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800313e:	4b52      	ldr	r3, [pc, #328]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 8003140:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003144:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003146:	4b50      	ldr	r3, [pc, #320]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800314c:	4b4e      	ldr	r3, [pc, #312]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003152:	4b4d      	ldr	r3, [pc, #308]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 8003154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003158:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800315a:	4b4b      	ldr	r3, [pc, #300]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 800315c:	2200      	movs	r2, #0
 800315e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003160:	4b49      	ldr	r3, [pc, #292]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 8003162:	2200      	movs	r2, #0
 8003164:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003166:	4b48      	ldr	r3, [pc, #288]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 8003168:	2200      	movs	r2, #0
 800316a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800316c:	4b46      	ldr	r3, [pc, #280]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 800316e:	2200      	movs	r2, #0
 8003170:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003172:	4b45      	ldr	r3, [pc, #276]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 8003174:	2200      	movs	r2, #0
 8003176:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003178:	4843      	ldr	r0, [pc, #268]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 800317a:	f000 fa61 	bl	8003640 <HAL_DMA_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003184:	f7fe fdba 	bl	8001cfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a3f      	ldr	r2, [pc, #252]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 800318c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800318e:	4a3e      	ldr	r2, [pc, #248]	@ (8003288 <HAL_UART_MspInit+0x1cc>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003194:	2200      	movs	r2, #0
 8003196:	2102      	movs	r1, #2
 8003198:	2025      	movs	r0, #37	@ 0x25
 800319a:	f000 fa1a 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800319e:	2025      	movs	r0, #37	@ 0x25
 80031a0:	f000 fa33 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031a4:	e066      	b.n	8003274 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a39      	ldr	r2, [pc, #228]	@ (8003290 <HAL_UART_MspInit+0x1d4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d161      	bne.n	8003274 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	4b32      	ldr	r3, [pc, #200]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	4a31      	ldr	r2, [pc, #196]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031be:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6313      	str	r3, [r2, #48]	@ 0x30
 80031dc:	4b28      	ldr	r3, [pc, #160]	@ (8003280 <HAL_UART_MspInit+0x1c4>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031e8:	230c      	movs	r3, #12
 80031ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	2303      	movs	r3, #3
 80031f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031f8:	2307      	movs	r3, #7
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	4619      	mov	r1, r3
 8003202:	4820      	ldr	r0, [pc, #128]	@ (8003284 <HAL_UART_MspInit+0x1c8>)
 8003204:	f000 fe1e 	bl	8003e44 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003208:	4b22      	ldr	r3, [pc, #136]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 800320a:	4a23      	ldr	r2, [pc, #140]	@ (8003298 <HAL_UART_MspInit+0x1dc>)
 800320c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800320e:	4b21      	ldr	r3, [pc, #132]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 8003210:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003214:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003216:	4b1f      	ldr	r3, [pc, #124]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800321c:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003222:	4b1c      	ldr	r3, [pc, #112]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 8003224:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003228:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800322a:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 800322c:	2200      	movs	r2, #0
 800322e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003230:	4b18      	ldr	r3, [pc, #96]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 8003232:	2200      	movs	r2, #0
 8003234:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003236:	4b17      	ldr	r3, [pc, #92]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 8003238:	2200      	movs	r2, #0
 800323a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800323c:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 800323e:	2200      	movs	r2, #0
 8003240:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003242:	4b14      	ldr	r3, [pc, #80]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 8003244:	2200      	movs	r2, #0
 8003246:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003248:	4812      	ldr	r0, [pc, #72]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 800324a:	f000 f9f9 	bl	8003640 <HAL_DMA_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003254:	f7fe fd52 	bl	8001cfc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0e      	ldr	r2, [pc, #56]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 800325c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800325e:	4a0d      	ldr	r2, [pc, #52]	@ (8003294 <HAL_UART_MspInit+0x1d8>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2102      	movs	r1, #2
 8003268:	2026      	movs	r0, #38	@ 0x26
 800326a:	f000 f9b2 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800326e:	2026      	movs	r0, #38	@ 0x26
 8003270:	f000 f9cb 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 8003274:	bf00      	nop
 8003276:	3730      	adds	r7, #48	@ 0x30
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40011000 	.word	0x40011000
 8003280:	40023800 	.word	0x40023800
 8003284:	40020000 	.word	0x40020000
 8003288:	200006cc 	.word	0x200006cc
 800328c:	40026440 	.word	0x40026440
 8003290:	40004400 	.word	0x40004400
 8003294:	2000072c 	.word	0x2000072c
 8003298:	40026088 	.word	0x40026088

0800329c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800329c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032a0:	f7ff fbee 	bl	8002a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032a4:	480c      	ldr	r0, [pc, #48]	@ (80032d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032a6:	490d      	ldr	r1, [pc, #52]	@ (80032dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032a8:	4a0d      	ldr	r2, [pc, #52]	@ (80032e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032ac:	e002      	b.n	80032b4 <LoopCopyDataInit>

080032ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032b2:	3304      	adds	r3, #4

080032b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b8:	d3f9      	bcc.n	80032ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ba:	4a0a      	ldr	r2, [pc, #40]	@ (80032e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032bc:	4c0a      	ldr	r4, [pc, #40]	@ (80032e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c0:	e001      	b.n	80032c6 <LoopFillZerobss>

080032c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032c4:	3204      	adds	r2, #4

080032c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c8:	d3fb      	bcc.n	80032c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ca:	f005 f887 	bl	80083dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ce:	f7fe f871 	bl	80013b4 <main>
  bx  lr    
 80032d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032dc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80032e0:	0800d268 	.word	0x0800d268
  ldr r2, =_sbss
 80032e4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80032e8:	200008dc 	.word	0x200008dc

080032ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032ec:	e7fe      	b.n	80032ec <ADC_IRQHandler>
	...

080032f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <HAL_Init+0x40>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003330 <HAL_Init+0x40>)
 80032fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <HAL_Init+0x40>)
 8003306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800330a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800330c:	4b08      	ldr	r3, [pc, #32]	@ (8003330 <HAL_Init+0x40>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a07      	ldr	r2, [pc, #28]	@ (8003330 <HAL_Init+0x40>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003318:	2003      	movs	r0, #3
 800331a:	f000 f94f 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800331e:	2000      	movs	r0, #0
 8003320:	f000 f808 	bl	8003334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003324:	f7ff fa22 	bl	800276c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00

08003334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800333c:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <HAL_InitTick+0x54>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <HAL_InitTick+0x58>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800334a:	fbb3 f3f1 	udiv	r3, r3, r1
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f967 	bl	8003626 <HAL_SYSTICK_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00e      	b.n	8003380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d80a      	bhi.n	800337e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003368:	2200      	movs	r2, #0
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f000 f92f 	bl	80035d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003374:	4a06      	ldr	r2, [pc, #24]	@ (8003390 <HAL_InitTick+0x5c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000018 	.word	0x20000018
 800338c:	20000020 	.word	0x20000020
 8003390:	2000001c 	.word	0x2000001c

08003394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003398:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_IncTick+0x20>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_IncTick+0x24>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_IncTick+0x24>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000020 	.word	0x20000020
 80033b8:	2000078c 	.word	0x2000078c

080033bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return uwTick;
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <HAL_GetTick+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	2000078c 	.word	0x2000078c

080033d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7ff ffee 	bl	80033bc <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d005      	beq.n	80033fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_Delay+0x44>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fa:	bf00      	nop
 80033fc:	f7ff ffde 	bl	80033bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d8f7      	bhi.n	80033fc <HAL_Delay+0x28>
  {
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000020 	.word	0x20000020

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	@ (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	@ (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	@ (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	@ 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	@ 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003588:	d301      	bcc.n	800358e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <SysTick_Config+0x40>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003596:	210f      	movs	r1, #15
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f7ff ff8e 	bl	80034bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <SysTick_Config+0x40>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a6:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <SysTick_Config+0x40>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000e010 	.word	0xe000e010

080035bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff29 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff3e 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff8e 	bl	8003510 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5d 	bl	80034bc <__NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff31 	bl	8003480 <__NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa2 	bl	8003578 <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff feb6 	bl	80033bc <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e099      	b.n	8003790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367c:	e00f      	b.n	800369e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367e:	f7ff fe9d 	bl	80033bc <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b05      	cmp	r3, #5
 800368a:	d908      	bls.n	800369e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e078      	b.n	8003790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e8      	bne.n	800367e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4b38      	ldr	r3, [pc, #224]	@ (8003798 <HAL_DMA_Init+0x158>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	4313      	orrs	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	2b04      	cmp	r3, #4
 8003730:	d117      	bne.n	8003762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fb01 	bl	8003d4c <DMA_CheckFifoParam>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2240      	movs	r2, #64	@ 0x40
 8003754:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800375e:	2301      	movs	r3, #1
 8003760:	e016      	b.n	8003790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fab8 	bl	8003ce0 <DMA_CalcBaseAndBitshift>
 8003770:	4603      	mov	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	223f      	movs	r2, #63	@ 0x3f
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	f010803f 	.word	0xf010803f

0800379c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_DMA_Start_IT+0x26>
 80037be:	2302      	movs	r3, #2
 80037c0:	e040      	b.n	8003844 <HAL_DMA_Start_IT+0xa8>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d12f      	bne.n	8003836 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fa4a 	bl	8003c84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	223f      	movs	r2, #63	@ 0x3f
 80037f6:	409a      	lsls	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0216 	orr.w	r2, r2, #22
 800380a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0208 	orr.w	r2, r2, #8
 8003822:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e005      	b.n	8003842 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800383e:	2302      	movs	r3, #2
 8003840:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003858:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800385a:	f7ff fdaf 	bl	80033bc <HAL_GetTick>
 800385e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d008      	beq.n	800387e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2280      	movs	r2, #128	@ 0x80
 8003870:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e052      	b.n	8003924 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0216 	bic.w	r2, r2, #22
 800388c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800389c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d103      	bne.n	80038ae <HAL_DMA_Abort+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0208 	bic.w	r2, r2, #8
 80038bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ce:	e013      	b.n	80038f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038d0:	f7ff fd74 	bl	80033bc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d90c      	bls.n	80038f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2203      	movs	r2, #3
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e015      	b.n	8003924 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e4      	bne.n	80038d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390a:	223f      	movs	r2, #63	@ 0x3f
 800390c:	409a      	lsls	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d004      	beq.n	800394a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2280      	movs	r2, #128	@ 0x80
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e00c      	b.n	8003964 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2205      	movs	r2, #5
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800397c:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb8 <HAL_DMA_IRQHandler+0x248>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a8e      	ldr	r2, [pc, #568]	@ (8003bbc <HAL_DMA_IRQHandler+0x24c>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399a:	2208      	movs	r2, #8
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0204 	bic.w	r2, r2, #4
 80039c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c8:	2208      	movs	r2, #8
 80039ca:	409a      	lsls	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	2201      	movs	r2, #1
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d012      	beq.n	8003a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	2201      	movs	r2, #1
 8003a00:	409a      	lsls	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a16:	2204      	movs	r2, #4
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	2204      	movs	r2, #4
 8003a36:	409a      	lsls	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d043      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d03c      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d024      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
 8003a9e:	e01f      	b.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e016      	b.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0208 	bic.w	r2, r2, #8
 8003ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 808f 	beq.w	8003c10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8087 	beq.w	8003c10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2220      	movs	r2, #32
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d136      	bne.n	8003b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0216 	bic.w	r2, r2, #22
 8003b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x1da>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0208 	bic.w	r2, r2, #8
 8003b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	223f      	movs	r2, #63	@ 0x3f
 8003b60:	409a      	lsls	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d07e      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
        }
        return;
 8003b86:	e079      	b.n	8003c7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d031      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
 8003bb4:	e02c      	b.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
 8003bb6:	bf00      	nop
 8003bb8:	20000018 	.word	0x20000018
 8003bbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
 8003bd0:	e01e      	b.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10f      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0210 	bic.w	r2, r2, #16
 8003bee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d032      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d022      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2205      	movs	r2, #5
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d307      	bcc.n	8003c58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f2      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x2cc>
 8003c56:	e000      	b.n	8003c5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
 8003c7a:	e000      	b.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c7c:	bf00      	nop
    }
  }
}
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	d108      	bne.n	8003cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cc2:	e007      	b.n	8003cd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3b10      	subs	r3, #16
 8003cf0:	4a14      	ldr	r2, [pc, #80]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x64>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cfa:	4a13      	ldr	r2, [pc, #76]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x68>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d909      	bls.n	8003d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d20:	e007      	b.n	8003d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	aaaaaaab 	.word	0xaaaaaaab
 8003d48:	0800cedc 	.word	0x0800cedc

08003d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11f      	bne.n	8003da6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d856      	bhi.n	8003e1a <DMA_CheckFifoParam+0xce>
 8003d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <DMA_CheckFifoParam+0x28>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d97 	.word	0x08003d97
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	08003e1b 	.word	0x08003e1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d046      	beq.n	8003e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e043      	b.n	8003e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d9e:	d140      	bne.n	8003e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e03d      	b.n	8003e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dae:	d121      	bne.n	8003df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d837      	bhi.n	8003e26 <DMA_CheckFifoParam+0xda>
 8003db6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <DMA_CheckFifoParam+0x70>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dd3 	.word	0x08003dd3
 8003dc4:	08003dcd 	.word	0x08003dcd
 8003dc8:	08003de5 	.word	0x08003de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e030      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d025      	beq.n	8003e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e022      	b.n	8003e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dec:	d11f      	bne.n	8003e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003df2:	e01c      	b.n	8003e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d903      	bls.n	8003e02 <DMA_CheckFifoParam+0xb6>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d003      	beq.n	8003e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e00:	e018      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      break;
 8003e06:	e015      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e00b      	b.n	8003e32 <DMA_CheckFifoParam+0xe6>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e00a      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e008      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
    }
  } 
  
  return status; 
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	@ 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e16b      	b.n	8004138 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e60:	2201      	movs	r2, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f040 815a 	bne.w	8004132 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d005      	beq.n	8003e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d130      	bne.n	8003ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ecc:	2201      	movs	r2, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 0201 	and.w	r2, r3, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d017      	beq.n	8003f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	2203      	movs	r2, #3
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d123      	bne.n	8003f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	220f      	movs	r2, #15
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	08da      	lsrs	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3208      	adds	r2, #8
 8003f82:	69b9      	ldr	r1, [r7, #24]
 8003f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0203 	and.w	r2, r3, #3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80b4 	beq.w	8004132 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	4b60      	ldr	r3, [pc, #384]	@ (8004150 <HAL_GPIO_Init+0x30c>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	4a5f      	ldr	r2, [pc, #380]	@ (8004150 <HAL_GPIO_Init+0x30c>)
 8003fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fda:	4b5d      	ldr	r3, [pc, #372]	@ (8004150 <HAL_GPIO_Init+0x30c>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8004154 <HAL_GPIO_Init+0x310>)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a52      	ldr	r2, [pc, #328]	@ (8004158 <HAL_GPIO_Init+0x314>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02b      	beq.n	800406a <HAL_GPIO_Init+0x226>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a51      	ldr	r2, [pc, #324]	@ (800415c <HAL_GPIO_Init+0x318>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d025      	beq.n	8004066 <HAL_GPIO_Init+0x222>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a50      	ldr	r2, [pc, #320]	@ (8004160 <HAL_GPIO_Init+0x31c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01f      	beq.n	8004062 <HAL_GPIO_Init+0x21e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4f      	ldr	r2, [pc, #316]	@ (8004164 <HAL_GPIO_Init+0x320>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d019      	beq.n	800405e <HAL_GPIO_Init+0x21a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4e      	ldr	r2, [pc, #312]	@ (8004168 <HAL_GPIO_Init+0x324>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_GPIO_Init+0x216>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4d      	ldr	r2, [pc, #308]	@ (800416c <HAL_GPIO_Init+0x328>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00d      	beq.n	8004056 <HAL_GPIO_Init+0x212>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4c      	ldr	r2, [pc, #304]	@ (8004170 <HAL_GPIO_Init+0x32c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <HAL_GPIO_Init+0x20e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4b      	ldr	r2, [pc, #300]	@ (8004174 <HAL_GPIO_Init+0x330>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_GPIO_Init+0x20a>
 800404a:	2307      	movs	r3, #7
 800404c:	e00e      	b.n	800406c <HAL_GPIO_Init+0x228>
 800404e:	2308      	movs	r3, #8
 8004050:	e00c      	b.n	800406c <HAL_GPIO_Init+0x228>
 8004052:	2306      	movs	r3, #6
 8004054:	e00a      	b.n	800406c <HAL_GPIO_Init+0x228>
 8004056:	2305      	movs	r3, #5
 8004058:	e008      	b.n	800406c <HAL_GPIO_Init+0x228>
 800405a:	2304      	movs	r3, #4
 800405c:	e006      	b.n	800406c <HAL_GPIO_Init+0x228>
 800405e:	2303      	movs	r3, #3
 8004060:	e004      	b.n	800406c <HAL_GPIO_Init+0x228>
 8004062:	2302      	movs	r3, #2
 8004064:	e002      	b.n	800406c <HAL_GPIO_Init+0x228>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_GPIO_Init+0x228>
 800406a:	2300      	movs	r3, #0
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	f002 0203 	and.w	r2, r2, #3
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	4093      	lsls	r3, r2
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800407c:	4935      	ldr	r1, [pc, #212]	@ (8004154 <HAL_GPIO_Init+0x310>)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	3302      	adds	r3, #2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408a:	4b3b      	ldr	r3, [pc, #236]	@ (8004178 <HAL_GPIO_Init+0x334>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ae:	4a32      	ldr	r2, [pc, #200]	@ (8004178 <HAL_GPIO_Init+0x334>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b4:	4b30      	ldr	r3, [pc, #192]	@ (8004178 <HAL_GPIO_Init+0x334>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d8:	4a27      	ldr	r2, [pc, #156]	@ (8004178 <HAL_GPIO_Init+0x334>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040de:	4b26      	ldr	r3, [pc, #152]	@ (8004178 <HAL_GPIO_Init+0x334>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004102:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <HAL_GPIO_Init+0x334>)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004108:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <HAL_GPIO_Init+0x334>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800412c:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <HAL_GPIO_Init+0x334>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	f67f ae90 	bls.w	8003e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3724      	adds	r7, #36	@ 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40013800 	.word	0x40013800
 8004158:	40020000 	.word	0x40020000
 800415c:	40020400 	.word	0x40020400
 8004160:	40020800 	.word	0x40020800
 8004164:	40020c00 	.word	0x40020c00
 8004168:	40021000 	.word	0x40021000
 800416c:	40021400 	.word	0x40021400
 8004170:	40021800 	.word	0x40021800
 8004174:	40021c00 	.word	0x40021c00
 8004178:	40013c00 	.word	0x40013c00

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004198:	e003      	b.n	80041a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	041a      	lsls	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	619a      	str	r2, [r3, #24]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041ba:	4b08      	ldr	r3, [pc, #32]	@ (80041dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d006      	beq.n	80041d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041c6:	4a05      	ldr	r2, [pc, #20]	@ (80041dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fd60 	bl	8001c94 <HAL_GPIO_EXTI_Callback>
  }
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40013c00 	.word	0x40013c00

080041e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e267      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d075      	beq.n	80042ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041fe:	4b88      	ldr	r3, [pc, #544]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b04      	cmp	r3, #4
 8004208:	d00c      	beq.n	8004224 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420a:	4b85      	ldr	r3, [pc, #532]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004212:	2b08      	cmp	r3, #8
 8004214:	d112      	bne.n	800423c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004216:	4b82      	ldr	r3, [pc, #520]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004222:	d10b      	bne.n	800423c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	4b7e      	ldr	r3, [pc, #504]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05b      	beq.n	80042e8 <HAL_RCC_OscConfig+0x108>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d157      	bne.n	80042e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e242      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004244:	d106      	bne.n	8004254 <HAL_RCC_OscConfig+0x74>
 8004246:	4b76      	ldr	r3, [pc, #472]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a75      	ldr	r2, [pc, #468]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e01d      	b.n	8004290 <HAL_RCC_OscConfig+0xb0>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x98>
 800425e:	4b70      	ldr	r3, [pc, #448]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6f      	ldr	r2, [pc, #444]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b6d      	ldr	r3, [pc, #436]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6c      	ldr	r2, [pc, #432]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0xb0>
 8004278:	4b69      	ldr	r3, [pc, #420]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a68      	ldr	r2, [pc, #416]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800427e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b66      	ldr	r3, [pc, #408]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a65      	ldr	r2, [pc, #404]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800428e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7ff f890 	bl	80033bc <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7ff f88c 	bl	80033bc <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	@ 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e207      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0xc0>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7ff f87c 	bl	80033bc <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7ff f878 	bl	80033bc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1f3      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042da:	4b51      	ldr	r3, [pc, #324]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0xe8>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d063      	beq.n	80043be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004302:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800430a:	2b08      	cmp	r3, #8
 800430c:	d11c      	bne.n	8004348 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430e:	4b44      	ldr	r3, [pc, #272]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d116      	bne.n	8004348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_RCC_OscConfig+0x152>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e1c7      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004332:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4937      	ldr	r1, [pc, #220]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	e03a      	b.n	80043be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004350:	4b34      	ldr	r3, [pc, #208]	@ (8004424 <HAL_RCC_OscConfig+0x244>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7ff f831 	bl	80033bc <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435e:	f7ff f82d 	bl	80033bc <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1a8      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004370:	4b2b      	ldr	r3, [pc, #172]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b28      	ldr	r3, [pc, #160]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4925      	ldr	r1, [pc, #148]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004392:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <HAL_RCC_OscConfig+0x244>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7ff f810 	bl	80033bc <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a0:	f7ff f80c 	bl	80033bc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e187      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d036      	beq.n	8004438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <HAL_RCC_OscConfig+0x248>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fe fff0 	bl	80033bc <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fe ffec 	bl	80033bc <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e167      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x200>
 80043fe:	e01b      	b.n	8004438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004400:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_OscConfig+0x248>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7fe ffd9 	bl	80033bc <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	e00e      	b.n	800442c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440e:	f7fe ffd5 	bl	80033bc <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d907      	bls.n	800442c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e150      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
 8004420:	40023800 	.word	0x40023800
 8004424:	42470000 	.word	0x42470000
 8004428:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	4b88      	ldr	r3, [pc, #544]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ea      	bne.n	800440e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8097 	beq.w	8004574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444a:	4b81      	ldr	r3, [pc, #516]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	4b7d      	ldr	r3, [pc, #500]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	4a7c      	ldr	r2, [pc, #496]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004464:	6413      	str	r3, [r2, #64]	@ 0x40
 8004466:	4b7a      	ldr	r3, [pc, #488]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b77      	ldr	r3, [pc, #476]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d118      	bne.n	80044b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4b74      	ldr	r3, [pc, #464]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a73      	ldr	r2, [pc, #460]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448e:	f7fe ff95 	bl	80033bc <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fe ff91 	bl	80033bc <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e10c      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x2ea>
 80044bc:	4b64      	ldr	r3, [pc, #400]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c0:	4a63      	ldr	r2, [pc, #396]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c8:	e01c      	b.n	8004504 <HAL_RCC_OscConfig+0x324>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x30c>
 80044d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044de:	4b5c      	ldr	r3, [pc, #368]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0x324>
 80044ec:	4b58      	ldr	r3, [pc, #352]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f0:	4a57      	ldr	r2, [pc, #348]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f8:	4b55      	ldr	r3, [pc, #340]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fc:	4a54      	ldr	r2, [pc, #336]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044fe:	f023 0304 	bic.w	r3, r3, #4
 8004502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fe ff56 	bl	80033bc <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004512:	e00a      	b.n	800452a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fe ff52 	bl	80033bc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0cb      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	4b49      	ldr	r3, [pc, #292]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ee      	beq.n	8004514 <HAL_RCC_OscConfig+0x334>
 8004536:	e014      	b.n	8004562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004538:	f7fe ff40 	bl	80033bc <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fe ff3c 	bl	80033bc <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0b5      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004556:	4b3e      	ldr	r3, [pc, #248]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ee      	bne.n	8004540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b39      	ldr	r3, [pc, #228]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	4a38      	ldr	r2, [pc, #224]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800456e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a1 	beq.w	80046c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457e:	4b34      	ldr	r3, [pc, #208]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b08      	cmp	r3, #8
 8004588:	d05c      	beq.n	8004644 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d141      	bne.n	8004616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe ff10 	bl	80033bc <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fe ff0c 	bl	80033bc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e087      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	3b01      	subs	r3, #1
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	491b      	ldr	r1, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fe fee5 	bl	80033bc <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fe fee1 	bl	80033bc <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e05c      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x416>
 8004614:	e054      	b.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004616:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe fece 	bl	80033bc <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004624:	f7fe feca 	bl	80033bc <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e045      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x444>
 8004642:	e03d      	b.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d107      	bne.n	800465c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e038      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
 8004650:	40023800 	.word	0x40023800
 8004654:	40007000 	.word	0x40007000
 8004658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800465c:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <HAL_RCC_OscConfig+0x4ec>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d028      	beq.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d121      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d11a      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800468c:	4013      	ands	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004694:	4293      	cmp	r3, r2
 8004696:	d111      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0cc      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b68      	ldr	r3, [pc, #416]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d90c      	bls.n	800470c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b65      	ldr	r3, [pc, #404]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b63      	ldr	r3, [pc, #396]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0b8      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d020      	beq.n	800475a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004724:	4b59      	ldr	r3, [pc, #356]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a58      	ldr	r2, [pc, #352]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800472e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800473c:	4b53      	ldr	r3, [pc, #332]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4a52      	ldr	r2, [pc, #328]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004748:	4b50      	ldr	r3, [pc, #320]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	494d      	ldr	r1, [pc, #308]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d044      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b47      	ldr	r3, [pc, #284]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d119      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d003      	beq.n	800478e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	2b03      	cmp	r3, #3
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	4b3f      	ldr	r3, [pc, #252]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e06f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479e:	4b3b      	ldr	r3, [pc, #236]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e067      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	4b37      	ldr	r3, [pc, #220]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4934      	ldr	r1, [pc, #208]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fe fdfc 	bl	80033bc <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fe fdf8 	bl	80033bc <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e04f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	4b2b      	ldr	r3, [pc, #172]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 020c 	and.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1eb      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f0:	4b25      	ldr	r3, [pc, #148]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d20c      	bcs.n	8004818 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b22      	ldr	r3, [pc, #136]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e032      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004824:	4b19      	ldr	r3, [pc, #100]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4916      	ldr	r1, [pc, #88]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	490e      	ldr	r1, [pc, #56]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004856:	f000 f821 	bl	800489c <HAL_RCC_GetSysClockFreq>
 800485a:	4602      	mov	r2, r0
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	490a      	ldr	r1, [pc, #40]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	5ccb      	ldrb	r3, [r1, r3]
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004872:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe fd5c 	bl	8003334 <HAL_InitTick>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023c00 	.word	0x40023c00
 800488c:	40023800 	.word	0x40023800
 8004890:	0800cec4 	.word	0x0800cec4
 8004894:	20000018 	.word	0x20000018
 8004898:	2000001c 	.word	0x2000001c

0800489c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800489c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a0:	b090      	sub	sp, #64	@ 0x40
 80048a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b4:	4b59      	ldr	r3, [pc, #356]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d00d      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x40>
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	f200 80a1 	bhi.w	8004a08 <HAL_RCC_GetSysClockFreq+0x16c>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x34>
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ce:	e09b      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d0:	4b53      	ldr	r3, [pc, #332]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x184>)
 80048d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048d4:	e09b      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048d6:	4b53      	ldr	r3, [pc, #332]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x188>)
 80048d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048da:	e098      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048dc:	4b4f      	ldr	r3, [pc, #316]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048e6:	4b4d      	ldr	r3, [pc, #308]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d028      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f2:	4b4a      	ldr	r3, [pc, #296]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	2200      	movs	r2, #0
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004904:	2100      	movs	r1, #0
 8004906:	4b47      	ldr	r3, [pc, #284]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004908:	fb03 f201 	mul.w	r2, r3, r1
 800490c:	2300      	movs	r3, #0
 800490e:	fb00 f303 	mul.w	r3, r0, r3
 8004912:	4413      	add	r3, r2
 8004914:	4a43      	ldr	r2, [pc, #268]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004916:	fba0 1202 	umull	r1, r2, r0, r2
 800491a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800491c:	460a      	mov	r2, r1
 800491e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004922:	4413      	add	r3, r2
 8004924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004928:	2200      	movs	r2, #0
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	61fa      	str	r2, [r7, #28]
 800492e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004936:	f7fc f937 	bl	8000ba8 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4613      	mov	r3, r2
 8004940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004942:	e053      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004944:	4b35      	ldr	r3, [pc, #212]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	099b      	lsrs	r3, r3, #6
 800494a:	2200      	movs	r2, #0
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	617a      	str	r2, [r7, #20]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004956:	f04f 0b00 	mov.w	fp, #0
 800495a:	4652      	mov	r2, sl
 800495c:	465b      	mov	r3, fp
 800495e:	f04f 0000 	mov.w	r0, #0
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	0159      	lsls	r1, r3, #5
 8004968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800496c:	0150      	lsls	r0, r2, #5
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	ebb2 080a 	subs.w	r8, r2, sl
 8004976:	eb63 090b 	sbc.w	r9, r3, fp
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004986:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800498a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800498e:	ebb2 0408 	subs.w	r4, r2, r8
 8004992:	eb63 0509 	sbc.w	r5, r3, r9
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	00eb      	lsls	r3, r5, #3
 80049a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a4:	00e2      	lsls	r2, r4, #3
 80049a6:	4614      	mov	r4, r2
 80049a8:	461d      	mov	r5, r3
 80049aa:	eb14 030a 	adds.w	r3, r4, sl
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	eb45 030b 	adc.w	r3, r5, fp
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049c2:	4629      	mov	r1, r5
 80049c4:	028b      	lsls	r3, r1, #10
 80049c6:	4621      	mov	r1, r4
 80049c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049cc:	4621      	mov	r1, r4
 80049ce:	028a      	lsls	r2, r1, #10
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d6:	2200      	movs	r2, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	60fa      	str	r2, [r7, #12]
 80049dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e0:	f7fc f8e2 	bl	8000ba8 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4613      	mov	r3, r2
 80049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	3301      	adds	r3, #1
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80049fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a06:	e002      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3740      	adds	r7, #64	@ 0x40
 8004a14:	46bd      	mov	sp, r7
 8004a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	00b71b00 	.word	0x00b71b00

08004a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	@ (8004a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20000018 	.word	0x20000018

08004a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a44:	f7ff fff0 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	0a9b      	lsrs	r3, r3, #10
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4903      	ldr	r1, [pc, #12]	@ (8004a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40023800 	.word	0x40023800
 8004a64:	0800ced4 	.word	0x0800ced4

08004a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a6c:	f7ff ffdc 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a70:	4602      	mov	r2, r0
 8004a72:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	0b5b      	lsrs	r3, r3, #13
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	4903      	ldr	r1, [pc, #12]	@ (8004a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a7e:	5ccb      	ldrb	r3, [r1, r3]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	0800ced4 	.word	0x0800ced4

08004a90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07b      	b.n	8004b9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ab2:	d009      	beq.n	8004ac8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	61da      	str	r2, [r3, #28]
 8004aba:	e005      	b.n	8004ac8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fd fa5e 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004afe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4c:	ea42 0103 	orr.w	r1, r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	f003 0104 	and.w	r1, r3, #4
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	f003 0210 	and.w	r2, r3, #16
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b088      	sub	sp, #32
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bb2:	f7fe fc03 	bl	80033bc <HAL_GetTick>
 8004bb6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d001      	beq.n	8004bcc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e12a      	b.n	8004e22 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SPI_Transmit+0x36>
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e122      	b.n	8004e22 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_SPI_Transmit+0x48>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e11b      	b.n	8004e22 <HAL_SPI_Transmit+0x280>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	88fa      	ldrh	r2, [r7, #6]
 8004c0a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	88fa      	ldrh	r2, [r7, #6]
 8004c10:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c38:	d10f      	bne.n	8004c5a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d007      	beq.n	8004c78 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c80:	d152      	bne.n	8004d28 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_SPI_Transmit+0xee>
 8004c8a:	8b7b      	ldrh	r3, [r7, #26]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d145      	bne.n	8004d1c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	881a      	ldrh	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cb4:	e032      	b.n	8004d1c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d112      	bne.n	8004cea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	881a      	ldrh	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	1c9a      	adds	r2, r3, #2
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ce8:	e018      	b.n	8004d1c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cea:	f7fe fb67 	bl	80033bc <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d803      	bhi.n	8004d02 <HAL_SPI_Transmit+0x160>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d102      	bne.n	8004d08 <HAL_SPI_Transmit+0x166>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e082      	b.n	8004e22 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1c7      	bne.n	8004cb6 <HAL_SPI_Transmit+0x114>
 8004d26:	e053      	b.n	8004dd0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_SPI_Transmit+0x194>
 8004d30:	8b7b      	ldrh	r3, [r7, #26]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d147      	bne.n	8004dc6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d5c:	e033      	b.n	8004dc6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d113      	bne.n	8004d94 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d92:	e018      	b.n	8004dc6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d94:	f7fe fb12 	bl	80033bc <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d803      	bhi.n	8004dac <HAL_SPI_Transmit+0x20a>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_Transmit+0x210>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e02d      	b.n	8004e22 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1c6      	bne.n	8004d5e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f8b1 	bl	8004f3c <SPI_EndRxTxTransaction>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e3c:	f7fe fabe 	bl	80033bc <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e4c:	f7fe fab6 	bl	80033bc <HAL_GetTick>
 8004e50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e52:	4b39      	ldr	r3, [pc, #228]	@ (8004f38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	015b      	lsls	r3, r3, #5
 8004e58:	0d1b      	lsrs	r3, r3, #20
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e62:	e054      	b.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d050      	beq.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e6c:	f7fe faa6 	bl	80033bc <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d902      	bls.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d13d      	bne.n	8004efe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e9a:	d111      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea4:	d004      	beq.n	8004eb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eae:	d107      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec8:	d10f      	bne.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e017      	b.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4013      	ands	r3, r2
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d19b      	bne.n	8004e64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000018 	.word	0x20000018

08004f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2102      	movs	r1, #2
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff ff6a 	bl	8004e2c <SPI_WaitFlagStateUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e032      	b.n	8004fd4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <SPI_EndRxTxTransaction+0xa0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <SPI_EndRxTxTransaction+0xa4>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	0d5b      	lsrs	r3, r3, #21
 8004f7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f8c:	d112      	bne.n	8004fb4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2180      	movs	r1, #128	@ 0x80
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff ff47 	bl	8004e2c <SPI_WaitFlagStateUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d016      	beq.n	8004fd2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e00f      	b.n	8004fd4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fca:	2b80      	cmp	r3, #128	@ 0x80
 8004fcc:	d0f2      	beq.n	8004fb4 <SPI_EndRxTxTransaction+0x78>
 8004fce:	e000      	b.n	8004fd2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004fd0:	bf00      	nop
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000018 	.word	0x20000018
 8004fe0:	165e9f81 	.word	0x165e9f81

08004fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e041      	b.n	800507a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fd fee0 	bl	8002dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f000 fd02 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d001      	beq.n	800509c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e046      	b.n	800512a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a23      	ldr	r2, [pc, #140]	@ (8005138 <HAL_TIM_Base_Start+0xb4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d022      	beq.n	80050f4 <HAL_TIM_Base_Start+0x70>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b6:	d01d      	beq.n	80050f4 <HAL_TIM_Base_Start+0x70>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1f      	ldr	r2, [pc, #124]	@ (800513c <HAL_TIM_Base_Start+0xb8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_TIM_Base_Start+0x70>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <HAL_TIM_Base_Start+0xbc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <HAL_TIM_Base_Start+0x70>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <HAL_TIM_Base_Start+0xc0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIM_Base_Start+0x70>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1b      	ldr	r2, [pc, #108]	@ (8005148 <HAL_TIM_Base_Start+0xc4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_TIM_Base_Start+0x70>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a19      	ldr	r2, [pc, #100]	@ (800514c <HAL_TIM_Base_Start+0xc8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIM_Base_Start+0x70>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a18      	ldr	r2, [pc, #96]	@ (8005150 <HAL_TIM_Base_Start+0xcc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d111      	bne.n	8005118 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b06      	cmp	r3, #6
 8005104:	d010      	beq.n	8005128 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	e007      	b.n	8005128 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40010400 	.word	0x40010400
 800514c:	40014000 	.word	0x40014000
 8005150:	40001800 	.word	0x40001800

08005154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e04e      	b.n	800520a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a23      	ldr	r2, [pc, #140]	@ (8005218 <HAL_TIM_Base_Start_IT+0xc4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005196:	d01d      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1f      	ldr	r2, [pc, #124]	@ (800521c <HAL_TIM_Base_Start_IT+0xc8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005220 <HAL_TIM_Base_Start_IT+0xcc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <HAL_TIM_Base_Start_IT+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <HAL_TIM_Base_Start_IT+0xd4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a19      	ldr	r2, [pc, #100]	@ (800522c <HAL_TIM_Base_Start_IT+0xd8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a18      	ldr	r2, [pc, #96]	@ (8005230 <HAL_TIM_Base_Start_IT+0xdc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d111      	bne.n	80051f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d010      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f6:	e007      	b.n	8005208 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40010400 	.word	0x40010400
 800522c:	40014000 	.word	0x40014000
 8005230:	40001800 	.word	0x40001800

08005234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e041      	b.n	80052ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fd fe7e 	bl	8002f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f000 fbda 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_TIM_PWM_Start+0x24>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e022      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d109      	bne.n	8005312 <HAL_TIM_PWM_Start+0x3e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e015      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d109      	bne.n	800532c <HAL_TIM_PWM_Start+0x58>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e008      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e07c      	b.n	8005440 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0x82>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005354:	e013      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b04      	cmp	r3, #4
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Start+0x92>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005364:	e00b      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0xa2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005374:	e003      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2201      	movs	r2, #1
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fed7 	bl	800613a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <HAL_TIM_PWM_Start+0x174>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIM_PWM_Start+0xcc>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2c      	ldr	r2, [pc, #176]	@ (800544c <HAL_TIM_PWM_Start+0x178>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d101      	bne.n	80053a4 <HAL_TIM_PWM_Start+0xd0>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_TIM_PWM_Start+0xd2>
 80053a4:	2300      	movs	r3, #0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a22      	ldr	r2, [pc, #136]	@ (8005448 <HAL_TIM_PWM_Start+0x174>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053cc:	d01d      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005450 <HAL_TIM_PWM_Start+0x17c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005454 <HAL_TIM_PWM_Start+0x180>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <HAL_TIM_PWM_Start+0x184>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a16      	ldr	r2, [pc, #88]	@ (800544c <HAL_TIM_PWM_Start+0x178>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a18      	ldr	r2, [pc, #96]	@ (800545c <HAL_TIM_PWM_Start+0x188>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a16      	ldr	r2, [pc, #88]	@ (8005460 <HAL_TIM_PWM_Start+0x18c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d111      	bne.n	800542e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b06      	cmp	r3, #6
 800541a:	d010      	beq.n	800543e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542c:	e007      	b.n	800543e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40010000 	.word	0x40010000
 800544c:	40010400 	.word	0x40010400
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40014000 	.word	0x40014000
 8005460:	40001800 	.word	0x40001800

08005464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d020      	beq.n	80054c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0202 	mvn.w	r2, #2
 8005498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa9d 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa8f 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 faa0 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d020      	beq.n	8005514 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0204 	mvn.w	r2, #4
 80054e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa77 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa69 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa7a 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0208 	mvn.w	r2, #8
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2204      	movs	r2, #4
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa51 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa43 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fa54 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0210 	mvn.w	r2, #16
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2208      	movs	r2, #8
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa2b 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa1d 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa2e 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0201 	mvn.w	r2, #1
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc f900 	bl	80017d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00c      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fe4e 	bl	8006290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9ff 	bl	8005a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00c      	beq.n	800563c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0220 	mvn.w	r2, #32
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fe20 	bl	800627c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800565e:	2302      	movs	r3, #2
 8005660:	e0ae      	b.n	80057c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b0c      	cmp	r3, #12
 800566e:	f200 809f 	bhi.w	80057b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005672:	a201      	add	r2, pc, #4	@ (adr r2, 8005678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	080056ad 	.word	0x080056ad
 800567c:	080057b1 	.word	0x080057b1
 8005680:	080057b1 	.word	0x080057b1
 8005684:	080057b1 	.word	0x080057b1
 8005688:	080056ed 	.word	0x080056ed
 800568c:	080057b1 	.word	0x080057b1
 8005690:	080057b1 	.word	0x080057b1
 8005694:	080057b1 	.word	0x080057b1
 8005698:	0800572f 	.word	0x0800572f
 800569c:	080057b1 	.word	0x080057b1
 80056a0:	080057b1 	.word	0x080057b1
 80056a4:	080057b1 	.word	0x080057b1
 80056a8:	0800576f 	.word	0x0800576f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fa66 	bl	8005b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0204 	bic.w	r2, r2, #4
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
      break;
 80056ea:	e064      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fab6 	bl	8005c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]
      break;
 800572c:	e043      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fb0b 	bl	8005d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0208 	orr.w	r2, r2, #8
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0204 	bic.w	r2, r2, #4
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	61da      	str	r2, [r3, #28]
      break;
 800576c:	e023      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fb5f 	bl	8005e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	021a      	lsls	r2, r3, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	61da      	str	r2, [r3, #28]
      break;
 80057ae:	e002      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
      break;
 80057b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057be:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e0b4      	b.n	800594e <HAL_TIM_ConfigClockSource+0x186>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800580a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581c:	d03e      	beq.n	800589c <HAL_TIM_ConfigClockSource+0xd4>
 800581e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005822:	f200 8087 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582a:	f000 8086 	beq.w	800593a <HAL_TIM_ConfigClockSource+0x172>
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005832:	d87f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b70      	cmp	r3, #112	@ 0x70
 8005836:	d01a      	beq.n	800586e <HAL_TIM_ConfigClockSource+0xa6>
 8005838:	2b70      	cmp	r3, #112	@ 0x70
 800583a:	d87b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b60      	cmp	r3, #96	@ 0x60
 800583e:	d050      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005840:	2b60      	cmp	r3, #96	@ 0x60
 8005842:	d877      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b50      	cmp	r3, #80	@ 0x50
 8005846:	d03c      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005848:	2b50      	cmp	r3, #80	@ 0x50
 800584a:	d873      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b40      	cmp	r3, #64	@ 0x40
 800584e:	d058      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x13a>
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d86f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b30      	cmp	r3, #48	@ 0x30
 8005856:	d064      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	2b30      	cmp	r3, #48	@ 0x30
 800585a:	d86b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d060      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d867      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05c      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d05a      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 800586c:	e062      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800587e:	f000 fc3c 	bl	80060fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	609a      	str	r2, [r3, #8]
      break;
 800589a:	e04f      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	f000 fc25 	bl	80060fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058be:	609a      	str	r2, [r3, #8]
      break;
 80058c0:	e03c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 fb99 	bl	8006006 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2150      	movs	r1, #80	@ 0x50
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fbf2 	bl	80060c4 <TIM_ITRx_SetConfig>
      break;
 80058e0:	e02c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 fbb8 	bl	8006064 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2160      	movs	r1, #96	@ 0x60
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fbe2 	bl	80060c4 <TIM_ITRx_SetConfig>
      break;
 8005900:	e01c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fb79 	bl	8006006 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2140      	movs	r1, #64	@ 0x40
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fbd2 	bl	80060c4 <TIM_ITRx_SetConfig>
      break;
 8005920:	e00c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f000 fbc9 	bl	80060c4 <TIM_ITRx_SetConfig>
      break;
 8005932:	e003      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      break;
 8005938:	e000      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800593a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_TIM_SlaveConfigSynchro+0x18>
 800596a:	2302      	movs	r3, #2
 800596c:	e031      	b.n	80059d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 faaf 	bl	8005ee4 <TIM_SlaveTimer_SetConfig>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e018      	b.n	80059d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a46      	ldr	r2, [pc, #280]	@ (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4a:	d00f      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a43      	ldr	r2, [pc, #268]	@ (8005b5c <TIM_Base_SetConfig+0x130>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a42      	ldr	r2, [pc, #264]	@ (8005b60 <TIM_Base_SetConfig+0x134>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d007      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a41      	ldr	r2, [pc, #260]	@ (8005b64 <TIM_Base_SetConfig+0x138>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a40      	ldr	r2, [pc, #256]	@ (8005b68 <TIM_Base_SetConfig+0x13c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a35      	ldr	r2, [pc, #212]	@ (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a8c:	d027      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a32      	ldr	r2, [pc, #200]	@ (8005b5c <TIM_Base_SetConfig+0x130>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d023      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a31      	ldr	r2, [pc, #196]	@ (8005b60 <TIM_Base_SetConfig+0x134>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01f      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a30      	ldr	r2, [pc, #192]	@ (8005b64 <TIM_Base_SetConfig+0x138>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b68 <TIM_Base_SetConfig+0x13c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d017      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8005b6c <TIM_Base_SetConfig+0x140>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8005b70 <TIM_Base_SetConfig+0x144>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8005b74 <TIM_Base_SetConfig+0x148>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b78 <TIM_Base_SetConfig+0x14c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8005b7c <TIM_Base_SetConfig+0x150>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a29      	ldr	r2, [pc, #164]	@ (8005b80 <TIM_Base_SetConfig+0x154>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d108      	bne.n	8005af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a10      	ldr	r2, [pc, #64]	@ (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_Base_SetConfig+0xf8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a12      	ldr	r2, [pc, #72]	@ (8005b68 <TIM_Base_SetConfig+0x13c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d103      	bne.n	8005b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f023 0201 	bic.w	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	611a      	str	r2, [r3, #16]
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40000c00 	.word	0x40000c00
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800
 8005b78:	40001800 	.word	0x40001800
 8005b7c:	40001c00 	.word	0x40001c00
 8005b80:	40002000 	.word	0x40002000

08005b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f023 0201 	bic.w	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 0302 	bic.w	r3, r3, #2
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a20      	ldr	r2, [pc, #128]	@ (8005c5c <TIM_OC1_SetConfig+0xd8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC1_SetConfig+0x64>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c60 <TIM_OC1_SetConfig+0xdc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10c      	bne.n	8005c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0308 	bic.w	r3, r3, #8
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f023 0304 	bic.w	r3, r3, #4
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a15      	ldr	r2, [pc, #84]	@ (8005c5c <TIM_OC1_SetConfig+0xd8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC1_SetConfig+0x8e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a14      	ldr	r2, [pc, #80]	@ (8005c60 <TIM_OC1_SetConfig+0xdc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d111      	bne.n	8005c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 0210 	bic.w	r2, r3, #16
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0320 	bic.w	r3, r3, #32
 8005cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a22      	ldr	r2, [pc, #136]	@ (8005d48 <TIM_OC2_SetConfig+0xe4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_OC2_SetConfig+0x68>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a21      	ldr	r2, [pc, #132]	@ (8005d4c <TIM_OC2_SetConfig+0xe8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10d      	bne.n	8005ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a17      	ldr	r2, [pc, #92]	@ (8005d48 <TIM_OC2_SetConfig+0xe4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC2_SetConfig+0x94>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a16      	ldr	r2, [pc, #88]	@ (8005d4c <TIM_OC2_SetConfig+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d113      	bne.n	8005d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40010400 	.word	0x40010400

08005d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a21      	ldr	r2, [pc, #132]	@ (8005e30 <TIM_OC3_SetConfig+0xe0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_OC3_SetConfig+0x66>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a20      	ldr	r2, [pc, #128]	@ (8005e34 <TIM_OC3_SetConfig+0xe4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d10d      	bne.n	8005dd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a16      	ldr	r2, [pc, #88]	@ (8005e30 <TIM_OC3_SetConfig+0xe0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC3_SetConfig+0x92>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	@ (8005e34 <TIM_OC3_SetConfig+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d113      	bne.n	8005e0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	621a      	str	r2, [r3, #32]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40010400 	.word	0x40010400

08005e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a12      	ldr	r2, [pc, #72]	@ (8005edc <TIM_OC4_SetConfig+0xa4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_OC4_SetConfig+0x68>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ee0 <TIM_OC4_SetConfig+0xa8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d109      	bne.n	8005eb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	019b      	lsls	r3, r3, #6
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	621a      	str	r2, [r3, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f00:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f023 0307 	bic.w	r3, r3, #7
 8005f12:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b70      	cmp	r3, #112	@ 0x70
 8005f2c:	d01a      	beq.n	8005f64 <TIM_SlaveTimer_SetConfig+0x80>
 8005f2e:	2b70      	cmp	r3, #112	@ 0x70
 8005f30:	d860      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f32:	2b60      	cmp	r3, #96	@ 0x60
 8005f34:	d054      	beq.n	8005fe0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005f36:	2b60      	cmp	r3, #96	@ 0x60
 8005f38:	d85c      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f3a:	2b50      	cmp	r3, #80	@ 0x50
 8005f3c:	d046      	beq.n	8005fcc <TIM_SlaveTimer_SetConfig+0xe8>
 8005f3e:	2b50      	cmp	r3, #80	@ 0x50
 8005f40:	d858      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f42:	2b40      	cmp	r3, #64	@ 0x40
 8005f44:	d019      	beq.n	8005f7a <TIM_SlaveTimer_SetConfig+0x96>
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	d854      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f4a:	2b30      	cmp	r3, #48	@ 0x30
 8005f4c:	d055      	beq.n	8005ffa <TIM_SlaveTimer_SetConfig+0x116>
 8005f4e:	2b30      	cmp	r3, #48	@ 0x30
 8005f50:	d850      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d051      	beq.n	8005ffa <TIM_SlaveTimer_SetConfig+0x116>
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d84c      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d04d      	beq.n	8005ffa <TIM_SlaveTimer_SetConfig+0x116>
 8005f5e:	2b10      	cmp	r3, #16
 8005f60:	d04b      	beq.n	8005ffa <TIM_SlaveTimer_SetConfig+0x116>
 8005f62:	e047      	b.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005f74:	f000 f8c1 	bl	80060fa <TIM_ETR_SetConfig>
      break;
 8005f78:	e040      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d101      	bne.n	8005f86 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e03b      	b.n	8005ffe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
      break;
 8005fca:	e017      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f000 f814 	bl	8006006 <TIM_TI1_ConfigInputStage>
      break;
 8005fde:	e00d      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fec:	461a      	mov	r2, r3
 8005fee:	f000 f839 	bl	8006064 <TIM_TI2_ConfigInputStage>
      break;
 8005ff2:	e003      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff8:	e000      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005ffa:	bf00      	nop
  }

  return status;
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006006:	b480      	push	{r7}
 8006008:	b087      	sub	sp, #28
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f023 0201 	bic.w	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 030a 	bic.w	r3, r3, #10
 8006042:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	621a      	str	r2, [r3, #32]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0210 	bic.w	r2, r3, #16
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800608e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	031b      	lsls	r3, r3, #12
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	621a      	str	r2, [r3, #32]
}
 80060b8:	bf00      	nop
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f043 0307 	orr.w	r3, r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	609a      	str	r2, [r3, #8]
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b087      	sub	sp, #28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006114:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	021a      	lsls	r2, r3, #8
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	431a      	orrs	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4313      	orrs	r3, r2
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	609a      	str	r2, [r3, #8]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2201      	movs	r2, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	43db      	mvns	r3, r3
 800615c:	401a      	ands	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	431a      	orrs	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006198:	2302      	movs	r3, #2
 800619a:	e05a      	b.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a21      	ldr	r2, [pc, #132]	@ (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d022      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e8:	d01d      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006264 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d018      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006268 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1a      	ldr	r2, [pc, #104]	@ (800626c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00e      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a18      	ldr	r2, [pc, #96]	@ (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a17      	ldr	r2, [pc, #92]	@ (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a15      	ldr	r2, [pc, #84]	@ (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d10c      	bne.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800622c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	4313      	orrs	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40010000 	.word	0x40010000
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40010400 	.word	0x40010400
 8006274:	40014000 	.word	0x40014000
 8006278:	40001800 	.word	0x40001800

0800627c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e042      	b.n	800633c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fc fef6 	bl	80030bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2224      	movs	r2, #36	@ 0x24
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 ff85 	bl	80071f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800630c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800631c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	@ 0x28
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b20      	cmp	r3, #32
 8006362:	d175      	bne.n	8006450 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_UART_Transmit+0x2c>
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e06e      	b.n	8006452 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2221      	movs	r2, #33	@ 0x21
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006382:	f7fd f81b 	bl	80033bc <HAL_GetTick>
 8006386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800639c:	d108      	bne.n	80063b0 <HAL_UART_Transmit+0x6c>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d104      	bne.n	80063b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	e003      	b.n	80063b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063b8:	e02e      	b.n	8006418 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2200      	movs	r2, #0
 80063c2:	2180      	movs	r1, #128	@ 0x80
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fc5d 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e03a      	b.n	8006452 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10b      	bne.n	80063fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	3302      	adds	r3, #2
 80063f6:	61bb      	str	r3, [r7, #24]
 80063f8:	e007      	b.n	800640a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	781a      	ldrb	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	3301      	adds	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1cb      	bne.n	80063ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2200      	movs	r2, #0
 800642a:	2140      	movs	r1, #64	@ 0x40
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fc29 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e006      	b.n	8006452 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e000      	b.n	8006452 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006450:	2302      	movs	r3, #2
  }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b08c      	sub	sp, #48	@ 0x30
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	4613      	mov	r3, r2
 8006466:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b20      	cmp	r3, #32
 8006472:	d14a      	bne.n	800650a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e043      	b.n	800650c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	461a      	mov	r2, r3
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fc4e 	bl	8006d38 <UART_Start_Receive_DMA>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80064a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d12c      	bne.n	8006504 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d125      	bne.n	80064fe <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	617b      	str	r3, [r7, #20]
   return(result);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f043 0310 	orr.w	r3, r3, #16
 80064de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80064ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6a39      	ldr	r1, [r7, #32]
 80064ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e5      	bne.n	80064c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80064fc:	e002      	b.n	8006504 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006508:	e000      	b.n	800650c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800650a:	2302      	movs	r3, #2
  }
}
 800650c:	4618      	mov	r0, r3
 800650e:	3730      	adds	r7, #48	@ 0x30
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b0ba      	sub	sp, #232	@ 0xe8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800653a:	2300      	movs	r3, #0
 800653c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006540:	2300      	movs	r3, #0
 8006542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10f      	bne.n	800657a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800655a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <HAL_UART_IRQHandler+0x66>
 8006566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fd81 	bl	800707a <UART_Receive_IT>
      return;
 8006578:	e25b      	b.n	8006a32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800657a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 80de 	beq.w	8006740 <HAL_UART_IRQHandler+0x22c>
 8006584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006594:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80d1 	beq.w	8006740 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00b      	beq.n	80065c2 <HAL_UART_IRQHandler+0xae>
 80065aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <HAL_UART_IRQHandler+0xd2>
 80065ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065de:	f043 0202 	orr.w	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00b      	beq.n	800660a <HAL_UART_IRQHandler+0xf6>
 80065f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	f043 0204 	orr.w	r2, r3, #4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d011      	beq.n	800663a <HAL_UART_IRQHandler+0x126>
 8006616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d105      	bne.n	800662e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	f043 0208 	orr.w	r2, r3, #8
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 81f2 	beq.w	8006a28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <HAL_UART_IRQHandler+0x14e>
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fd0c 	bl	800707a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666c:	2b40      	cmp	r3, #64	@ 0x40
 800666e:	bf0c      	ite	eq
 8006670:	2301      	moveq	r3, #1
 8006672:	2300      	movne	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d103      	bne.n	800668e <HAL_UART_IRQHandler+0x17a>
 8006686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800668a:	2b00      	cmp	r3, #0
 800668c:	d04f      	beq.n	800672e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fc14 	bl	8006ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669e:	2b40      	cmp	r3, #64	@ 0x40
 80066a0:	d141      	bne.n	8006726 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3314      	adds	r3, #20
 80066a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3314      	adds	r3, #20
 80066ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1d9      	bne.n	80066a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d013      	beq.n	800671e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fa:	4a7e      	ldr	r2, [pc, #504]	@ (80068f4 <HAL_UART_IRQHandler+0x3e0>)
 80066fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006702:	4618      	mov	r0, r3
 8006704:	f7fd f912 	bl	800392c <HAL_DMA_Abort_IT>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d016      	beq.n	800673c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	e00e      	b.n	800673c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f9a8 	bl	8006a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	e00a      	b.n	800673c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f9a4 	bl	8006a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672c:	e006      	b.n	800673c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f9a0 	bl	8006a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800673a:	e175      	b.n	8006a28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	bf00      	nop
    return;
 800673e:	e173      	b.n	8006a28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	2b01      	cmp	r3, #1
 8006746:	f040 814f 	bne.w	80069e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8148 	beq.w	80069e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800675c:	f003 0310 	and.w	r3, r3, #16
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8141 	beq.w	80069e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006766:	2300      	movs	r3, #0
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60bb      	str	r3, [r7, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006786:	2b40      	cmp	r3, #64	@ 0x40
 8006788:	f040 80b6 	bne.w	80068f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8145 	beq.w	8006a2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067aa:	429a      	cmp	r2, r3
 80067ac:	f080 813e 	bcs.w	8006a2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c2:	f000 8088 	beq.w	80068d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	330c      	adds	r3, #12
 80067ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800680a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1d9      	bne.n	80067c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006824:	f023 0301 	bic.w	r3, r3, #1
 8006828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800683a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800683e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e1      	bne.n	8006812 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3314      	adds	r3, #20
 8006854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800685e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3314      	adds	r3, #20
 800686e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e3      	bne.n	800684e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a6:	f023 0310 	bic.w	r3, r3, #16
 80068aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80068b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e3      	bne.n	8006894 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fc ffbb 	bl	800384c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fa fea3 	bl	8001638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068f2:	e09b      	b.n	8006a2c <HAL_UART_IRQHandler+0x518>
 80068f4:	08006f83 	.word	0x08006f83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006900:	b29b      	uxth	r3, r3
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 808e 	beq.w	8006a30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8089 	beq.w	8006a30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800692e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006934:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006942:	647a      	str	r2, [r7, #68]	@ 0x44
 8006944:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006948:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e3      	bne.n	800691e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	623b      	str	r3, [r7, #32]
   return(result);
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800697a:	633a      	str	r2, [r7, #48]	@ 0x30
 800697c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e3      	bne.n	8006956 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0310 	bic.w	r3, r3, #16
 80069b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	330c      	adds	r3, #12
 80069bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069c0:	61fa      	str	r2, [r7, #28]
 80069c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	69b9      	ldr	r1, [r7, #24]
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	617b      	str	r3, [r7, #20]
   return(result);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e3      	bne.n	800699c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fa fe29 	bl	8001638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069e6:	e023      	b.n	8006a30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d009      	beq.n	8006a08 <HAL_UART_IRQHandler+0x4f4>
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fad2 	bl	8006faa <UART_Transmit_IT>
    return;
 8006a06:	e014      	b.n	8006a32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00e      	beq.n	8006a32 <HAL_UART_IRQHandler+0x51e>
 8006a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fb12 	bl	800704a <UART_EndTransmit_IT>
    return;
 8006a26:	e004      	b.n	8006a32 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a28:	bf00      	nop
 8006a2a:	e002      	b.n	8006a32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a30:	bf00      	nop
  }
}
 8006a32:	37e8      	adds	r7, #232	@ 0xe8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b09c      	sub	sp, #112	@ 0x70
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a94:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d172      	bne.n	8006b8a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	330c      	adds	r3, #12
 8006ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	330c      	adds	r3, #12
 8006ac8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006aca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006acc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3314      	adds	r3, #20
 8006afc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	623b      	str	r3, [r7, #32]
   return(result);
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b32:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d119      	bne.n	8006b8a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f023 0310 	bic.w	r3, r3, #16
 8006b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b76:	61fa      	str	r2, [r7, #28]
 8006b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	69b9      	ldr	r1, [r7, #24]
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	617b      	str	r3, [r7, #20]
   return(result);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d106      	bne.n	8006ba6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ba0:	f7fa fd4a 	bl	8001638 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ba4:	e002      	b.n	8006bac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ba6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ba8:	f7ff ff50 	bl	8006a4c <HAL_UART_RxCpltCallback>
}
 8006bac:	bf00      	nop
 8006bae:	3770      	adds	r7, #112	@ 0x70
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d108      	bne.n	8006be2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7fa fd2c 	bl	8001638 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006be0:	e002      	b.n	8006be8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff ff3c 	bl	8006a60 <HAL_UART_RxHalfCpltCallback>
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0c:	2b80      	cmp	r3, #128	@ 0x80
 8006c0e:	bf0c      	ite	eq
 8006c10:	2301      	moveq	r3, #1
 8006c12:	2300      	movne	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b21      	cmp	r3, #33	@ 0x21
 8006c22:	d108      	bne.n	8006c36 <UART_DMAError+0x46>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f000 f91b 	bl	8006e6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c40:	2b40      	cmp	r3, #64	@ 0x40
 8006c42:	bf0c      	ite	eq
 8006c44:	2301      	moveq	r3, #1
 8006c46:	2300      	movne	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b22      	cmp	r3, #34	@ 0x22
 8006c56:	d108      	bne.n	8006c6a <UART_DMAError+0x7a>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2200      	movs	r2, #0
 8006c62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006c64:	68b8      	ldr	r0, [r7, #8]
 8006c66:	f000 f929 	bl	8006ebc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6e:	f043 0210 	orr.w	r2, r3, #16
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c76:	68b8      	ldr	r0, [r7, #8]
 8006c78:	f7ff fefc 	bl	8006a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	4613      	mov	r3, r2
 8006c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c94:	e03b      	b.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d037      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fc fb8d 	bl	80033bc <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	6a3a      	ldr	r2, [r7, #32]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e03a      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d023      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b80      	cmp	r3, #128	@ 0x80
 8006cca:	d020      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b40      	cmp	r3, #64	@ 0x40
 8006cd0:	d01d      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d116      	bne.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f8e0 	bl	8006ebc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2208      	movs	r2, #8
 8006d00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e00f      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4013      	ands	r3, r2
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	bf0c      	ite	eq
 8006d1e:	2301      	moveq	r3, #1
 8006d20:	2300      	movne	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d0b4      	beq.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b098      	sub	sp, #96	@ 0x60
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2222      	movs	r2, #34	@ 0x22
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d64:	4a3e      	ldr	r2, [pc, #248]	@ (8006e60 <UART_Start_Receive_DMA+0x128>)
 8006d66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8006e64 <UART_Start_Receive_DMA+0x12c>)
 8006d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d74:	4a3c      	ldr	r2, [pc, #240]	@ (8006e68 <UART_Start_Receive_DMA+0x130>)
 8006d76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006d80:	f107 0308 	add.w	r3, r7, #8
 8006d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4619      	mov	r1, r3
 8006d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	f7fc fd00 	bl	800379c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d019      	beq.n	8006dee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006de0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e5      	bne.n	8006dba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3314      	adds	r3, #20
 8006df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e5      	bne.n	8006dee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3314      	adds	r3, #20
 8006e28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	617b      	str	r3, [r7, #20]
   return(result);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e38:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e42:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6a39      	ldr	r1, [r7, #32]
 8006e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e5      	bne.n	8006e22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3760      	adds	r7, #96	@ 0x60
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	08006a89 	.word	0x08006a89
 8006e64:	08006bb5 	.word	0x08006bb5
 8006e68:	08006bf1 	.word	0x08006bf1

08006e6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b089      	sub	sp, #36	@ 0x24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e8a:	61fb      	str	r3, [r7, #28]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	61ba      	str	r2, [r7, #24]
 8006e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6979      	ldr	r1, [r7, #20]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e5      	bne.n	8006e74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006eb0:	bf00      	nop
 8006eb2:	3724      	adds	r7, #36	@ 0x24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b095      	sub	sp, #84	@ 0x54
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ee4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3314      	adds	r3, #20
 8006f16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d119      	bne.n	8006f68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f023 0310 	bic.w	r3, r3, #16
 8006f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	330c      	adds	r3, #12
 8006f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f54:	61ba      	str	r2, [r7, #24]
 8006f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6979      	ldr	r1, [r7, #20]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	613b      	str	r3, [r7, #16]
   return(result);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e5      	bne.n	8006f34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f76:	bf00      	nop
 8006f78:	3754      	adds	r7, #84	@ 0x54
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7ff fd69 	bl	8006a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b21      	cmp	r3, #33	@ 0x21
 8006fbc:	d13e      	bne.n	800703c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc6:	d114      	bne.n	8006ff2 <UART_Transmit_IT+0x48>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d110      	bne.n	8006ff2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	1c9a      	adds	r2, r3, #2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	621a      	str	r2, [r3, #32]
 8006ff0:	e008      	b.n	8007004 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6211      	str	r1, [r2, #32]
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29b      	uxth	r3, r3
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	4619      	mov	r1, r3
 8007012:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10f      	bne.n	8007038 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007026:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007036:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	e000      	b.n	800703e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800703c:	2302      	movs	r3, #2
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fce4 	bl	8006a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b08c      	sub	sp, #48	@ 0x30
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b22      	cmp	r3, #34	@ 0x22
 800708c:	f040 80ae 	bne.w	80071ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007098:	d117      	bne.n	80070ca <UART_Receive_IT+0x50>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d113      	bne.n	80070ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c2:	1c9a      	adds	r2, r3, #2
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80070c8:	e026      	b.n	8007118 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070dc:	d007      	beq.n	80070ee <UART_Receive_IT+0x74>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <UART_Receive_IT+0x82>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e008      	b.n	800710e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007108:	b2da      	uxtb	r2, r3
 800710a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29b      	uxth	r3, r3
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4619      	mov	r1, r3
 8007126:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007128:	2b00      	cmp	r3, #0
 800712a:	d15d      	bne.n	80071e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0220 	bic.w	r2, r2, #32
 800713a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800714a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716e:	2b01      	cmp	r3, #1
 8007170:	d135      	bne.n	80071de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	613b      	str	r3, [r7, #16]
   return(result);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007198:	623a      	str	r2, [r7, #32]
 800719a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	69f9      	ldr	r1, [r7, #28]
 800719e:	6a3a      	ldr	r2, [r7, #32]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d10a      	bne.n	80071d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fa fa2e 	bl	8001638 <HAL_UARTEx_RxEventCallback>
 80071dc:	e002      	b.n	80071e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fc34 	bl	8006a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e002      	b.n	80071ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3730      	adds	r7, #48	@ 0x30
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071fc:	b0c0      	sub	sp, #256	@ 0x100
 80071fe:	af00      	add	r7, sp, #0
 8007200:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	68d9      	ldr	r1, [r3, #12]
 8007216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	ea40 0301 	orr.w	r3, r0, r1
 8007220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	431a      	orrs	r2, r3
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	431a      	orrs	r2, r3
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007250:	f021 010c 	bic.w	r1, r1, #12
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800725e:	430b      	orrs	r3, r1
 8007260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	6999      	ldr	r1, [r3, #24]
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	ea40 0301 	orr.w	r3, r0, r1
 800727e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b8f      	ldr	r3, [pc, #572]	@ (80074c4 <UART_SetConfig+0x2cc>)
 8007288:	429a      	cmp	r2, r3
 800728a:	d005      	beq.n	8007298 <UART_SetConfig+0xa0>
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b8d      	ldr	r3, [pc, #564]	@ (80074c8 <UART_SetConfig+0x2d0>)
 8007294:	429a      	cmp	r2, r3
 8007296:	d104      	bne.n	80072a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007298:	f7fd fbe6 	bl	8004a68 <HAL_RCC_GetPCLK2Freq>
 800729c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072a0:	e003      	b.n	80072aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072a2:	f7fd fbcd 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 80072a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b4:	f040 810c 	bne.w	80074d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072ca:	4622      	mov	r2, r4
 80072cc:	462b      	mov	r3, r5
 80072ce:	1891      	adds	r1, r2, r2
 80072d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072d2:	415b      	adcs	r3, r3
 80072d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072da:	4621      	mov	r1, r4
 80072dc:	eb12 0801 	adds.w	r8, r2, r1
 80072e0:	4629      	mov	r1, r5
 80072e2:	eb43 0901 	adc.w	r9, r3, r1
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072fa:	4690      	mov	r8, r2
 80072fc:	4699      	mov	r9, r3
 80072fe:	4623      	mov	r3, r4
 8007300:	eb18 0303 	adds.w	r3, r8, r3
 8007304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007308:	462b      	mov	r3, r5
 800730a:	eb49 0303 	adc.w	r3, r9, r3
 800730e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800731e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007326:	460b      	mov	r3, r1
 8007328:	18db      	adds	r3, r3, r3
 800732a:	653b      	str	r3, [r7, #80]	@ 0x50
 800732c:	4613      	mov	r3, r2
 800732e:	eb42 0303 	adc.w	r3, r2, r3
 8007332:	657b      	str	r3, [r7, #84]	@ 0x54
 8007334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800733c:	f7f9 fc34 	bl	8000ba8 <__aeabi_uldivmod>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4b61      	ldr	r3, [pc, #388]	@ (80074cc <UART_SetConfig+0x2d4>)
 8007346:	fba3 2302 	umull	r2, r3, r3, r2
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	011c      	lsls	r4, r3, #4
 800734e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007352:	2200      	movs	r2, #0
 8007354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007358:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800735c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007360:	4642      	mov	r2, r8
 8007362:	464b      	mov	r3, r9
 8007364:	1891      	adds	r1, r2, r2
 8007366:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007368:	415b      	adcs	r3, r3
 800736a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007370:	4641      	mov	r1, r8
 8007372:	eb12 0a01 	adds.w	sl, r2, r1
 8007376:	4649      	mov	r1, r9
 8007378:	eb43 0b01 	adc.w	fp, r3, r1
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800738c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007390:	4692      	mov	sl, r2
 8007392:	469b      	mov	fp, r3
 8007394:	4643      	mov	r3, r8
 8007396:	eb1a 0303 	adds.w	r3, sl, r3
 800739a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800739e:	464b      	mov	r3, r9
 80073a0:	eb4b 0303 	adc.w	r3, fp, r3
 80073a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073bc:	460b      	mov	r3, r1
 80073be:	18db      	adds	r3, r3, r3
 80073c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80073c2:	4613      	mov	r3, r2
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073d2:	f7f9 fbe9 	bl	8000ba8 <__aeabi_uldivmod>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	4b3b      	ldr	r3, [pc, #236]	@ (80074cc <UART_SetConfig+0x2d4>)
 80073de:	fba3 2301 	umull	r2, r3, r3, r1
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	2264      	movs	r2, #100	@ 0x64
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	1acb      	subs	r3, r1, r3
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073f2:	4b36      	ldr	r3, [pc, #216]	@ (80074cc <UART_SetConfig+0x2d4>)
 80073f4:	fba3 2302 	umull	r2, r3, r3, r2
 80073f8:	095b      	lsrs	r3, r3, #5
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007400:	441c      	add	r4, r3
 8007402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007406:	2200      	movs	r2, #0
 8007408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800740c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007414:	4642      	mov	r2, r8
 8007416:	464b      	mov	r3, r9
 8007418:	1891      	adds	r1, r2, r2
 800741a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800741c:	415b      	adcs	r3, r3
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007424:	4641      	mov	r1, r8
 8007426:	1851      	adds	r1, r2, r1
 8007428:	6339      	str	r1, [r7, #48]	@ 0x30
 800742a:	4649      	mov	r1, r9
 800742c:	414b      	adcs	r3, r1
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800743c:	4659      	mov	r1, fp
 800743e:	00cb      	lsls	r3, r1, #3
 8007440:	4651      	mov	r1, sl
 8007442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007446:	4651      	mov	r1, sl
 8007448:	00ca      	lsls	r2, r1, #3
 800744a:	4610      	mov	r0, r2
 800744c:	4619      	mov	r1, r3
 800744e:	4603      	mov	r3, r0
 8007450:	4642      	mov	r2, r8
 8007452:	189b      	adds	r3, r3, r2
 8007454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007458:	464b      	mov	r3, r9
 800745a:	460a      	mov	r2, r1
 800745c:	eb42 0303 	adc.w	r3, r2, r3
 8007460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007470:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007478:	460b      	mov	r3, r1
 800747a:	18db      	adds	r3, r3, r3
 800747c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800747e:	4613      	mov	r3, r2
 8007480:	eb42 0303 	adc.w	r3, r2, r3
 8007484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800748a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800748e:	f7f9 fb8b 	bl	8000ba8 <__aeabi_uldivmod>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4b0d      	ldr	r3, [pc, #52]	@ (80074cc <UART_SetConfig+0x2d4>)
 8007498:	fba3 1302 	umull	r1, r3, r3, r2
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	2164      	movs	r1, #100	@ 0x64
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	3332      	adds	r3, #50	@ 0x32
 80074aa:	4a08      	ldr	r2, [pc, #32]	@ (80074cc <UART_SetConfig+0x2d4>)
 80074ac:	fba2 2303 	umull	r2, r3, r2, r3
 80074b0:	095b      	lsrs	r3, r3, #5
 80074b2:	f003 0207 	and.w	r2, r3, #7
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4422      	add	r2, r4
 80074be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074c0:	e106      	b.n	80076d0 <UART_SetConfig+0x4d8>
 80074c2:	bf00      	nop
 80074c4:	40011000 	.word	0x40011000
 80074c8:	40011400 	.word	0x40011400
 80074cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074e2:	4642      	mov	r2, r8
 80074e4:	464b      	mov	r3, r9
 80074e6:	1891      	adds	r1, r2, r2
 80074e8:	6239      	str	r1, [r7, #32]
 80074ea:	415b      	adcs	r3, r3
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074f2:	4641      	mov	r1, r8
 80074f4:	1854      	adds	r4, r2, r1
 80074f6:	4649      	mov	r1, r9
 80074f8:	eb43 0501 	adc.w	r5, r3, r1
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	00eb      	lsls	r3, r5, #3
 8007506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800750a:	00e2      	lsls	r2, r4, #3
 800750c:	4614      	mov	r4, r2
 800750e:	461d      	mov	r5, r3
 8007510:	4643      	mov	r3, r8
 8007512:	18e3      	adds	r3, r4, r3
 8007514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007518:	464b      	mov	r3, r9
 800751a:	eb45 0303 	adc.w	r3, r5, r3
 800751e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800752e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800753e:	4629      	mov	r1, r5
 8007540:	008b      	lsls	r3, r1, #2
 8007542:	4621      	mov	r1, r4
 8007544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007548:	4621      	mov	r1, r4
 800754a:	008a      	lsls	r2, r1, #2
 800754c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007550:	f7f9 fb2a 	bl	8000ba8 <__aeabi_uldivmod>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4b60      	ldr	r3, [pc, #384]	@ (80076dc <UART_SetConfig+0x4e4>)
 800755a:	fba3 2302 	umull	r2, r3, r3, r2
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	011c      	lsls	r4, r3, #4
 8007562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007566:	2200      	movs	r2, #0
 8007568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800756c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007574:	4642      	mov	r2, r8
 8007576:	464b      	mov	r3, r9
 8007578:	1891      	adds	r1, r2, r2
 800757a:	61b9      	str	r1, [r7, #24]
 800757c:	415b      	adcs	r3, r3
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007584:	4641      	mov	r1, r8
 8007586:	1851      	adds	r1, r2, r1
 8007588:	6139      	str	r1, [r7, #16]
 800758a:	4649      	mov	r1, r9
 800758c:	414b      	adcs	r3, r1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800759c:	4659      	mov	r1, fp
 800759e:	00cb      	lsls	r3, r1, #3
 80075a0:	4651      	mov	r1, sl
 80075a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075a6:	4651      	mov	r1, sl
 80075a8:	00ca      	lsls	r2, r1, #3
 80075aa:	4610      	mov	r0, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	4603      	mov	r3, r0
 80075b0:	4642      	mov	r2, r8
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075b8:	464b      	mov	r3, r9
 80075ba:	460a      	mov	r2, r1
 80075bc:	eb42 0303 	adc.w	r3, r2, r3
 80075c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075dc:	4649      	mov	r1, r9
 80075de:	008b      	lsls	r3, r1, #2
 80075e0:	4641      	mov	r1, r8
 80075e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e6:	4641      	mov	r1, r8
 80075e8:	008a      	lsls	r2, r1, #2
 80075ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075ee:	f7f9 fadb 	bl	8000ba8 <__aeabi_uldivmod>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4611      	mov	r1, r2
 80075f8:	4b38      	ldr	r3, [pc, #224]	@ (80076dc <UART_SetConfig+0x4e4>)
 80075fa:	fba3 2301 	umull	r2, r3, r3, r1
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	2264      	movs	r2, #100	@ 0x64
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	1acb      	subs	r3, r1, r3
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	3332      	adds	r3, #50	@ 0x32
 800760c:	4a33      	ldr	r2, [pc, #204]	@ (80076dc <UART_SetConfig+0x4e4>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007618:	441c      	add	r4, r3
 800761a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761e:	2200      	movs	r2, #0
 8007620:	673b      	str	r3, [r7, #112]	@ 0x70
 8007622:	677a      	str	r2, [r7, #116]	@ 0x74
 8007624:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	1891      	adds	r1, r2, r2
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	415b      	adcs	r3, r3
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007638:	4641      	mov	r1, r8
 800763a:	1851      	adds	r1, r2, r1
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	4649      	mov	r1, r9
 8007640:	414b      	adcs	r3, r1
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007650:	4659      	mov	r1, fp
 8007652:	00cb      	lsls	r3, r1, #3
 8007654:	4651      	mov	r1, sl
 8007656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765a:	4651      	mov	r1, sl
 800765c:	00ca      	lsls	r2, r1, #3
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	4603      	mov	r3, r0
 8007664:	4642      	mov	r2, r8
 8007666:	189b      	adds	r3, r3, r2
 8007668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800766a:	464b      	mov	r3, r9
 800766c:	460a      	mov	r2, r1
 800766e:	eb42 0303 	adc.w	r3, r2, r3
 8007672:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	663b      	str	r3, [r7, #96]	@ 0x60
 800767e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800768c:	4649      	mov	r1, r9
 800768e:	008b      	lsls	r3, r1, #2
 8007690:	4641      	mov	r1, r8
 8007692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007696:	4641      	mov	r1, r8
 8007698:	008a      	lsls	r2, r1, #2
 800769a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800769e:	f7f9 fa83 	bl	8000ba8 <__aeabi_uldivmod>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4b0d      	ldr	r3, [pc, #52]	@ (80076dc <UART_SetConfig+0x4e4>)
 80076a8:	fba3 1302 	umull	r1, r3, r3, r2
 80076ac:	095b      	lsrs	r3, r3, #5
 80076ae:	2164      	movs	r1, #100	@ 0x64
 80076b0:	fb01 f303 	mul.w	r3, r1, r3
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	3332      	adds	r3, #50	@ 0x32
 80076ba:	4a08      	ldr	r2, [pc, #32]	@ (80076dc <UART_SetConfig+0x4e4>)
 80076bc:	fba2 2303 	umull	r2, r3, r2, r3
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4422      	add	r2, r4
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076d6:	46bd      	mov	sp, r7
 80076d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076dc:	51eb851f 	.word	0x51eb851f

080076e0 <atoi>:
 80076e0:	220a      	movs	r2, #10
 80076e2:	2100      	movs	r1, #0
 80076e4:	f000 b87a 	b.w	80077dc <strtol>

080076e8 <_strtol_l.constprop.0>:
 80076e8:	2b24      	cmp	r3, #36	@ 0x24
 80076ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ee:	4686      	mov	lr, r0
 80076f0:	4690      	mov	r8, r2
 80076f2:	d801      	bhi.n	80076f8 <_strtol_l.constprop.0+0x10>
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d106      	bne.n	8007706 <_strtol_l.constprop.0+0x1e>
 80076f8:	f000 fe6a 	bl	80083d0 <__errno>
 80076fc:	2316      	movs	r3, #22
 80076fe:	6003      	str	r3, [r0, #0]
 8007700:	2000      	movs	r0, #0
 8007702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007706:	4834      	ldr	r0, [pc, #208]	@ (80077d8 <_strtol_l.constprop.0+0xf0>)
 8007708:	460d      	mov	r5, r1
 800770a:	462a      	mov	r2, r5
 800770c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007710:	5d06      	ldrb	r6, [r0, r4]
 8007712:	f016 0608 	ands.w	r6, r6, #8
 8007716:	d1f8      	bne.n	800770a <_strtol_l.constprop.0+0x22>
 8007718:	2c2d      	cmp	r4, #45	@ 0x2d
 800771a:	d12d      	bne.n	8007778 <_strtol_l.constprop.0+0x90>
 800771c:	782c      	ldrb	r4, [r5, #0]
 800771e:	2601      	movs	r6, #1
 8007720:	1c95      	adds	r5, r2, #2
 8007722:	f033 0210 	bics.w	r2, r3, #16
 8007726:	d109      	bne.n	800773c <_strtol_l.constprop.0+0x54>
 8007728:	2c30      	cmp	r4, #48	@ 0x30
 800772a:	d12a      	bne.n	8007782 <_strtol_l.constprop.0+0x9a>
 800772c:	782a      	ldrb	r2, [r5, #0]
 800772e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007732:	2a58      	cmp	r2, #88	@ 0x58
 8007734:	d125      	bne.n	8007782 <_strtol_l.constprop.0+0x9a>
 8007736:	786c      	ldrb	r4, [r5, #1]
 8007738:	2310      	movs	r3, #16
 800773a:	3502      	adds	r5, #2
 800773c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007740:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007744:	2200      	movs	r2, #0
 8007746:	fbbc f9f3 	udiv	r9, ip, r3
 800774a:	4610      	mov	r0, r2
 800774c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007750:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007754:	2f09      	cmp	r7, #9
 8007756:	d81b      	bhi.n	8007790 <_strtol_l.constprop.0+0xa8>
 8007758:	463c      	mov	r4, r7
 800775a:	42a3      	cmp	r3, r4
 800775c:	dd27      	ble.n	80077ae <_strtol_l.constprop.0+0xc6>
 800775e:	1c57      	adds	r7, r2, #1
 8007760:	d007      	beq.n	8007772 <_strtol_l.constprop.0+0x8a>
 8007762:	4581      	cmp	r9, r0
 8007764:	d320      	bcc.n	80077a8 <_strtol_l.constprop.0+0xc0>
 8007766:	d101      	bne.n	800776c <_strtol_l.constprop.0+0x84>
 8007768:	45a2      	cmp	sl, r4
 800776a:	db1d      	blt.n	80077a8 <_strtol_l.constprop.0+0xc0>
 800776c:	fb00 4003 	mla	r0, r0, r3, r4
 8007770:	2201      	movs	r2, #1
 8007772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007776:	e7eb      	b.n	8007750 <_strtol_l.constprop.0+0x68>
 8007778:	2c2b      	cmp	r4, #43	@ 0x2b
 800777a:	bf04      	itt	eq
 800777c:	782c      	ldrbeq	r4, [r5, #0]
 800777e:	1c95      	addeq	r5, r2, #2
 8007780:	e7cf      	b.n	8007722 <_strtol_l.constprop.0+0x3a>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1da      	bne.n	800773c <_strtol_l.constprop.0+0x54>
 8007786:	2c30      	cmp	r4, #48	@ 0x30
 8007788:	bf0c      	ite	eq
 800778a:	2308      	moveq	r3, #8
 800778c:	230a      	movne	r3, #10
 800778e:	e7d5      	b.n	800773c <_strtol_l.constprop.0+0x54>
 8007790:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007794:	2f19      	cmp	r7, #25
 8007796:	d801      	bhi.n	800779c <_strtol_l.constprop.0+0xb4>
 8007798:	3c37      	subs	r4, #55	@ 0x37
 800779a:	e7de      	b.n	800775a <_strtol_l.constprop.0+0x72>
 800779c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80077a0:	2f19      	cmp	r7, #25
 80077a2:	d804      	bhi.n	80077ae <_strtol_l.constprop.0+0xc6>
 80077a4:	3c57      	subs	r4, #87	@ 0x57
 80077a6:	e7d8      	b.n	800775a <_strtol_l.constprop.0+0x72>
 80077a8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ac:	e7e1      	b.n	8007772 <_strtol_l.constprop.0+0x8a>
 80077ae:	1c53      	adds	r3, r2, #1
 80077b0:	d108      	bne.n	80077c4 <_strtol_l.constprop.0+0xdc>
 80077b2:	2322      	movs	r3, #34	@ 0x22
 80077b4:	f8ce 3000 	str.w	r3, [lr]
 80077b8:	4660      	mov	r0, ip
 80077ba:	f1b8 0f00 	cmp.w	r8, #0
 80077be:	d0a0      	beq.n	8007702 <_strtol_l.constprop.0+0x1a>
 80077c0:	1e69      	subs	r1, r5, #1
 80077c2:	e006      	b.n	80077d2 <_strtol_l.constprop.0+0xea>
 80077c4:	b106      	cbz	r6, 80077c8 <_strtol_l.constprop.0+0xe0>
 80077c6:	4240      	negs	r0, r0
 80077c8:	f1b8 0f00 	cmp.w	r8, #0
 80077cc:	d099      	beq.n	8007702 <_strtol_l.constprop.0+0x1a>
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d1f6      	bne.n	80077c0 <_strtol_l.constprop.0+0xd8>
 80077d2:	f8c8 1000 	str.w	r1, [r8]
 80077d6:	e794      	b.n	8007702 <_strtol_l.constprop.0+0x1a>
 80077d8:	0800cee5 	.word	0x0800cee5

080077dc <strtol>:
 80077dc:	4613      	mov	r3, r2
 80077de:	460a      	mov	r2, r1
 80077e0:	4601      	mov	r1, r0
 80077e2:	4802      	ldr	r0, [pc, #8]	@ (80077ec <strtol+0x10>)
 80077e4:	6800      	ldr	r0, [r0, #0]
 80077e6:	f7ff bf7f 	b.w	80076e8 <_strtol_l.constprop.0>
 80077ea:	bf00      	nop
 80077ec:	20000030 	.word	0x20000030

080077f0 <__cvt>:
 80077f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f4:	ec57 6b10 	vmov	r6, r7, d0
 80077f8:	2f00      	cmp	r7, #0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4619      	mov	r1, r3
 80077fe:	463b      	mov	r3, r7
 8007800:	bfbb      	ittet	lt
 8007802:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007806:	461f      	movlt	r7, r3
 8007808:	2300      	movge	r3, #0
 800780a:	232d      	movlt	r3, #45	@ 0x2d
 800780c:	700b      	strb	r3, [r1, #0]
 800780e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007810:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007814:	4691      	mov	r9, r2
 8007816:	f023 0820 	bic.w	r8, r3, #32
 800781a:	bfbc      	itt	lt
 800781c:	4632      	movlt	r2, r6
 800781e:	4616      	movlt	r6, r2
 8007820:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007824:	d005      	beq.n	8007832 <__cvt+0x42>
 8007826:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800782a:	d100      	bne.n	800782e <__cvt+0x3e>
 800782c:	3401      	adds	r4, #1
 800782e:	2102      	movs	r1, #2
 8007830:	e000      	b.n	8007834 <__cvt+0x44>
 8007832:	2103      	movs	r1, #3
 8007834:	ab03      	add	r3, sp, #12
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	ab02      	add	r3, sp, #8
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	ec47 6b10 	vmov	d0, r6, r7
 8007840:	4653      	mov	r3, sl
 8007842:	4622      	mov	r2, r4
 8007844:	f000 fe88 	bl	8008558 <_dtoa_r>
 8007848:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800784c:	4605      	mov	r5, r0
 800784e:	d119      	bne.n	8007884 <__cvt+0x94>
 8007850:	f019 0f01 	tst.w	r9, #1
 8007854:	d00e      	beq.n	8007874 <__cvt+0x84>
 8007856:	eb00 0904 	add.w	r9, r0, r4
 800785a:	2200      	movs	r2, #0
 800785c:	2300      	movs	r3, #0
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	f7f9 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8007866:	b108      	cbz	r0, 800786c <__cvt+0x7c>
 8007868:	f8cd 900c 	str.w	r9, [sp, #12]
 800786c:	2230      	movs	r2, #48	@ 0x30
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	454b      	cmp	r3, r9
 8007872:	d31e      	bcc.n	80078b2 <__cvt+0xc2>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007878:	1b5b      	subs	r3, r3, r5
 800787a:	4628      	mov	r0, r5
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	b004      	add	sp, #16
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007888:	eb00 0904 	add.w	r9, r0, r4
 800788c:	d1e5      	bne.n	800785a <__cvt+0x6a>
 800788e:	7803      	ldrb	r3, [r0, #0]
 8007890:	2b30      	cmp	r3, #48	@ 0x30
 8007892:	d10a      	bne.n	80078aa <__cvt+0xba>
 8007894:	2200      	movs	r2, #0
 8007896:	2300      	movs	r3, #0
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f9 f914 	bl	8000ac8 <__aeabi_dcmpeq>
 80078a0:	b918      	cbnz	r0, 80078aa <__cvt+0xba>
 80078a2:	f1c4 0401 	rsb	r4, r4, #1
 80078a6:	f8ca 4000 	str.w	r4, [sl]
 80078aa:	f8da 3000 	ldr.w	r3, [sl]
 80078ae:	4499      	add	r9, r3
 80078b0:	e7d3      	b.n	800785a <__cvt+0x6a>
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	9103      	str	r1, [sp, #12]
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	e7d9      	b.n	800786e <__cvt+0x7e>

080078ba <__exponent>:
 80078ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078bc:	2900      	cmp	r1, #0
 80078be:	bfba      	itte	lt
 80078c0:	4249      	neglt	r1, r1
 80078c2:	232d      	movlt	r3, #45	@ 0x2d
 80078c4:	232b      	movge	r3, #43	@ 0x2b
 80078c6:	2909      	cmp	r1, #9
 80078c8:	7002      	strb	r2, [r0, #0]
 80078ca:	7043      	strb	r3, [r0, #1]
 80078cc:	dd29      	ble.n	8007922 <__exponent+0x68>
 80078ce:	f10d 0307 	add.w	r3, sp, #7
 80078d2:	461d      	mov	r5, r3
 80078d4:	270a      	movs	r7, #10
 80078d6:	461a      	mov	r2, r3
 80078d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80078dc:	fb07 1416 	mls	r4, r7, r6, r1
 80078e0:	3430      	adds	r4, #48	@ 0x30
 80078e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078e6:	460c      	mov	r4, r1
 80078e8:	2c63      	cmp	r4, #99	@ 0x63
 80078ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ee:	4631      	mov	r1, r6
 80078f0:	dcf1      	bgt.n	80078d6 <__exponent+0x1c>
 80078f2:	3130      	adds	r1, #48	@ 0x30
 80078f4:	1e94      	subs	r4, r2, #2
 80078f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078fa:	1c41      	adds	r1, r0, #1
 80078fc:	4623      	mov	r3, r4
 80078fe:	42ab      	cmp	r3, r5
 8007900:	d30a      	bcc.n	8007918 <__exponent+0x5e>
 8007902:	f10d 0309 	add.w	r3, sp, #9
 8007906:	1a9b      	subs	r3, r3, r2
 8007908:	42ac      	cmp	r4, r5
 800790a:	bf88      	it	hi
 800790c:	2300      	movhi	r3, #0
 800790e:	3302      	adds	r3, #2
 8007910:	4403      	add	r3, r0
 8007912:	1a18      	subs	r0, r3, r0
 8007914:	b003      	add	sp, #12
 8007916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007918:	f813 6b01 	ldrb.w	r6, [r3], #1
 800791c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007920:	e7ed      	b.n	80078fe <__exponent+0x44>
 8007922:	2330      	movs	r3, #48	@ 0x30
 8007924:	3130      	adds	r1, #48	@ 0x30
 8007926:	7083      	strb	r3, [r0, #2]
 8007928:	70c1      	strb	r1, [r0, #3]
 800792a:	1d03      	adds	r3, r0, #4
 800792c:	e7f1      	b.n	8007912 <__exponent+0x58>
	...

08007930 <_printf_float>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	b08d      	sub	sp, #52	@ 0x34
 8007936:	460c      	mov	r4, r1
 8007938:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800793c:	4616      	mov	r6, r2
 800793e:	461f      	mov	r7, r3
 8007940:	4605      	mov	r5, r0
 8007942:	f000 fcfb 	bl	800833c <_localeconv_r>
 8007946:	6803      	ldr	r3, [r0, #0]
 8007948:	9304      	str	r3, [sp, #16]
 800794a:	4618      	mov	r0, r3
 800794c:	f7f8 fc90 	bl	8000270 <strlen>
 8007950:	2300      	movs	r3, #0
 8007952:	930a      	str	r3, [sp, #40]	@ 0x28
 8007954:	f8d8 3000 	ldr.w	r3, [r8]
 8007958:	9005      	str	r0, [sp, #20]
 800795a:	3307      	adds	r3, #7
 800795c:	f023 0307 	bic.w	r3, r3, #7
 8007960:	f103 0208 	add.w	r2, r3, #8
 8007964:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007968:	f8d4 b000 	ldr.w	fp, [r4]
 800796c:	f8c8 2000 	str.w	r2, [r8]
 8007970:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007974:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007978:	9307      	str	r3, [sp, #28]
 800797a:	f8cd 8018 	str.w	r8, [sp, #24]
 800797e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007986:	4b9c      	ldr	r3, [pc, #624]	@ (8007bf8 <_printf_float+0x2c8>)
 8007988:	f04f 32ff 	mov.w	r2, #4294967295
 800798c:	f7f9 f8ce 	bl	8000b2c <__aeabi_dcmpun>
 8007990:	bb70      	cbnz	r0, 80079f0 <_printf_float+0xc0>
 8007992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007996:	4b98      	ldr	r3, [pc, #608]	@ (8007bf8 <_printf_float+0x2c8>)
 8007998:	f04f 32ff 	mov.w	r2, #4294967295
 800799c:	f7f9 f8a8 	bl	8000af0 <__aeabi_dcmple>
 80079a0:	bb30      	cbnz	r0, 80079f0 <_printf_float+0xc0>
 80079a2:	2200      	movs	r2, #0
 80079a4:	2300      	movs	r3, #0
 80079a6:	4640      	mov	r0, r8
 80079a8:	4649      	mov	r1, r9
 80079aa:	f7f9 f897 	bl	8000adc <__aeabi_dcmplt>
 80079ae:	b110      	cbz	r0, 80079b6 <_printf_float+0x86>
 80079b0:	232d      	movs	r3, #45	@ 0x2d
 80079b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079b6:	4a91      	ldr	r2, [pc, #580]	@ (8007bfc <_printf_float+0x2cc>)
 80079b8:	4b91      	ldr	r3, [pc, #580]	@ (8007c00 <_printf_float+0x2d0>)
 80079ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079be:	bf94      	ite	ls
 80079c0:	4690      	movls	r8, r2
 80079c2:	4698      	movhi	r8, r3
 80079c4:	2303      	movs	r3, #3
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	f02b 0304 	bic.w	r3, fp, #4
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	f04f 0900 	mov.w	r9, #0
 80079d2:	9700      	str	r7, [sp, #0]
 80079d4:	4633      	mov	r3, r6
 80079d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079d8:	4621      	mov	r1, r4
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 f9d2 	bl	8007d84 <_printf_common>
 80079e0:	3001      	adds	r0, #1
 80079e2:	f040 808d 	bne.w	8007b00 <_printf_float+0x1d0>
 80079e6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ea:	b00d      	add	sp, #52	@ 0x34
 80079ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f0:	4642      	mov	r2, r8
 80079f2:	464b      	mov	r3, r9
 80079f4:	4640      	mov	r0, r8
 80079f6:	4649      	mov	r1, r9
 80079f8:	f7f9 f898 	bl	8000b2c <__aeabi_dcmpun>
 80079fc:	b140      	cbz	r0, 8007a10 <_printf_float+0xe0>
 80079fe:	464b      	mov	r3, r9
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bfbc      	itt	lt
 8007a04:	232d      	movlt	r3, #45	@ 0x2d
 8007a06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8007c04 <_printf_float+0x2d4>)
 8007a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8007c08 <_printf_float+0x2d8>)
 8007a0e:	e7d4      	b.n	80079ba <_printf_float+0x8a>
 8007a10:	6863      	ldr	r3, [r4, #4]
 8007a12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a16:	9206      	str	r2, [sp, #24]
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	d13b      	bne.n	8007a94 <_printf_float+0x164>
 8007a1c:	2306      	movs	r3, #6
 8007a1e:	6063      	str	r3, [r4, #4]
 8007a20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a24:	2300      	movs	r3, #0
 8007a26:	6022      	str	r2, [r4, #0]
 8007a28:	9303      	str	r3, [sp, #12]
 8007a2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a30:	ab09      	add	r3, sp, #36	@ 0x24
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	6861      	ldr	r1, [r4, #4]
 8007a36:	ec49 8b10 	vmov	d0, r8, r9
 8007a3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f7ff fed6 	bl	80077f0 <__cvt>
 8007a44:	9b06      	ldr	r3, [sp, #24]
 8007a46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a48:	2b47      	cmp	r3, #71	@ 0x47
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	d129      	bne.n	8007aa2 <_printf_float+0x172>
 8007a4e:	1cc8      	adds	r0, r1, #3
 8007a50:	db02      	blt.n	8007a58 <_printf_float+0x128>
 8007a52:	6863      	ldr	r3, [r4, #4]
 8007a54:	4299      	cmp	r1, r3
 8007a56:	dd41      	ble.n	8007adc <_printf_float+0x1ac>
 8007a58:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a5c:	fa5f fa8a 	uxtb.w	sl, sl
 8007a60:	3901      	subs	r1, #1
 8007a62:	4652      	mov	r2, sl
 8007a64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a68:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a6a:	f7ff ff26 	bl	80078ba <__exponent>
 8007a6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a70:	1813      	adds	r3, r2, r0
 8007a72:	2a01      	cmp	r2, #1
 8007a74:	4681      	mov	r9, r0
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	dc02      	bgt.n	8007a80 <_printf_float+0x150>
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	07d2      	lsls	r2, r2, #31
 8007a7e:	d501      	bpl.n	8007a84 <_printf_float+0x154>
 8007a80:	3301      	adds	r3, #1
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0a2      	beq.n	80079d2 <_printf_float+0xa2>
 8007a8c:	232d      	movs	r3, #45	@ 0x2d
 8007a8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a92:	e79e      	b.n	80079d2 <_printf_float+0xa2>
 8007a94:	9a06      	ldr	r2, [sp, #24]
 8007a96:	2a47      	cmp	r2, #71	@ 0x47
 8007a98:	d1c2      	bne.n	8007a20 <_printf_float+0xf0>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1c0      	bne.n	8007a20 <_printf_float+0xf0>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e7bd      	b.n	8007a1e <_printf_float+0xee>
 8007aa2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007aa6:	d9db      	bls.n	8007a60 <_printf_float+0x130>
 8007aa8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007aac:	d118      	bne.n	8007ae0 <_printf_float+0x1b0>
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	6863      	ldr	r3, [r4, #4]
 8007ab2:	dd0b      	ble.n	8007acc <_printf_float+0x19c>
 8007ab4:	6121      	str	r1, [r4, #16]
 8007ab6:	b913      	cbnz	r3, 8007abe <_printf_float+0x18e>
 8007ab8:	6822      	ldr	r2, [r4, #0]
 8007aba:	07d0      	lsls	r0, r2, #31
 8007abc:	d502      	bpl.n	8007ac4 <_printf_float+0x194>
 8007abe:	3301      	adds	r3, #1
 8007ac0:	440b      	add	r3, r1
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ac6:	f04f 0900 	mov.w	r9, #0
 8007aca:	e7db      	b.n	8007a84 <_printf_float+0x154>
 8007acc:	b913      	cbnz	r3, 8007ad4 <_printf_float+0x1a4>
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	07d2      	lsls	r2, r2, #31
 8007ad2:	d501      	bpl.n	8007ad8 <_printf_float+0x1a8>
 8007ad4:	3302      	adds	r3, #2
 8007ad6:	e7f4      	b.n	8007ac2 <_printf_float+0x192>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e7f2      	b.n	8007ac2 <_printf_float+0x192>
 8007adc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	db05      	blt.n	8007af2 <_printf_float+0x1c2>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	6121      	str	r1, [r4, #16]
 8007aea:	07d8      	lsls	r0, r3, #31
 8007aec:	d5ea      	bpl.n	8007ac4 <_printf_float+0x194>
 8007aee:	1c4b      	adds	r3, r1, #1
 8007af0:	e7e7      	b.n	8007ac2 <_printf_float+0x192>
 8007af2:	2900      	cmp	r1, #0
 8007af4:	bfd4      	ite	le
 8007af6:	f1c1 0202 	rsble	r2, r1, #2
 8007afa:	2201      	movgt	r2, #1
 8007afc:	4413      	add	r3, r2
 8007afe:	e7e0      	b.n	8007ac2 <_printf_float+0x192>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	055a      	lsls	r2, r3, #21
 8007b04:	d407      	bmi.n	8007b16 <_printf_float+0x1e6>
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	4642      	mov	r2, r8
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b8      	blx	r7
 8007b10:	3001      	adds	r0, #1
 8007b12:	d12b      	bne.n	8007b6c <_printf_float+0x23c>
 8007b14:	e767      	b.n	80079e6 <_printf_float+0xb6>
 8007b16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b1a:	f240 80dd 	bls.w	8007cd8 <_printf_float+0x3a8>
 8007b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b22:	2200      	movs	r2, #0
 8007b24:	2300      	movs	r3, #0
 8007b26:	f7f8 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d033      	beq.n	8007b96 <_printf_float+0x266>
 8007b2e:	4a37      	ldr	r2, [pc, #220]	@ (8007c0c <_printf_float+0x2dc>)
 8007b30:	2301      	movs	r3, #1
 8007b32:	4631      	mov	r1, r6
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b8      	blx	r7
 8007b38:	3001      	adds	r0, #1
 8007b3a:	f43f af54 	beq.w	80079e6 <_printf_float+0xb6>
 8007b3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b42:	4543      	cmp	r3, r8
 8007b44:	db02      	blt.n	8007b4c <_printf_float+0x21c>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	07d8      	lsls	r0, r3, #31
 8007b4a:	d50f      	bpl.n	8007b6c <_printf_float+0x23c>
 8007b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af45 	beq.w	80079e6 <_printf_float+0xb6>
 8007b5c:	f04f 0900 	mov.w	r9, #0
 8007b60:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b64:	f104 0a1a 	add.w	sl, r4, #26
 8007b68:	45c8      	cmp	r8, r9
 8007b6a:	dc09      	bgt.n	8007b80 <_printf_float+0x250>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	079b      	lsls	r3, r3, #30
 8007b70:	f100 8103 	bmi.w	8007d7a <_printf_float+0x44a>
 8007b74:	68e0      	ldr	r0, [r4, #12]
 8007b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b78:	4298      	cmp	r0, r3
 8007b7a:	bfb8      	it	lt
 8007b7c:	4618      	movlt	r0, r3
 8007b7e:	e734      	b.n	80079ea <_printf_float+0xba>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4652      	mov	r2, sl
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	f43f af2b 	beq.w	80079e6 <_printf_float+0xb6>
 8007b90:	f109 0901 	add.w	r9, r9, #1
 8007b94:	e7e8      	b.n	8007b68 <_printf_float+0x238>
 8007b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dc39      	bgt.n	8007c10 <_printf_float+0x2e0>
 8007b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8007c0c <_printf_float+0x2dc>)
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f af1d 	beq.w	80079e6 <_printf_float+0xb6>
 8007bac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007bb0:	ea59 0303 	orrs.w	r3, r9, r3
 8007bb4:	d102      	bne.n	8007bbc <_printf_float+0x28c>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	07d9      	lsls	r1, r3, #31
 8007bba:	d5d7      	bpl.n	8007b6c <_printf_float+0x23c>
 8007bbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f af0d 	beq.w	80079e6 <_printf_float+0xb6>
 8007bcc:	f04f 0a00 	mov.w	sl, #0
 8007bd0:	f104 0b1a 	add.w	fp, r4, #26
 8007bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd6:	425b      	negs	r3, r3
 8007bd8:	4553      	cmp	r3, sl
 8007bda:	dc01      	bgt.n	8007be0 <_printf_float+0x2b0>
 8007bdc:	464b      	mov	r3, r9
 8007bde:	e793      	b.n	8007b08 <_printf_float+0x1d8>
 8007be0:	2301      	movs	r3, #1
 8007be2:	465a      	mov	r2, fp
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	f43f aefb 	beq.w	80079e6 <_printf_float+0xb6>
 8007bf0:	f10a 0a01 	add.w	sl, sl, #1
 8007bf4:	e7ee      	b.n	8007bd4 <_printf_float+0x2a4>
 8007bf6:	bf00      	nop
 8007bf8:	7fefffff 	.word	0x7fefffff
 8007bfc:	0800cfe5 	.word	0x0800cfe5
 8007c00:	0800cfe9 	.word	0x0800cfe9
 8007c04:	0800cfed 	.word	0x0800cfed
 8007c08:	0800cff1 	.word	0x0800cff1
 8007c0c:	0800cff5 	.word	0x0800cff5
 8007c10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c16:	4553      	cmp	r3, sl
 8007c18:	bfa8      	it	ge
 8007c1a:	4653      	movge	r3, sl
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	4699      	mov	r9, r3
 8007c20:	dc36      	bgt.n	8007c90 <_printf_float+0x360>
 8007c22:	f04f 0b00 	mov.w	fp, #0
 8007c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c2a:	f104 021a 	add.w	r2, r4, #26
 8007c2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c30:	9306      	str	r3, [sp, #24]
 8007c32:	eba3 0309 	sub.w	r3, r3, r9
 8007c36:	455b      	cmp	r3, fp
 8007c38:	dc31      	bgt.n	8007c9e <_printf_float+0x36e>
 8007c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c3c:	459a      	cmp	sl, r3
 8007c3e:	dc3a      	bgt.n	8007cb6 <_printf_float+0x386>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	07da      	lsls	r2, r3, #31
 8007c44:	d437      	bmi.n	8007cb6 <_printf_float+0x386>
 8007c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c48:	ebaa 0903 	sub.w	r9, sl, r3
 8007c4c:	9b06      	ldr	r3, [sp, #24]
 8007c4e:	ebaa 0303 	sub.w	r3, sl, r3
 8007c52:	4599      	cmp	r9, r3
 8007c54:	bfa8      	it	ge
 8007c56:	4699      	movge	r9, r3
 8007c58:	f1b9 0f00 	cmp.w	r9, #0
 8007c5c:	dc33      	bgt.n	8007cc6 <_printf_float+0x396>
 8007c5e:	f04f 0800 	mov.w	r8, #0
 8007c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c66:	f104 0b1a 	add.w	fp, r4, #26
 8007c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007c70:	eba3 0309 	sub.w	r3, r3, r9
 8007c74:	4543      	cmp	r3, r8
 8007c76:	f77f af79 	ble.w	8007b6c <_printf_float+0x23c>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	465a      	mov	r2, fp
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f aeae 	beq.w	80079e6 <_printf_float+0xb6>
 8007c8a:	f108 0801 	add.w	r8, r8, #1
 8007c8e:	e7ec      	b.n	8007c6a <_printf_float+0x33a>
 8007c90:	4642      	mov	r2, r8
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d1c2      	bne.n	8007c22 <_printf_float+0x2f2>
 8007c9c:	e6a3      	b.n	80079e6 <_printf_float+0xb6>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	9206      	str	r2, [sp, #24]
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f43f ae9c 	beq.w	80079e6 <_printf_float+0xb6>
 8007cae:	9a06      	ldr	r2, [sp, #24]
 8007cb0:	f10b 0b01 	add.w	fp, fp, #1
 8007cb4:	e7bb      	b.n	8007c2e <_printf_float+0x2fe>
 8007cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d1c0      	bne.n	8007c46 <_printf_float+0x316>
 8007cc4:	e68f      	b.n	80079e6 <_printf_float+0xb6>
 8007cc6:	9a06      	ldr	r2, [sp, #24]
 8007cc8:	464b      	mov	r3, r9
 8007cca:	4442      	add	r2, r8
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b8      	blx	r7
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d1c3      	bne.n	8007c5e <_printf_float+0x32e>
 8007cd6:	e686      	b.n	80079e6 <_printf_float+0xb6>
 8007cd8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cdc:	f1ba 0f01 	cmp.w	sl, #1
 8007ce0:	dc01      	bgt.n	8007ce6 <_printf_float+0x3b6>
 8007ce2:	07db      	lsls	r3, r3, #31
 8007ce4:	d536      	bpl.n	8007d54 <_printf_float+0x424>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4642      	mov	r2, r8
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f ae78 	beq.w	80079e6 <_printf_float+0xb6>
 8007cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	f43f ae70 	beq.w	80079e6 <_printf_float+0xb6>
 8007d06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d12:	f7f8 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d16:	b9c0      	cbnz	r0, 8007d4a <_printf_float+0x41a>
 8007d18:	4653      	mov	r3, sl
 8007d1a:	f108 0201 	add.w	r2, r8, #1
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b8      	blx	r7
 8007d24:	3001      	adds	r0, #1
 8007d26:	d10c      	bne.n	8007d42 <_printf_float+0x412>
 8007d28:	e65d      	b.n	80079e6 <_printf_float+0xb6>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	465a      	mov	r2, fp
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4628      	mov	r0, r5
 8007d32:	47b8      	blx	r7
 8007d34:	3001      	adds	r0, #1
 8007d36:	f43f ae56 	beq.w	80079e6 <_printf_float+0xb6>
 8007d3a:	f108 0801 	add.w	r8, r8, #1
 8007d3e:	45d0      	cmp	r8, sl
 8007d40:	dbf3      	blt.n	8007d2a <_printf_float+0x3fa>
 8007d42:	464b      	mov	r3, r9
 8007d44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d48:	e6df      	b.n	8007b0a <_printf_float+0x1da>
 8007d4a:	f04f 0800 	mov.w	r8, #0
 8007d4e:	f104 0b1a 	add.w	fp, r4, #26
 8007d52:	e7f4      	b.n	8007d3e <_printf_float+0x40e>
 8007d54:	2301      	movs	r3, #1
 8007d56:	4642      	mov	r2, r8
 8007d58:	e7e1      	b.n	8007d1e <_printf_float+0x3ee>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	464a      	mov	r2, r9
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	47b8      	blx	r7
 8007d64:	3001      	adds	r0, #1
 8007d66:	f43f ae3e 	beq.w	80079e6 <_printf_float+0xb6>
 8007d6a:	f108 0801 	add.w	r8, r8, #1
 8007d6e:	68e3      	ldr	r3, [r4, #12]
 8007d70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d72:	1a5b      	subs	r3, r3, r1
 8007d74:	4543      	cmp	r3, r8
 8007d76:	dcf0      	bgt.n	8007d5a <_printf_float+0x42a>
 8007d78:	e6fc      	b.n	8007b74 <_printf_float+0x244>
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	f104 0919 	add.w	r9, r4, #25
 8007d82:	e7f4      	b.n	8007d6e <_printf_float+0x43e>

08007d84 <_printf_common>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	4616      	mov	r6, r2
 8007d8a:	4698      	mov	r8, r3
 8007d8c:	688a      	ldr	r2, [r1, #8]
 8007d8e:	690b      	ldr	r3, [r1, #16]
 8007d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d94:	4293      	cmp	r3, r2
 8007d96:	bfb8      	it	lt
 8007d98:	4613      	movlt	r3, r2
 8007d9a:	6033      	str	r3, [r6, #0]
 8007d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007da0:	4607      	mov	r7, r0
 8007da2:	460c      	mov	r4, r1
 8007da4:	b10a      	cbz	r2, 8007daa <_printf_common+0x26>
 8007da6:	3301      	adds	r3, #1
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	0699      	lsls	r1, r3, #26
 8007dae:	bf42      	ittt	mi
 8007db0:	6833      	ldrmi	r3, [r6, #0]
 8007db2:	3302      	addmi	r3, #2
 8007db4:	6033      	strmi	r3, [r6, #0]
 8007db6:	6825      	ldr	r5, [r4, #0]
 8007db8:	f015 0506 	ands.w	r5, r5, #6
 8007dbc:	d106      	bne.n	8007dcc <_printf_common+0x48>
 8007dbe:	f104 0a19 	add.w	sl, r4, #25
 8007dc2:	68e3      	ldr	r3, [r4, #12]
 8007dc4:	6832      	ldr	r2, [r6, #0]
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	dc26      	bgt.n	8007e1a <_printf_common+0x96>
 8007dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dd0:	6822      	ldr	r2, [r4, #0]
 8007dd2:	3b00      	subs	r3, #0
 8007dd4:	bf18      	it	ne
 8007dd6:	2301      	movne	r3, #1
 8007dd8:	0692      	lsls	r2, r2, #26
 8007dda:	d42b      	bmi.n	8007e34 <_printf_common+0xb0>
 8007ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007de0:	4641      	mov	r1, r8
 8007de2:	4638      	mov	r0, r7
 8007de4:	47c8      	blx	r9
 8007de6:	3001      	adds	r0, #1
 8007de8:	d01e      	beq.n	8007e28 <_printf_common+0xa4>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	6922      	ldr	r2, [r4, #16]
 8007dee:	f003 0306 	and.w	r3, r3, #6
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	bf02      	ittt	eq
 8007df6:	68e5      	ldreq	r5, [r4, #12]
 8007df8:	6833      	ldreq	r3, [r6, #0]
 8007dfa:	1aed      	subeq	r5, r5, r3
 8007dfc:	68a3      	ldr	r3, [r4, #8]
 8007dfe:	bf0c      	ite	eq
 8007e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e04:	2500      	movne	r5, #0
 8007e06:	4293      	cmp	r3, r2
 8007e08:	bfc4      	itt	gt
 8007e0a:	1a9b      	subgt	r3, r3, r2
 8007e0c:	18ed      	addgt	r5, r5, r3
 8007e0e:	2600      	movs	r6, #0
 8007e10:	341a      	adds	r4, #26
 8007e12:	42b5      	cmp	r5, r6
 8007e14:	d11a      	bne.n	8007e4c <_printf_common+0xc8>
 8007e16:	2000      	movs	r0, #0
 8007e18:	e008      	b.n	8007e2c <_printf_common+0xa8>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4652      	mov	r2, sl
 8007e1e:	4641      	mov	r1, r8
 8007e20:	4638      	mov	r0, r7
 8007e22:	47c8      	blx	r9
 8007e24:	3001      	adds	r0, #1
 8007e26:	d103      	bne.n	8007e30 <_printf_common+0xac>
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e30:	3501      	adds	r5, #1
 8007e32:	e7c6      	b.n	8007dc2 <_printf_common+0x3e>
 8007e34:	18e1      	adds	r1, r4, r3
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	2030      	movs	r0, #48	@ 0x30
 8007e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e3e:	4422      	add	r2, r4
 8007e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e48:	3302      	adds	r3, #2
 8007e4a:	e7c7      	b.n	8007ddc <_printf_common+0x58>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4622      	mov	r2, r4
 8007e50:	4641      	mov	r1, r8
 8007e52:	4638      	mov	r0, r7
 8007e54:	47c8      	blx	r9
 8007e56:	3001      	adds	r0, #1
 8007e58:	d0e6      	beq.n	8007e28 <_printf_common+0xa4>
 8007e5a:	3601      	adds	r6, #1
 8007e5c:	e7d9      	b.n	8007e12 <_printf_common+0x8e>
	...

08007e60 <_printf_i>:
 8007e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e64:	7e0f      	ldrb	r7, [r1, #24]
 8007e66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e68:	2f78      	cmp	r7, #120	@ 0x78
 8007e6a:	4691      	mov	r9, r2
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	469a      	mov	sl, r3
 8007e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e76:	d807      	bhi.n	8007e88 <_printf_i+0x28>
 8007e78:	2f62      	cmp	r7, #98	@ 0x62
 8007e7a:	d80a      	bhi.n	8007e92 <_printf_i+0x32>
 8007e7c:	2f00      	cmp	r7, #0
 8007e7e:	f000 80d2 	beq.w	8008026 <_printf_i+0x1c6>
 8007e82:	2f58      	cmp	r7, #88	@ 0x58
 8007e84:	f000 80b9 	beq.w	8007ffa <_printf_i+0x19a>
 8007e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e90:	e03a      	b.n	8007f08 <_printf_i+0xa8>
 8007e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e96:	2b15      	cmp	r3, #21
 8007e98:	d8f6      	bhi.n	8007e88 <_printf_i+0x28>
 8007e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8007ea0 <_printf_i+0x40>)
 8007e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ea0:	08007ef9 	.word	0x08007ef9
 8007ea4:	08007f0d 	.word	0x08007f0d
 8007ea8:	08007e89 	.word	0x08007e89
 8007eac:	08007e89 	.word	0x08007e89
 8007eb0:	08007e89 	.word	0x08007e89
 8007eb4:	08007e89 	.word	0x08007e89
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08007e89 	.word	0x08007e89
 8007ec0:	08007e89 	.word	0x08007e89
 8007ec4:	08007e89 	.word	0x08007e89
 8007ec8:	08007e89 	.word	0x08007e89
 8007ecc:	0800800d 	.word	0x0800800d
 8007ed0:	08007f37 	.word	0x08007f37
 8007ed4:	08007fc7 	.word	0x08007fc7
 8007ed8:	08007e89 	.word	0x08007e89
 8007edc:	08007e89 	.word	0x08007e89
 8007ee0:	0800802f 	.word	0x0800802f
 8007ee4:	08007e89 	.word	0x08007e89
 8007ee8:	08007f37 	.word	0x08007f37
 8007eec:	08007e89 	.word	0x08007e89
 8007ef0:	08007e89 	.word	0x08007e89
 8007ef4:	08007fcf 	.word	0x08007fcf
 8007ef8:	6833      	ldr	r3, [r6, #0]
 8007efa:	1d1a      	adds	r2, r3, #4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6032      	str	r2, [r6, #0]
 8007f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e09d      	b.n	8008048 <_printf_i+0x1e8>
 8007f0c:	6833      	ldr	r3, [r6, #0]
 8007f0e:	6820      	ldr	r0, [r4, #0]
 8007f10:	1d19      	adds	r1, r3, #4
 8007f12:	6031      	str	r1, [r6, #0]
 8007f14:	0606      	lsls	r6, r0, #24
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0xbc>
 8007f18:	681d      	ldr	r5, [r3, #0]
 8007f1a:	e003      	b.n	8007f24 <_printf_i+0xc4>
 8007f1c:	0645      	lsls	r5, r0, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0xb8>
 8007f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f24:	2d00      	cmp	r5, #0
 8007f26:	da03      	bge.n	8007f30 <_printf_i+0xd0>
 8007f28:	232d      	movs	r3, #45	@ 0x2d
 8007f2a:	426d      	negs	r5, r5
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f30:	4859      	ldr	r0, [pc, #356]	@ (8008098 <_printf_i+0x238>)
 8007f32:	230a      	movs	r3, #10
 8007f34:	e011      	b.n	8007f5a <_printf_i+0xfa>
 8007f36:	6821      	ldr	r1, [r4, #0]
 8007f38:	6833      	ldr	r3, [r6, #0]
 8007f3a:	0608      	lsls	r0, r1, #24
 8007f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f40:	d402      	bmi.n	8007f48 <_printf_i+0xe8>
 8007f42:	0649      	lsls	r1, r1, #25
 8007f44:	bf48      	it	mi
 8007f46:	b2ad      	uxthmi	r5, r5
 8007f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f4a:	4853      	ldr	r0, [pc, #332]	@ (8008098 <_printf_i+0x238>)
 8007f4c:	6033      	str	r3, [r6, #0]
 8007f4e:	bf14      	ite	ne
 8007f50:	230a      	movne	r3, #10
 8007f52:	2308      	moveq	r3, #8
 8007f54:	2100      	movs	r1, #0
 8007f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f5a:	6866      	ldr	r6, [r4, #4]
 8007f5c:	60a6      	str	r6, [r4, #8]
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	bfa2      	ittt	ge
 8007f62:	6821      	ldrge	r1, [r4, #0]
 8007f64:	f021 0104 	bicge.w	r1, r1, #4
 8007f68:	6021      	strge	r1, [r4, #0]
 8007f6a:	b90d      	cbnz	r5, 8007f70 <_printf_i+0x110>
 8007f6c:	2e00      	cmp	r6, #0
 8007f6e:	d04b      	beq.n	8008008 <_printf_i+0x1a8>
 8007f70:	4616      	mov	r6, r2
 8007f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f76:	fb03 5711 	mls	r7, r3, r1, r5
 8007f7a:	5dc7      	ldrb	r7, [r0, r7]
 8007f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f80:	462f      	mov	r7, r5
 8007f82:	42bb      	cmp	r3, r7
 8007f84:	460d      	mov	r5, r1
 8007f86:	d9f4      	bls.n	8007f72 <_printf_i+0x112>
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d10b      	bne.n	8007fa4 <_printf_i+0x144>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	07df      	lsls	r7, r3, #31
 8007f90:	d508      	bpl.n	8007fa4 <_printf_i+0x144>
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	6861      	ldr	r1, [r4, #4]
 8007f96:	4299      	cmp	r1, r3
 8007f98:	bfde      	ittt	le
 8007f9a:	2330      	movle	r3, #48	@ 0x30
 8007f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fa4:	1b92      	subs	r2, r2, r6
 8007fa6:	6122      	str	r2, [r4, #16]
 8007fa8:	f8cd a000 	str.w	sl, [sp]
 8007fac:	464b      	mov	r3, r9
 8007fae:	aa03      	add	r2, sp, #12
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	f7ff fee6 	bl	8007d84 <_printf_common>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d14a      	bne.n	8008052 <_printf_i+0x1f2>
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	b004      	add	sp, #16
 8007fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	f043 0320 	orr.w	r3, r3, #32
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	4833      	ldr	r0, [pc, #204]	@ (800809c <_printf_i+0x23c>)
 8007fd0:	2778      	movs	r7, #120	@ 0x78
 8007fd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	6831      	ldr	r1, [r6, #0]
 8007fda:	061f      	lsls	r7, r3, #24
 8007fdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fe0:	d402      	bmi.n	8007fe8 <_printf_i+0x188>
 8007fe2:	065f      	lsls	r7, r3, #25
 8007fe4:	bf48      	it	mi
 8007fe6:	b2ad      	uxthmi	r5, r5
 8007fe8:	6031      	str	r1, [r6, #0]
 8007fea:	07d9      	lsls	r1, r3, #31
 8007fec:	bf44      	itt	mi
 8007fee:	f043 0320 	orrmi.w	r3, r3, #32
 8007ff2:	6023      	strmi	r3, [r4, #0]
 8007ff4:	b11d      	cbz	r5, 8007ffe <_printf_i+0x19e>
 8007ff6:	2310      	movs	r3, #16
 8007ff8:	e7ac      	b.n	8007f54 <_printf_i+0xf4>
 8007ffa:	4827      	ldr	r0, [pc, #156]	@ (8008098 <_printf_i+0x238>)
 8007ffc:	e7e9      	b.n	8007fd2 <_printf_i+0x172>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	f023 0320 	bic.w	r3, r3, #32
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	e7f6      	b.n	8007ff6 <_printf_i+0x196>
 8008008:	4616      	mov	r6, r2
 800800a:	e7bd      	b.n	8007f88 <_printf_i+0x128>
 800800c:	6833      	ldr	r3, [r6, #0]
 800800e:	6825      	ldr	r5, [r4, #0]
 8008010:	6961      	ldr	r1, [r4, #20]
 8008012:	1d18      	adds	r0, r3, #4
 8008014:	6030      	str	r0, [r6, #0]
 8008016:	062e      	lsls	r6, r5, #24
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	d501      	bpl.n	8008020 <_printf_i+0x1c0>
 800801c:	6019      	str	r1, [r3, #0]
 800801e:	e002      	b.n	8008026 <_printf_i+0x1c6>
 8008020:	0668      	lsls	r0, r5, #25
 8008022:	d5fb      	bpl.n	800801c <_printf_i+0x1bc>
 8008024:	8019      	strh	r1, [r3, #0]
 8008026:	2300      	movs	r3, #0
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	4616      	mov	r6, r2
 800802c:	e7bc      	b.n	8007fa8 <_printf_i+0x148>
 800802e:	6833      	ldr	r3, [r6, #0]
 8008030:	1d1a      	adds	r2, r3, #4
 8008032:	6032      	str	r2, [r6, #0]
 8008034:	681e      	ldr	r6, [r3, #0]
 8008036:	6862      	ldr	r2, [r4, #4]
 8008038:	2100      	movs	r1, #0
 800803a:	4630      	mov	r0, r6
 800803c:	f7f8 f8c8 	bl	80001d0 <memchr>
 8008040:	b108      	cbz	r0, 8008046 <_printf_i+0x1e6>
 8008042:	1b80      	subs	r0, r0, r6
 8008044:	6060      	str	r0, [r4, #4]
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	2300      	movs	r3, #0
 800804c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008050:	e7aa      	b.n	8007fa8 <_printf_i+0x148>
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	4632      	mov	r2, r6
 8008056:	4649      	mov	r1, r9
 8008058:	4640      	mov	r0, r8
 800805a:	47d0      	blx	sl
 800805c:	3001      	adds	r0, #1
 800805e:	d0ad      	beq.n	8007fbc <_printf_i+0x15c>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	079b      	lsls	r3, r3, #30
 8008064:	d413      	bmi.n	800808e <_printf_i+0x22e>
 8008066:	68e0      	ldr	r0, [r4, #12]
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	4298      	cmp	r0, r3
 800806c:	bfb8      	it	lt
 800806e:	4618      	movlt	r0, r3
 8008070:	e7a6      	b.n	8007fc0 <_printf_i+0x160>
 8008072:	2301      	movs	r3, #1
 8008074:	4632      	mov	r2, r6
 8008076:	4649      	mov	r1, r9
 8008078:	4640      	mov	r0, r8
 800807a:	47d0      	blx	sl
 800807c:	3001      	adds	r0, #1
 800807e:	d09d      	beq.n	8007fbc <_printf_i+0x15c>
 8008080:	3501      	adds	r5, #1
 8008082:	68e3      	ldr	r3, [r4, #12]
 8008084:	9903      	ldr	r1, [sp, #12]
 8008086:	1a5b      	subs	r3, r3, r1
 8008088:	42ab      	cmp	r3, r5
 800808a:	dcf2      	bgt.n	8008072 <_printf_i+0x212>
 800808c:	e7eb      	b.n	8008066 <_printf_i+0x206>
 800808e:	2500      	movs	r5, #0
 8008090:	f104 0619 	add.w	r6, r4, #25
 8008094:	e7f5      	b.n	8008082 <_printf_i+0x222>
 8008096:	bf00      	nop
 8008098:	0800cff7 	.word	0x0800cff7
 800809c:	0800d008 	.word	0x0800d008

080080a0 <std>:
 80080a0:	2300      	movs	r3, #0
 80080a2:	b510      	push	{r4, lr}
 80080a4:	4604      	mov	r4, r0
 80080a6:	e9c0 3300 	strd	r3, r3, [r0]
 80080aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ae:	6083      	str	r3, [r0, #8]
 80080b0:	8181      	strh	r1, [r0, #12]
 80080b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80080b4:	81c2      	strh	r2, [r0, #14]
 80080b6:	6183      	str	r3, [r0, #24]
 80080b8:	4619      	mov	r1, r3
 80080ba:	2208      	movs	r2, #8
 80080bc:	305c      	adds	r0, #92	@ 0x5c
 80080be:	f000 f928 	bl	8008312 <memset>
 80080c2:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <std+0x58>)
 80080c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80080c6:	4b0d      	ldr	r3, [pc, #52]	@ (80080fc <std+0x5c>)
 80080c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008100 <std+0x60>)
 80080cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <std+0x64>)
 80080d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80080d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <std+0x68>)
 80080d4:	6224      	str	r4, [r4, #32]
 80080d6:	429c      	cmp	r4, r3
 80080d8:	d006      	beq.n	80080e8 <std+0x48>
 80080da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080de:	4294      	cmp	r4, r2
 80080e0:	d002      	beq.n	80080e8 <std+0x48>
 80080e2:	33d0      	adds	r3, #208	@ 0xd0
 80080e4:	429c      	cmp	r4, r3
 80080e6:	d105      	bne.n	80080f4 <std+0x54>
 80080e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f0:	f000 b998 	b.w	8008424 <__retarget_lock_init_recursive>
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	bf00      	nop
 80080f8:	0800828d 	.word	0x0800828d
 80080fc:	080082af 	.word	0x080082af
 8008100:	080082e7 	.word	0x080082e7
 8008104:	0800830b 	.word	0x0800830b
 8008108:	20000790 	.word	0x20000790

0800810c <stdio_exit_handler>:
 800810c:	4a02      	ldr	r2, [pc, #8]	@ (8008118 <stdio_exit_handler+0xc>)
 800810e:	4903      	ldr	r1, [pc, #12]	@ (800811c <stdio_exit_handler+0x10>)
 8008110:	4803      	ldr	r0, [pc, #12]	@ (8008120 <stdio_exit_handler+0x14>)
 8008112:	f000 b869 	b.w	80081e8 <_fwalk_sglue>
 8008116:	bf00      	nop
 8008118:	20000024 	.word	0x20000024
 800811c:	08009d9d 	.word	0x08009d9d
 8008120:	20000034 	.word	0x20000034

08008124 <cleanup_stdio>:
 8008124:	6841      	ldr	r1, [r0, #4]
 8008126:	4b0c      	ldr	r3, [pc, #48]	@ (8008158 <cleanup_stdio+0x34>)
 8008128:	4299      	cmp	r1, r3
 800812a:	b510      	push	{r4, lr}
 800812c:	4604      	mov	r4, r0
 800812e:	d001      	beq.n	8008134 <cleanup_stdio+0x10>
 8008130:	f001 fe34 	bl	8009d9c <_fflush_r>
 8008134:	68a1      	ldr	r1, [r4, #8]
 8008136:	4b09      	ldr	r3, [pc, #36]	@ (800815c <cleanup_stdio+0x38>)
 8008138:	4299      	cmp	r1, r3
 800813a:	d002      	beq.n	8008142 <cleanup_stdio+0x1e>
 800813c:	4620      	mov	r0, r4
 800813e:	f001 fe2d 	bl	8009d9c <_fflush_r>
 8008142:	68e1      	ldr	r1, [r4, #12]
 8008144:	4b06      	ldr	r3, [pc, #24]	@ (8008160 <cleanup_stdio+0x3c>)
 8008146:	4299      	cmp	r1, r3
 8008148:	d004      	beq.n	8008154 <cleanup_stdio+0x30>
 800814a:	4620      	mov	r0, r4
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	f001 be24 	b.w	8009d9c <_fflush_r>
 8008154:	bd10      	pop	{r4, pc}
 8008156:	bf00      	nop
 8008158:	20000790 	.word	0x20000790
 800815c:	200007f8 	.word	0x200007f8
 8008160:	20000860 	.word	0x20000860

08008164 <global_stdio_init.part.0>:
 8008164:	b510      	push	{r4, lr}
 8008166:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <global_stdio_init.part.0+0x30>)
 8008168:	4c0b      	ldr	r4, [pc, #44]	@ (8008198 <global_stdio_init.part.0+0x34>)
 800816a:	4a0c      	ldr	r2, [pc, #48]	@ (800819c <global_stdio_init.part.0+0x38>)
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	4620      	mov	r0, r4
 8008170:	2200      	movs	r2, #0
 8008172:	2104      	movs	r1, #4
 8008174:	f7ff ff94 	bl	80080a0 <std>
 8008178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800817c:	2201      	movs	r2, #1
 800817e:	2109      	movs	r1, #9
 8008180:	f7ff ff8e 	bl	80080a0 <std>
 8008184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008188:	2202      	movs	r2, #2
 800818a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800818e:	2112      	movs	r1, #18
 8008190:	f7ff bf86 	b.w	80080a0 <std>
 8008194:	200008c8 	.word	0x200008c8
 8008198:	20000790 	.word	0x20000790
 800819c:	0800810d 	.word	0x0800810d

080081a0 <__sfp_lock_acquire>:
 80081a0:	4801      	ldr	r0, [pc, #4]	@ (80081a8 <__sfp_lock_acquire+0x8>)
 80081a2:	f000 b940 	b.w	8008426 <__retarget_lock_acquire_recursive>
 80081a6:	bf00      	nop
 80081a8:	200008d1 	.word	0x200008d1

080081ac <__sfp_lock_release>:
 80081ac:	4801      	ldr	r0, [pc, #4]	@ (80081b4 <__sfp_lock_release+0x8>)
 80081ae:	f000 b93b 	b.w	8008428 <__retarget_lock_release_recursive>
 80081b2:	bf00      	nop
 80081b4:	200008d1 	.word	0x200008d1

080081b8 <__sinit>:
 80081b8:	b510      	push	{r4, lr}
 80081ba:	4604      	mov	r4, r0
 80081bc:	f7ff fff0 	bl	80081a0 <__sfp_lock_acquire>
 80081c0:	6a23      	ldr	r3, [r4, #32]
 80081c2:	b11b      	cbz	r3, 80081cc <__sinit+0x14>
 80081c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c8:	f7ff bff0 	b.w	80081ac <__sfp_lock_release>
 80081cc:	4b04      	ldr	r3, [pc, #16]	@ (80081e0 <__sinit+0x28>)
 80081ce:	6223      	str	r3, [r4, #32]
 80081d0:	4b04      	ldr	r3, [pc, #16]	@ (80081e4 <__sinit+0x2c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1f5      	bne.n	80081c4 <__sinit+0xc>
 80081d8:	f7ff ffc4 	bl	8008164 <global_stdio_init.part.0>
 80081dc:	e7f2      	b.n	80081c4 <__sinit+0xc>
 80081de:	bf00      	nop
 80081e0:	08008125 	.word	0x08008125
 80081e4:	200008c8 	.word	0x200008c8

080081e8 <_fwalk_sglue>:
 80081e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ec:	4607      	mov	r7, r0
 80081ee:	4688      	mov	r8, r1
 80081f0:	4614      	mov	r4, r2
 80081f2:	2600      	movs	r6, #0
 80081f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081f8:	f1b9 0901 	subs.w	r9, r9, #1
 80081fc:	d505      	bpl.n	800820a <_fwalk_sglue+0x22>
 80081fe:	6824      	ldr	r4, [r4, #0]
 8008200:	2c00      	cmp	r4, #0
 8008202:	d1f7      	bne.n	80081f4 <_fwalk_sglue+0xc>
 8008204:	4630      	mov	r0, r6
 8008206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d907      	bls.n	8008220 <_fwalk_sglue+0x38>
 8008210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008214:	3301      	adds	r3, #1
 8008216:	d003      	beq.n	8008220 <_fwalk_sglue+0x38>
 8008218:	4629      	mov	r1, r5
 800821a:	4638      	mov	r0, r7
 800821c:	47c0      	blx	r8
 800821e:	4306      	orrs	r6, r0
 8008220:	3568      	adds	r5, #104	@ 0x68
 8008222:	e7e9      	b.n	80081f8 <_fwalk_sglue+0x10>

08008224 <sniprintf>:
 8008224:	b40c      	push	{r2, r3}
 8008226:	b530      	push	{r4, r5, lr}
 8008228:	4b17      	ldr	r3, [pc, #92]	@ (8008288 <sniprintf+0x64>)
 800822a:	1e0c      	subs	r4, r1, #0
 800822c:	681d      	ldr	r5, [r3, #0]
 800822e:	b09d      	sub	sp, #116	@ 0x74
 8008230:	da08      	bge.n	8008244 <sniprintf+0x20>
 8008232:	238b      	movs	r3, #139	@ 0x8b
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	b01d      	add	sp, #116	@ 0x74
 800823c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008240:	b002      	add	sp, #8
 8008242:	4770      	bx	lr
 8008244:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008248:	f8ad 3014 	strh.w	r3, [sp, #20]
 800824c:	bf14      	ite	ne
 800824e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008252:	4623      	moveq	r3, r4
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800825c:	9002      	str	r0, [sp, #8]
 800825e:	9006      	str	r0, [sp, #24]
 8008260:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008264:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008266:	ab21      	add	r3, sp, #132	@ 0x84
 8008268:	a902      	add	r1, sp, #8
 800826a:	4628      	mov	r0, r5
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	f001 fc15 	bl	8009a9c <_svfiprintf_r>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	bfbc      	itt	lt
 8008276:	238b      	movlt	r3, #139	@ 0x8b
 8008278:	602b      	strlt	r3, [r5, #0]
 800827a:	2c00      	cmp	r4, #0
 800827c:	d0dd      	beq.n	800823a <sniprintf+0x16>
 800827e:	9b02      	ldr	r3, [sp, #8]
 8008280:	2200      	movs	r2, #0
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e7d9      	b.n	800823a <sniprintf+0x16>
 8008286:	bf00      	nop
 8008288:	20000030 	.word	0x20000030

0800828c <__sread>:
 800828c:	b510      	push	{r4, lr}
 800828e:	460c      	mov	r4, r1
 8008290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008294:	f000 f878 	bl	8008388 <_read_r>
 8008298:	2800      	cmp	r0, #0
 800829a:	bfab      	itete	ge
 800829c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800829e:	89a3      	ldrhlt	r3, [r4, #12]
 80082a0:	181b      	addge	r3, r3, r0
 80082a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082a6:	bfac      	ite	ge
 80082a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082aa:	81a3      	strhlt	r3, [r4, #12]
 80082ac:	bd10      	pop	{r4, pc}

080082ae <__swrite>:
 80082ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b2:	461f      	mov	r7, r3
 80082b4:	898b      	ldrh	r3, [r1, #12]
 80082b6:	05db      	lsls	r3, r3, #23
 80082b8:	4605      	mov	r5, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	4616      	mov	r6, r2
 80082be:	d505      	bpl.n	80082cc <__swrite+0x1e>
 80082c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c4:	2302      	movs	r3, #2
 80082c6:	2200      	movs	r2, #0
 80082c8:	f000 f84c 	bl	8008364 <_lseek_r>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082d6:	81a3      	strh	r3, [r4, #12]
 80082d8:	4632      	mov	r2, r6
 80082da:	463b      	mov	r3, r7
 80082dc:	4628      	mov	r0, r5
 80082de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e2:	f000 b863 	b.w	80083ac <_write_r>

080082e6 <__sseek>:
 80082e6:	b510      	push	{r4, lr}
 80082e8:	460c      	mov	r4, r1
 80082ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ee:	f000 f839 	bl	8008364 <_lseek_r>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	bf15      	itete	ne
 80082f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008302:	81a3      	strheq	r3, [r4, #12]
 8008304:	bf18      	it	ne
 8008306:	81a3      	strhne	r3, [r4, #12]
 8008308:	bd10      	pop	{r4, pc}

0800830a <__sclose>:
 800830a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830e:	f000 b819 	b.w	8008344 <_close_r>

08008312 <memset>:
 8008312:	4402      	add	r2, r0
 8008314:	4603      	mov	r3, r0
 8008316:	4293      	cmp	r3, r2
 8008318:	d100      	bne.n	800831c <memset+0xa>
 800831a:	4770      	bx	lr
 800831c:	f803 1b01 	strb.w	r1, [r3], #1
 8008320:	e7f9      	b.n	8008316 <memset+0x4>

08008322 <strchr>:
 8008322:	b2c9      	uxtb	r1, r1
 8008324:	4603      	mov	r3, r0
 8008326:	4618      	mov	r0, r3
 8008328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800832c:	b112      	cbz	r2, 8008334 <strchr+0x12>
 800832e:	428a      	cmp	r2, r1
 8008330:	d1f9      	bne.n	8008326 <strchr+0x4>
 8008332:	4770      	bx	lr
 8008334:	2900      	cmp	r1, #0
 8008336:	bf18      	it	ne
 8008338:	2000      	movne	r0, #0
 800833a:	4770      	bx	lr

0800833c <_localeconv_r>:
 800833c:	4800      	ldr	r0, [pc, #0]	@ (8008340 <_localeconv_r+0x4>)
 800833e:	4770      	bx	lr
 8008340:	20000170 	.word	0x20000170

08008344 <_close_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	@ (8008360 <_close_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7fa fb2c 	bl	80029ac <_close>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_close_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_close_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	200008cc 	.word	0x200008cc

08008364 <_lseek_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d07      	ldr	r5, [pc, #28]	@ (8008384 <_lseek_r+0x20>)
 8008368:	4604      	mov	r4, r0
 800836a:	4608      	mov	r0, r1
 800836c:	4611      	mov	r1, r2
 800836e:	2200      	movs	r2, #0
 8008370:	602a      	str	r2, [r5, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	f7fa fb41 	bl	80029fa <_lseek>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_lseek_r+0x1e>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b103      	cbz	r3, 8008382 <_lseek_r+0x1e>
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	200008cc 	.word	0x200008cc

08008388 <_read_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d07      	ldr	r5, [pc, #28]	@ (80083a8 <_read_r+0x20>)
 800838c:	4604      	mov	r4, r0
 800838e:	4608      	mov	r0, r1
 8008390:	4611      	mov	r1, r2
 8008392:	2200      	movs	r2, #0
 8008394:	602a      	str	r2, [r5, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	f7fa facf 	bl	800293a <_read>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_read_r+0x1e>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_read_r+0x1e>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	200008cc 	.word	0x200008cc

080083ac <_write_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4d07      	ldr	r5, [pc, #28]	@ (80083cc <_write_r+0x20>)
 80083b0:	4604      	mov	r4, r0
 80083b2:	4608      	mov	r0, r1
 80083b4:	4611      	mov	r1, r2
 80083b6:	2200      	movs	r2, #0
 80083b8:	602a      	str	r2, [r5, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	f7fa fada 	bl	8002974 <_write>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_write_r+0x1e>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_write_r+0x1e>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	200008cc 	.word	0x200008cc

080083d0 <__errno>:
 80083d0:	4b01      	ldr	r3, [pc, #4]	@ (80083d8 <__errno+0x8>)
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000030 	.word	0x20000030

080083dc <__libc_init_array>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4d0d      	ldr	r5, [pc, #52]	@ (8008414 <__libc_init_array+0x38>)
 80083e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008418 <__libc_init_array+0x3c>)
 80083e2:	1b64      	subs	r4, r4, r5
 80083e4:	10a4      	asrs	r4, r4, #2
 80083e6:	2600      	movs	r6, #0
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	d109      	bne.n	8008400 <__libc_init_array+0x24>
 80083ec:	4d0b      	ldr	r5, [pc, #44]	@ (800841c <__libc_init_array+0x40>)
 80083ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008420 <__libc_init_array+0x44>)
 80083f0:	f002 f864 	bl	800a4bc <_init>
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	2600      	movs	r6, #0
 80083fa:	42a6      	cmp	r6, r4
 80083fc:	d105      	bne.n	800840a <__libc_init_array+0x2e>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f855 3b04 	ldr.w	r3, [r5], #4
 8008404:	4798      	blx	r3
 8008406:	3601      	adds	r6, #1
 8008408:	e7ee      	b.n	80083e8 <__libc_init_array+0xc>
 800840a:	f855 3b04 	ldr.w	r3, [r5], #4
 800840e:	4798      	blx	r3
 8008410:	3601      	adds	r6, #1
 8008412:	e7f2      	b.n	80083fa <__libc_init_array+0x1e>
 8008414:	0800d260 	.word	0x0800d260
 8008418:	0800d260 	.word	0x0800d260
 800841c:	0800d260 	.word	0x0800d260
 8008420:	0800d264 	.word	0x0800d264

08008424 <__retarget_lock_init_recursive>:
 8008424:	4770      	bx	lr

08008426 <__retarget_lock_acquire_recursive>:
 8008426:	4770      	bx	lr

08008428 <__retarget_lock_release_recursive>:
 8008428:	4770      	bx	lr

0800842a <memcpy>:
 800842a:	440a      	add	r2, r1
 800842c:	4291      	cmp	r1, r2
 800842e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008432:	d100      	bne.n	8008436 <memcpy+0xc>
 8008434:	4770      	bx	lr
 8008436:	b510      	push	{r4, lr}
 8008438:	f811 4b01 	ldrb.w	r4, [r1], #1
 800843c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008440:	4291      	cmp	r1, r2
 8008442:	d1f9      	bne.n	8008438 <memcpy+0xe>
 8008444:	bd10      	pop	{r4, pc}

08008446 <quorem>:
 8008446:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	6903      	ldr	r3, [r0, #16]
 800844c:	690c      	ldr	r4, [r1, #16]
 800844e:	42a3      	cmp	r3, r4
 8008450:	4607      	mov	r7, r0
 8008452:	db7e      	blt.n	8008552 <quorem+0x10c>
 8008454:	3c01      	subs	r4, #1
 8008456:	f101 0814 	add.w	r8, r1, #20
 800845a:	00a3      	lsls	r3, r4, #2
 800845c:	f100 0514 	add.w	r5, r0, #20
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800846c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008470:	3301      	adds	r3, #1
 8008472:	429a      	cmp	r2, r3
 8008474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008478:	fbb2 f6f3 	udiv	r6, r2, r3
 800847c:	d32e      	bcc.n	80084dc <quorem+0x96>
 800847e:	f04f 0a00 	mov.w	sl, #0
 8008482:	46c4      	mov	ip, r8
 8008484:	46ae      	mov	lr, r5
 8008486:	46d3      	mov	fp, sl
 8008488:	f85c 3b04 	ldr.w	r3, [ip], #4
 800848c:	b298      	uxth	r0, r3
 800848e:	fb06 a000 	mla	r0, r6, r0, sl
 8008492:	0c02      	lsrs	r2, r0, #16
 8008494:	0c1b      	lsrs	r3, r3, #16
 8008496:	fb06 2303 	mla	r3, r6, r3, r2
 800849a:	f8de 2000 	ldr.w	r2, [lr]
 800849e:	b280      	uxth	r0, r0
 80084a0:	b292      	uxth	r2, r2
 80084a2:	1a12      	subs	r2, r2, r0
 80084a4:	445a      	add	r2, fp
 80084a6:	f8de 0000 	ldr.w	r0, [lr]
 80084aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084b8:	b292      	uxth	r2, r2
 80084ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084be:	45e1      	cmp	r9, ip
 80084c0:	f84e 2b04 	str.w	r2, [lr], #4
 80084c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084c8:	d2de      	bcs.n	8008488 <quorem+0x42>
 80084ca:	9b00      	ldr	r3, [sp, #0]
 80084cc:	58eb      	ldr	r3, [r5, r3]
 80084ce:	b92b      	cbnz	r3, 80084dc <quorem+0x96>
 80084d0:	9b01      	ldr	r3, [sp, #4]
 80084d2:	3b04      	subs	r3, #4
 80084d4:	429d      	cmp	r5, r3
 80084d6:	461a      	mov	r2, r3
 80084d8:	d32f      	bcc.n	800853a <quorem+0xf4>
 80084da:	613c      	str	r4, [r7, #16]
 80084dc:	4638      	mov	r0, r7
 80084de:	f001 f979 	bl	80097d4 <__mcmp>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	db25      	blt.n	8008532 <quorem+0xec>
 80084e6:	4629      	mov	r1, r5
 80084e8:	2000      	movs	r0, #0
 80084ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80084ee:	f8d1 c000 	ldr.w	ip, [r1]
 80084f2:	fa1f fe82 	uxth.w	lr, r2
 80084f6:	fa1f f38c 	uxth.w	r3, ip
 80084fa:	eba3 030e 	sub.w	r3, r3, lr
 80084fe:	4403      	add	r3, r0
 8008500:	0c12      	lsrs	r2, r2, #16
 8008502:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008506:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800850a:	b29b      	uxth	r3, r3
 800850c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008510:	45c1      	cmp	r9, r8
 8008512:	f841 3b04 	str.w	r3, [r1], #4
 8008516:	ea4f 4022 	mov.w	r0, r2, asr #16
 800851a:	d2e6      	bcs.n	80084ea <quorem+0xa4>
 800851c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008520:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008524:	b922      	cbnz	r2, 8008530 <quorem+0xea>
 8008526:	3b04      	subs	r3, #4
 8008528:	429d      	cmp	r5, r3
 800852a:	461a      	mov	r2, r3
 800852c:	d30b      	bcc.n	8008546 <quorem+0x100>
 800852e:	613c      	str	r4, [r7, #16]
 8008530:	3601      	adds	r6, #1
 8008532:	4630      	mov	r0, r6
 8008534:	b003      	add	sp, #12
 8008536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	3b04      	subs	r3, #4
 800853e:	2a00      	cmp	r2, #0
 8008540:	d1cb      	bne.n	80084da <quorem+0x94>
 8008542:	3c01      	subs	r4, #1
 8008544:	e7c6      	b.n	80084d4 <quorem+0x8e>
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	3b04      	subs	r3, #4
 800854a:	2a00      	cmp	r2, #0
 800854c:	d1ef      	bne.n	800852e <quorem+0xe8>
 800854e:	3c01      	subs	r4, #1
 8008550:	e7ea      	b.n	8008528 <quorem+0xe2>
 8008552:	2000      	movs	r0, #0
 8008554:	e7ee      	b.n	8008534 <quorem+0xee>
	...

08008558 <_dtoa_r>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	69c7      	ldr	r7, [r0, #28]
 800855e:	b099      	sub	sp, #100	@ 0x64
 8008560:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008564:	ec55 4b10 	vmov	r4, r5, d0
 8008568:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800856a:	9109      	str	r1, [sp, #36]	@ 0x24
 800856c:	4683      	mov	fp, r0
 800856e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008570:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008572:	b97f      	cbnz	r7, 8008594 <_dtoa_r+0x3c>
 8008574:	2010      	movs	r0, #16
 8008576:	f000 fdfd 	bl	8009174 <malloc>
 800857a:	4602      	mov	r2, r0
 800857c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008580:	b920      	cbnz	r0, 800858c <_dtoa_r+0x34>
 8008582:	4ba7      	ldr	r3, [pc, #668]	@ (8008820 <_dtoa_r+0x2c8>)
 8008584:	21ef      	movs	r1, #239	@ 0xef
 8008586:	48a7      	ldr	r0, [pc, #668]	@ (8008824 <_dtoa_r+0x2cc>)
 8008588:	f001 fc5a 	bl	8009e40 <__assert_func>
 800858c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008590:	6007      	str	r7, [r0, #0]
 8008592:	60c7      	str	r7, [r0, #12]
 8008594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008598:	6819      	ldr	r1, [r3, #0]
 800859a:	b159      	cbz	r1, 80085b4 <_dtoa_r+0x5c>
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	604a      	str	r2, [r1, #4]
 80085a0:	2301      	movs	r3, #1
 80085a2:	4093      	lsls	r3, r2
 80085a4:	608b      	str	r3, [r1, #8]
 80085a6:	4658      	mov	r0, fp
 80085a8:	f000 feda 	bl	8009360 <_Bfree>
 80085ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	1e2b      	subs	r3, r5, #0
 80085b6:	bfb9      	ittee	lt
 80085b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085bc:	9303      	strlt	r3, [sp, #12]
 80085be:	2300      	movge	r3, #0
 80085c0:	6033      	strge	r3, [r6, #0]
 80085c2:	9f03      	ldr	r7, [sp, #12]
 80085c4:	4b98      	ldr	r3, [pc, #608]	@ (8008828 <_dtoa_r+0x2d0>)
 80085c6:	bfbc      	itt	lt
 80085c8:	2201      	movlt	r2, #1
 80085ca:	6032      	strlt	r2, [r6, #0]
 80085cc:	43bb      	bics	r3, r7
 80085ce:	d112      	bne.n	80085f6 <_dtoa_r+0x9e>
 80085d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80085d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085dc:	4323      	orrs	r3, r4
 80085de:	f000 854d 	beq.w	800907c <_dtoa_r+0xb24>
 80085e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800883c <_dtoa_r+0x2e4>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 854f 	beq.w	800908c <_dtoa_r+0xb34>
 80085ee:	f10a 0303 	add.w	r3, sl, #3
 80085f2:	f000 bd49 	b.w	8009088 <_dtoa_r+0xb30>
 80085f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085fa:	2200      	movs	r2, #0
 80085fc:	ec51 0b17 	vmov	r0, r1, d7
 8008600:	2300      	movs	r3, #0
 8008602:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008606:	f7f8 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800860a:	4680      	mov	r8, r0
 800860c:	b158      	cbz	r0, 8008626 <_dtoa_r+0xce>
 800860e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008610:	2301      	movs	r3, #1
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008616:	b113      	cbz	r3, 800861e <_dtoa_r+0xc6>
 8008618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800861a:	4b84      	ldr	r3, [pc, #528]	@ (800882c <_dtoa_r+0x2d4>)
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008840 <_dtoa_r+0x2e8>
 8008622:	f000 bd33 	b.w	800908c <_dtoa_r+0xb34>
 8008626:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800862a:	aa16      	add	r2, sp, #88	@ 0x58
 800862c:	a917      	add	r1, sp, #92	@ 0x5c
 800862e:	4658      	mov	r0, fp
 8008630:	f001 f980 	bl	8009934 <__d2b>
 8008634:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008638:	4681      	mov	r9, r0
 800863a:	2e00      	cmp	r6, #0
 800863c:	d077      	beq.n	800872e <_dtoa_r+0x1d6>
 800863e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008640:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800864c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008650:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008654:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008658:	4619      	mov	r1, r3
 800865a:	2200      	movs	r2, #0
 800865c:	4b74      	ldr	r3, [pc, #464]	@ (8008830 <_dtoa_r+0x2d8>)
 800865e:	f7f7 fe13 	bl	8000288 <__aeabi_dsub>
 8008662:	a369      	add	r3, pc, #420	@ (adr r3, 8008808 <_dtoa_r+0x2b0>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 ffc6 	bl	80005f8 <__aeabi_dmul>
 800866c:	a368      	add	r3, pc, #416	@ (adr r3, 8008810 <_dtoa_r+0x2b8>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f7f7 fe0b 	bl	800028c <__adddf3>
 8008676:	4604      	mov	r4, r0
 8008678:	4630      	mov	r0, r6
 800867a:	460d      	mov	r5, r1
 800867c:	f7f7 ff52 	bl	8000524 <__aeabi_i2d>
 8008680:	a365      	add	r3, pc, #404	@ (adr r3, 8008818 <_dtoa_r+0x2c0>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 ffb7 	bl	80005f8 <__aeabi_dmul>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f7 fdfb 	bl	800028c <__adddf3>
 8008696:	4604      	mov	r4, r0
 8008698:	460d      	mov	r5, r1
 800869a:	f7f8 fa5d 	bl	8000b58 <__aeabi_d2iz>
 800869e:	2200      	movs	r2, #0
 80086a0:	4607      	mov	r7, r0
 80086a2:	2300      	movs	r3, #0
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f8 fa18 	bl	8000adc <__aeabi_dcmplt>
 80086ac:	b140      	cbz	r0, 80086c0 <_dtoa_r+0x168>
 80086ae:	4638      	mov	r0, r7
 80086b0:	f7f7 ff38 	bl	8000524 <__aeabi_i2d>
 80086b4:	4622      	mov	r2, r4
 80086b6:	462b      	mov	r3, r5
 80086b8:	f7f8 fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 80086bc:	b900      	cbnz	r0, 80086c0 <_dtoa_r+0x168>
 80086be:	3f01      	subs	r7, #1
 80086c0:	2f16      	cmp	r7, #22
 80086c2:	d851      	bhi.n	8008768 <_dtoa_r+0x210>
 80086c4:	4b5b      	ldr	r3, [pc, #364]	@ (8008834 <_dtoa_r+0x2dc>)
 80086c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086d2:	f7f8 fa03 	bl	8000adc <__aeabi_dcmplt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d048      	beq.n	800876c <_dtoa_r+0x214>
 80086da:	3f01      	subs	r7, #1
 80086dc:	2300      	movs	r3, #0
 80086de:	9312      	str	r3, [sp, #72]	@ 0x48
 80086e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086e2:	1b9b      	subs	r3, r3, r6
 80086e4:	1e5a      	subs	r2, r3, #1
 80086e6:	bf44      	itt	mi
 80086e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80086ec:	2300      	movmi	r3, #0
 80086ee:	9208      	str	r2, [sp, #32]
 80086f0:	bf54      	ite	pl
 80086f2:	f04f 0800 	movpl.w	r8, #0
 80086f6:	9308      	strmi	r3, [sp, #32]
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	db39      	blt.n	8008770 <_dtoa_r+0x218>
 80086fc:	9b08      	ldr	r3, [sp, #32]
 80086fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008700:	443b      	add	r3, r7
 8008702:	9308      	str	r3, [sp, #32]
 8008704:	2300      	movs	r3, #0
 8008706:	930a      	str	r3, [sp, #40]	@ 0x28
 8008708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870a:	2b09      	cmp	r3, #9
 800870c:	d864      	bhi.n	80087d8 <_dtoa_r+0x280>
 800870e:	2b05      	cmp	r3, #5
 8008710:	bfc4      	itt	gt
 8008712:	3b04      	subgt	r3, #4
 8008714:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008718:	f1a3 0302 	sub.w	r3, r3, #2
 800871c:	bfcc      	ite	gt
 800871e:	2400      	movgt	r4, #0
 8008720:	2401      	movle	r4, #1
 8008722:	2b03      	cmp	r3, #3
 8008724:	d863      	bhi.n	80087ee <_dtoa_r+0x296>
 8008726:	e8df f003 	tbb	[pc, r3]
 800872a:	372a      	.short	0x372a
 800872c:	5535      	.short	0x5535
 800872e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008732:	441e      	add	r6, r3
 8008734:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008738:	2b20      	cmp	r3, #32
 800873a:	bfc1      	itttt	gt
 800873c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008740:	409f      	lslgt	r7, r3
 8008742:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008746:	fa24 f303 	lsrgt.w	r3, r4, r3
 800874a:	bfd6      	itet	le
 800874c:	f1c3 0320 	rsble	r3, r3, #32
 8008750:	ea47 0003 	orrgt.w	r0, r7, r3
 8008754:	fa04 f003 	lslle.w	r0, r4, r3
 8008758:	f7f7 fed4 	bl	8000504 <__aeabi_ui2d>
 800875c:	2201      	movs	r2, #1
 800875e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008762:	3e01      	subs	r6, #1
 8008764:	9214      	str	r2, [sp, #80]	@ 0x50
 8008766:	e777      	b.n	8008658 <_dtoa_r+0x100>
 8008768:	2301      	movs	r3, #1
 800876a:	e7b8      	b.n	80086de <_dtoa_r+0x186>
 800876c:	9012      	str	r0, [sp, #72]	@ 0x48
 800876e:	e7b7      	b.n	80086e0 <_dtoa_r+0x188>
 8008770:	427b      	negs	r3, r7
 8008772:	930a      	str	r3, [sp, #40]	@ 0x28
 8008774:	2300      	movs	r3, #0
 8008776:	eba8 0807 	sub.w	r8, r8, r7
 800877a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800877c:	e7c4      	b.n	8008708 <_dtoa_r+0x1b0>
 800877e:	2300      	movs	r3, #0
 8008780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008784:	2b00      	cmp	r3, #0
 8008786:	dc35      	bgt.n	80087f4 <_dtoa_r+0x29c>
 8008788:	2301      	movs	r3, #1
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	9307      	str	r3, [sp, #28]
 800878e:	461a      	mov	r2, r3
 8008790:	920e      	str	r2, [sp, #56]	@ 0x38
 8008792:	e00b      	b.n	80087ac <_dtoa_r+0x254>
 8008794:	2301      	movs	r3, #1
 8008796:	e7f3      	b.n	8008780 <_dtoa_r+0x228>
 8008798:	2300      	movs	r3, #0
 800879a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800879c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800879e:	18fb      	adds	r3, r7, r3
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	9307      	str	r3, [sp, #28]
 80087a8:	bfb8      	it	lt
 80087aa:	2301      	movlt	r3, #1
 80087ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80087b0:	2100      	movs	r1, #0
 80087b2:	2204      	movs	r2, #4
 80087b4:	f102 0514 	add.w	r5, r2, #20
 80087b8:	429d      	cmp	r5, r3
 80087ba:	d91f      	bls.n	80087fc <_dtoa_r+0x2a4>
 80087bc:	6041      	str	r1, [r0, #4]
 80087be:	4658      	mov	r0, fp
 80087c0:	f000 fd8e 	bl	80092e0 <_Balloc>
 80087c4:	4682      	mov	sl, r0
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d13c      	bne.n	8008844 <_dtoa_r+0x2ec>
 80087ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008838 <_dtoa_r+0x2e0>)
 80087cc:	4602      	mov	r2, r0
 80087ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80087d2:	e6d8      	b.n	8008586 <_dtoa_r+0x2e>
 80087d4:	2301      	movs	r3, #1
 80087d6:	e7e0      	b.n	800879a <_dtoa_r+0x242>
 80087d8:	2401      	movs	r4, #1
 80087da:	2300      	movs	r3, #0
 80087dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087e0:	f04f 33ff 	mov.w	r3, #4294967295
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	9307      	str	r3, [sp, #28]
 80087e8:	2200      	movs	r2, #0
 80087ea:	2312      	movs	r3, #18
 80087ec:	e7d0      	b.n	8008790 <_dtoa_r+0x238>
 80087ee:	2301      	movs	r3, #1
 80087f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087f2:	e7f5      	b.n	80087e0 <_dtoa_r+0x288>
 80087f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	9307      	str	r3, [sp, #28]
 80087fa:	e7d7      	b.n	80087ac <_dtoa_r+0x254>
 80087fc:	3101      	adds	r1, #1
 80087fe:	0052      	lsls	r2, r2, #1
 8008800:	e7d8      	b.n	80087b4 <_dtoa_r+0x25c>
 8008802:	bf00      	nop
 8008804:	f3af 8000 	nop.w
 8008808:	636f4361 	.word	0x636f4361
 800880c:	3fd287a7 	.word	0x3fd287a7
 8008810:	8b60c8b3 	.word	0x8b60c8b3
 8008814:	3fc68a28 	.word	0x3fc68a28
 8008818:	509f79fb 	.word	0x509f79fb
 800881c:	3fd34413 	.word	0x3fd34413
 8008820:	0800d026 	.word	0x0800d026
 8008824:	0800d03d 	.word	0x0800d03d
 8008828:	7ff00000 	.word	0x7ff00000
 800882c:	0800cff6 	.word	0x0800cff6
 8008830:	3ff80000 	.word	0x3ff80000
 8008834:	0800d138 	.word	0x0800d138
 8008838:	0800d095 	.word	0x0800d095
 800883c:	0800d022 	.word	0x0800d022
 8008840:	0800cff5 	.word	0x0800cff5
 8008844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008848:	6018      	str	r0, [r3, #0]
 800884a:	9b07      	ldr	r3, [sp, #28]
 800884c:	2b0e      	cmp	r3, #14
 800884e:	f200 80a4 	bhi.w	800899a <_dtoa_r+0x442>
 8008852:	2c00      	cmp	r4, #0
 8008854:	f000 80a1 	beq.w	800899a <_dtoa_r+0x442>
 8008858:	2f00      	cmp	r7, #0
 800885a:	dd33      	ble.n	80088c4 <_dtoa_r+0x36c>
 800885c:	4bad      	ldr	r3, [pc, #692]	@ (8008b14 <_dtoa_r+0x5bc>)
 800885e:	f007 020f 	and.w	r2, r7, #15
 8008862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008866:	ed93 7b00 	vldr	d7, [r3]
 800886a:	05f8      	lsls	r0, r7, #23
 800886c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008870:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008874:	d516      	bpl.n	80088a4 <_dtoa_r+0x34c>
 8008876:	4ba8      	ldr	r3, [pc, #672]	@ (8008b18 <_dtoa_r+0x5c0>)
 8008878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800887c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008880:	f7f7 ffe4 	bl	800084c <__aeabi_ddiv>
 8008884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008888:	f004 040f 	and.w	r4, r4, #15
 800888c:	2603      	movs	r6, #3
 800888e:	4da2      	ldr	r5, [pc, #648]	@ (8008b18 <_dtoa_r+0x5c0>)
 8008890:	b954      	cbnz	r4, 80088a8 <_dtoa_r+0x350>
 8008892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800889a:	f7f7 ffd7 	bl	800084c <__aeabi_ddiv>
 800889e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088a2:	e028      	b.n	80088f6 <_dtoa_r+0x39e>
 80088a4:	2602      	movs	r6, #2
 80088a6:	e7f2      	b.n	800888e <_dtoa_r+0x336>
 80088a8:	07e1      	lsls	r1, r4, #31
 80088aa:	d508      	bpl.n	80088be <_dtoa_r+0x366>
 80088ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088b4:	f7f7 fea0 	bl	80005f8 <__aeabi_dmul>
 80088b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088bc:	3601      	adds	r6, #1
 80088be:	1064      	asrs	r4, r4, #1
 80088c0:	3508      	adds	r5, #8
 80088c2:	e7e5      	b.n	8008890 <_dtoa_r+0x338>
 80088c4:	f000 80d2 	beq.w	8008a6c <_dtoa_r+0x514>
 80088c8:	427c      	negs	r4, r7
 80088ca:	4b92      	ldr	r3, [pc, #584]	@ (8008b14 <_dtoa_r+0x5bc>)
 80088cc:	4d92      	ldr	r5, [pc, #584]	@ (8008b18 <_dtoa_r+0x5c0>)
 80088ce:	f004 020f 	and.w	r2, r4, #15
 80088d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088de:	f7f7 fe8b 	bl	80005f8 <__aeabi_dmul>
 80088e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088e6:	1124      	asrs	r4, r4, #4
 80088e8:	2300      	movs	r3, #0
 80088ea:	2602      	movs	r6, #2
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	f040 80b2 	bne.w	8008a56 <_dtoa_r+0x4fe>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1d3      	bne.n	800889e <_dtoa_r+0x346>
 80088f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 80b7 	beq.w	8008a70 <_dtoa_r+0x518>
 8008902:	4b86      	ldr	r3, [pc, #536]	@ (8008b1c <_dtoa_r+0x5c4>)
 8008904:	2200      	movs	r2, #0
 8008906:	4620      	mov	r0, r4
 8008908:	4629      	mov	r1, r5
 800890a:	f7f8 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800890e:	2800      	cmp	r0, #0
 8008910:	f000 80ae 	beq.w	8008a70 <_dtoa_r+0x518>
 8008914:	9b07      	ldr	r3, [sp, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 80aa 	beq.w	8008a70 <_dtoa_r+0x518>
 800891c:	9b00      	ldr	r3, [sp, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	dd37      	ble.n	8008992 <_dtoa_r+0x43a>
 8008922:	1e7b      	subs	r3, r7, #1
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	4620      	mov	r0, r4
 8008928:	4b7d      	ldr	r3, [pc, #500]	@ (8008b20 <_dtoa_r+0x5c8>)
 800892a:	2200      	movs	r2, #0
 800892c:	4629      	mov	r1, r5
 800892e:	f7f7 fe63 	bl	80005f8 <__aeabi_dmul>
 8008932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008936:	9c00      	ldr	r4, [sp, #0]
 8008938:	3601      	adds	r6, #1
 800893a:	4630      	mov	r0, r6
 800893c:	f7f7 fdf2 	bl	8000524 <__aeabi_i2d>
 8008940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008944:	f7f7 fe58 	bl	80005f8 <__aeabi_dmul>
 8008948:	4b76      	ldr	r3, [pc, #472]	@ (8008b24 <_dtoa_r+0x5cc>)
 800894a:	2200      	movs	r2, #0
 800894c:	f7f7 fc9e 	bl	800028c <__adddf3>
 8008950:	4605      	mov	r5, r0
 8008952:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008956:	2c00      	cmp	r4, #0
 8008958:	f040 808d 	bne.w	8008a76 <_dtoa_r+0x51e>
 800895c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008960:	4b71      	ldr	r3, [pc, #452]	@ (8008b28 <_dtoa_r+0x5d0>)
 8008962:	2200      	movs	r2, #0
 8008964:	f7f7 fc90 	bl	8000288 <__aeabi_dsub>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008970:	462a      	mov	r2, r5
 8008972:	4633      	mov	r3, r6
 8008974:	f7f8 f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 8008978:	2800      	cmp	r0, #0
 800897a:	f040 828b 	bne.w	8008e94 <_dtoa_r+0x93c>
 800897e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008982:	462a      	mov	r2, r5
 8008984:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008988:	f7f8 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800898c:	2800      	cmp	r0, #0
 800898e:	f040 8128 	bne.w	8008be2 <_dtoa_r+0x68a>
 8008992:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008996:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800899a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800899c:	2b00      	cmp	r3, #0
 800899e:	f2c0 815a 	blt.w	8008c56 <_dtoa_r+0x6fe>
 80089a2:	2f0e      	cmp	r7, #14
 80089a4:	f300 8157 	bgt.w	8008c56 <_dtoa_r+0x6fe>
 80089a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008b14 <_dtoa_r+0x5bc>)
 80089aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089ae:	ed93 7b00 	vldr	d7, [r3]
 80089b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	ed8d 7b00 	vstr	d7, [sp]
 80089ba:	da03      	bge.n	80089c4 <_dtoa_r+0x46c>
 80089bc:	9b07      	ldr	r3, [sp, #28]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f340 8101 	ble.w	8008bc6 <_dtoa_r+0x66e>
 80089c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089c8:	4656      	mov	r6, sl
 80089ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f7 ff3b 	bl	800084c <__aeabi_ddiv>
 80089d6:	f7f8 f8bf 	bl	8000b58 <__aeabi_d2iz>
 80089da:	4680      	mov	r8, r0
 80089dc:	f7f7 fda2 	bl	8000524 <__aeabi_i2d>
 80089e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089e4:	f7f7 fe08 	bl	80005f8 <__aeabi_dmul>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089f4:	f7f7 fc48 	bl	8000288 <__aeabi_dsub>
 80089f8:	f806 4b01 	strb.w	r4, [r6], #1
 80089fc:	9d07      	ldr	r5, [sp, #28]
 80089fe:	eba6 040a 	sub.w	r4, r6, sl
 8008a02:	42a5      	cmp	r5, r4
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	f040 8117 	bne.w	8008c3a <_dtoa_r+0x6e2>
 8008a0c:	f7f7 fc3e 	bl	800028c <__adddf3>
 8008a10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a14:	4604      	mov	r4, r0
 8008a16:	460d      	mov	r5, r1
 8008a18:	f7f8 f87e 	bl	8000b18 <__aeabi_dcmpgt>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f040 80f9 	bne.w	8008c14 <_dtoa_r+0x6bc>
 8008a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a26:	4620      	mov	r0, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	f7f8 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a2e:	b118      	cbz	r0, 8008a38 <_dtoa_r+0x4e0>
 8008a30:	f018 0f01 	tst.w	r8, #1
 8008a34:	f040 80ee 	bne.w	8008c14 <_dtoa_r+0x6bc>
 8008a38:	4649      	mov	r1, r9
 8008a3a:	4658      	mov	r0, fp
 8008a3c:	f000 fc90 	bl	8009360 <_Bfree>
 8008a40:	2300      	movs	r3, #0
 8008a42:	7033      	strb	r3, [r6, #0]
 8008a44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a46:	3701      	adds	r7, #1
 8008a48:	601f      	str	r7, [r3, #0]
 8008a4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 831d 	beq.w	800908c <_dtoa_r+0xb34>
 8008a52:	601e      	str	r6, [r3, #0]
 8008a54:	e31a      	b.n	800908c <_dtoa_r+0xb34>
 8008a56:	07e2      	lsls	r2, r4, #31
 8008a58:	d505      	bpl.n	8008a66 <_dtoa_r+0x50e>
 8008a5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a5e:	f7f7 fdcb 	bl	80005f8 <__aeabi_dmul>
 8008a62:	3601      	adds	r6, #1
 8008a64:	2301      	movs	r3, #1
 8008a66:	1064      	asrs	r4, r4, #1
 8008a68:	3508      	adds	r5, #8
 8008a6a:	e73f      	b.n	80088ec <_dtoa_r+0x394>
 8008a6c:	2602      	movs	r6, #2
 8008a6e:	e742      	b.n	80088f6 <_dtoa_r+0x39e>
 8008a70:	9c07      	ldr	r4, [sp, #28]
 8008a72:	9704      	str	r7, [sp, #16]
 8008a74:	e761      	b.n	800893a <_dtoa_r+0x3e2>
 8008a76:	4b27      	ldr	r3, [pc, #156]	@ (8008b14 <_dtoa_r+0x5bc>)
 8008a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a82:	4454      	add	r4, sl
 8008a84:	2900      	cmp	r1, #0
 8008a86:	d053      	beq.n	8008b30 <_dtoa_r+0x5d8>
 8008a88:	4928      	ldr	r1, [pc, #160]	@ (8008b2c <_dtoa_r+0x5d4>)
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f7f7 fede 	bl	800084c <__aeabi_ddiv>
 8008a90:	4633      	mov	r3, r6
 8008a92:	462a      	mov	r2, r5
 8008a94:	f7f7 fbf8 	bl	8000288 <__aeabi_dsub>
 8008a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a9c:	4656      	mov	r6, sl
 8008a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa2:	f7f8 f859 	bl	8000b58 <__aeabi_d2iz>
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	f7f7 fd3c 	bl	8000524 <__aeabi_i2d>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab4:	f7f7 fbe8 	bl	8000288 <__aeabi_dsub>
 8008ab8:	3530      	adds	r5, #48	@ 0x30
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ac2:	f806 5b01 	strb.w	r5, [r6], #1
 8008ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008aca:	f7f8 f807 	bl	8000adc <__aeabi_dcmplt>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d171      	bne.n	8008bb6 <_dtoa_r+0x65e>
 8008ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ad6:	4911      	ldr	r1, [pc, #68]	@ (8008b1c <_dtoa_r+0x5c4>)
 8008ad8:	2000      	movs	r0, #0
 8008ada:	f7f7 fbd5 	bl	8000288 <__aeabi_dsub>
 8008ade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ae2:	f7f7 fffb 	bl	8000adc <__aeabi_dcmplt>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	f040 8095 	bne.w	8008c16 <_dtoa_r+0x6be>
 8008aec:	42a6      	cmp	r6, r4
 8008aee:	f43f af50 	beq.w	8008992 <_dtoa_r+0x43a>
 8008af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008af6:	4b0a      	ldr	r3, [pc, #40]	@ (8008b20 <_dtoa_r+0x5c8>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	f7f7 fd7d 	bl	80005f8 <__aeabi_dmul>
 8008afe:	4b08      	ldr	r3, [pc, #32]	@ (8008b20 <_dtoa_r+0x5c8>)
 8008b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b04:	2200      	movs	r2, #0
 8008b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b0a:	f7f7 fd75 	bl	80005f8 <__aeabi_dmul>
 8008b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b12:	e7c4      	b.n	8008a9e <_dtoa_r+0x546>
 8008b14:	0800d138 	.word	0x0800d138
 8008b18:	0800d110 	.word	0x0800d110
 8008b1c:	3ff00000 	.word	0x3ff00000
 8008b20:	40240000 	.word	0x40240000
 8008b24:	401c0000 	.word	0x401c0000
 8008b28:	40140000 	.word	0x40140000
 8008b2c:	3fe00000 	.word	0x3fe00000
 8008b30:	4631      	mov	r1, r6
 8008b32:	4628      	mov	r0, r5
 8008b34:	f7f7 fd60 	bl	80005f8 <__aeabi_dmul>
 8008b38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008b3e:	4656      	mov	r6, sl
 8008b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b44:	f7f8 f808 	bl	8000b58 <__aeabi_d2iz>
 8008b48:	4605      	mov	r5, r0
 8008b4a:	f7f7 fceb 	bl	8000524 <__aeabi_i2d>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b56:	f7f7 fb97 	bl	8000288 <__aeabi_dsub>
 8008b5a:	3530      	adds	r5, #48	@ 0x30
 8008b5c:	f806 5b01 	strb.w	r5, [r6], #1
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	42a6      	cmp	r6, r4
 8008b66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b6a:	f04f 0200 	mov.w	r2, #0
 8008b6e:	d124      	bne.n	8008bba <_dtoa_r+0x662>
 8008b70:	4bac      	ldr	r3, [pc, #688]	@ (8008e24 <_dtoa_r+0x8cc>)
 8008b72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b76:	f7f7 fb89 	bl	800028c <__adddf3>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b82:	f7f7 ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d145      	bne.n	8008c16 <_dtoa_r+0x6be>
 8008b8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b8e:	49a5      	ldr	r1, [pc, #660]	@ (8008e24 <_dtoa_r+0x8cc>)
 8008b90:	2000      	movs	r0, #0
 8008b92:	f7f7 fb79 	bl	8000288 <__aeabi_dsub>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9e:	f7f7 ff9d 	bl	8000adc <__aeabi_dcmplt>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	f43f aef5 	beq.w	8008992 <_dtoa_r+0x43a>
 8008ba8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008baa:	1e73      	subs	r3, r6, #1
 8008bac:	9315      	str	r3, [sp, #84]	@ 0x54
 8008bae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bb2:	2b30      	cmp	r3, #48	@ 0x30
 8008bb4:	d0f8      	beq.n	8008ba8 <_dtoa_r+0x650>
 8008bb6:	9f04      	ldr	r7, [sp, #16]
 8008bb8:	e73e      	b.n	8008a38 <_dtoa_r+0x4e0>
 8008bba:	4b9b      	ldr	r3, [pc, #620]	@ (8008e28 <_dtoa_r+0x8d0>)
 8008bbc:	f7f7 fd1c 	bl	80005f8 <__aeabi_dmul>
 8008bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc4:	e7bc      	b.n	8008b40 <_dtoa_r+0x5e8>
 8008bc6:	d10c      	bne.n	8008be2 <_dtoa_r+0x68a>
 8008bc8:	4b98      	ldr	r3, [pc, #608]	@ (8008e2c <_dtoa_r+0x8d4>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bd0:	f7f7 fd12 	bl	80005f8 <__aeabi_dmul>
 8008bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bd8:	f7f7 ff94 	bl	8000b04 <__aeabi_dcmpge>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f000 8157 	beq.w	8008e90 <_dtoa_r+0x938>
 8008be2:	2400      	movs	r4, #0
 8008be4:	4625      	mov	r5, r4
 8008be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008be8:	43db      	mvns	r3, r3
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	4656      	mov	r6, sl
 8008bee:	2700      	movs	r7, #0
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4658      	mov	r0, fp
 8008bf4:	f000 fbb4 	bl	8009360 <_Bfree>
 8008bf8:	2d00      	cmp	r5, #0
 8008bfa:	d0dc      	beq.n	8008bb6 <_dtoa_r+0x65e>
 8008bfc:	b12f      	cbz	r7, 8008c0a <_dtoa_r+0x6b2>
 8008bfe:	42af      	cmp	r7, r5
 8008c00:	d003      	beq.n	8008c0a <_dtoa_r+0x6b2>
 8008c02:	4639      	mov	r1, r7
 8008c04:	4658      	mov	r0, fp
 8008c06:	f000 fbab 	bl	8009360 <_Bfree>
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4658      	mov	r0, fp
 8008c0e:	f000 fba7 	bl	8009360 <_Bfree>
 8008c12:	e7d0      	b.n	8008bb6 <_dtoa_r+0x65e>
 8008c14:	9704      	str	r7, [sp, #16]
 8008c16:	4633      	mov	r3, r6
 8008c18:	461e      	mov	r6, r3
 8008c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c1e:	2a39      	cmp	r2, #57	@ 0x39
 8008c20:	d107      	bne.n	8008c32 <_dtoa_r+0x6da>
 8008c22:	459a      	cmp	sl, r3
 8008c24:	d1f8      	bne.n	8008c18 <_dtoa_r+0x6c0>
 8008c26:	9a04      	ldr	r2, [sp, #16]
 8008c28:	3201      	adds	r2, #1
 8008c2a:	9204      	str	r2, [sp, #16]
 8008c2c:	2230      	movs	r2, #48	@ 0x30
 8008c2e:	f88a 2000 	strb.w	r2, [sl]
 8008c32:	781a      	ldrb	r2, [r3, #0]
 8008c34:	3201      	adds	r2, #1
 8008c36:	701a      	strb	r2, [r3, #0]
 8008c38:	e7bd      	b.n	8008bb6 <_dtoa_r+0x65e>
 8008c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e28 <_dtoa_r+0x8d0>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f7f7 fcdb 	bl	80005f8 <__aeabi_dmul>
 8008c42:	2200      	movs	r2, #0
 8008c44:	2300      	movs	r3, #0
 8008c46:	4604      	mov	r4, r0
 8008c48:	460d      	mov	r5, r1
 8008c4a:	f7f7 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f43f aebb 	beq.w	80089ca <_dtoa_r+0x472>
 8008c54:	e6f0      	b.n	8008a38 <_dtoa_r+0x4e0>
 8008c56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	f000 80db 	beq.w	8008e14 <_dtoa_r+0x8bc>
 8008c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c60:	2a01      	cmp	r2, #1
 8008c62:	f300 80bf 	bgt.w	8008de4 <_dtoa_r+0x88c>
 8008c66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	f000 80b7 	beq.w	8008ddc <_dtoa_r+0x884>
 8008c6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c74:	4646      	mov	r6, r8
 8008c76:	9a08      	ldr	r2, [sp, #32]
 8008c78:	2101      	movs	r1, #1
 8008c7a:	441a      	add	r2, r3
 8008c7c:	4658      	mov	r0, fp
 8008c7e:	4498      	add	r8, r3
 8008c80:	9208      	str	r2, [sp, #32]
 8008c82:	f000 fc21 	bl	80094c8 <__i2b>
 8008c86:	4605      	mov	r5, r0
 8008c88:	b15e      	cbz	r6, 8008ca2 <_dtoa_r+0x74a>
 8008c8a:	9b08      	ldr	r3, [sp, #32]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	dd08      	ble.n	8008ca2 <_dtoa_r+0x74a>
 8008c90:	42b3      	cmp	r3, r6
 8008c92:	9a08      	ldr	r2, [sp, #32]
 8008c94:	bfa8      	it	ge
 8008c96:	4633      	movge	r3, r6
 8008c98:	eba8 0803 	sub.w	r8, r8, r3
 8008c9c:	1af6      	subs	r6, r6, r3
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	9308      	str	r3, [sp, #32]
 8008ca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ca4:	b1f3      	cbz	r3, 8008ce4 <_dtoa_r+0x78c>
 8008ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 80b7 	beq.w	8008e1c <_dtoa_r+0x8c4>
 8008cae:	b18c      	cbz	r4, 8008cd4 <_dtoa_r+0x77c>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f000 fcc7 	bl	8009648 <__pow5mult>
 8008cba:	464a      	mov	r2, r9
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	4658      	mov	r0, fp
 8008cc2:	f000 fc17 	bl	80094f4 <__multiply>
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	9004      	str	r0, [sp, #16]
 8008cca:	4658      	mov	r0, fp
 8008ccc:	f000 fb48 	bl	8009360 <_Bfree>
 8008cd0:	9b04      	ldr	r3, [sp, #16]
 8008cd2:	4699      	mov	r9, r3
 8008cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cd6:	1b1a      	subs	r2, r3, r4
 8008cd8:	d004      	beq.n	8008ce4 <_dtoa_r+0x78c>
 8008cda:	4649      	mov	r1, r9
 8008cdc:	4658      	mov	r0, fp
 8008cde:	f000 fcb3 	bl	8009648 <__pow5mult>
 8008ce2:	4681      	mov	r9, r0
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	4658      	mov	r0, fp
 8008ce8:	f000 fbee 	bl	80094c8 <__i2b>
 8008cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cee:	4604      	mov	r4, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 81cf 	beq.w	8009094 <_dtoa_r+0xb3c>
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	4658      	mov	r0, fp
 8008cfc:	f000 fca4 	bl	8009648 <__pow5mult>
 8008d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	4604      	mov	r4, r0
 8008d06:	f300 8095 	bgt.w	8008e34 <_dtoa_r+0x8dc>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f040 8087 	bne.w	8008e20 <_dtoa_r+0x8c8>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 8089 	bne.w	8008e30 <_dtoa_r+0x8d8>
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d24:	0d1b      	lsrs	r3, r3, #20
 8008d26:	051b      	lsls	r3, r3, #20
 8008d28:	b12b      	cbz	r3, 8008d36 <_dtoa_r+0x7de>
 8008d2a:	9b08      	ldr	r3, [sp, #32]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	9308      	str	r3, [sp, #32]
 8008d30:	f108 0801 	add.w	r8, r8, #1
 8008d34:	2301      	movs	r3, #1
 8008d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 81b0 	beq.w	80090a0 <_dtoa_r+0xb48>
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d46:	6918      	ldr	r0, [r3, #16]
 8008d48:	f000 fb72 	bl	8009430 <__hi0bits>
 8008d4c:	f1c0 0020 	rsb	r0, r0, #32
 8008d50:	9b08      	ldr	r3, [sp, #32]
 8008d52:	4418      	add	r0, r3
 8008d54:	f010 001f 	ands.w	r0, r0, #31
 8008d58:	d077      	beq.n	8008e4a <_dtoa_r+0x8f2>
 8008d5a:	f1c0 0320 	rsb	r3, r0, #32
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	dd6b      	ble.n	8008e3a <_dtoa_r+0x8e2>
 8008d62:	9b08      	ldr	r3, [sp, #32]
 8008d64:	f1c0 001c 	rsb	r0, r0, #28
 8008d68:	4403      	add	r3, r0
 8008d6a:	4480      	add	r8, r0
 8008d6c:	4406      	add	r6, r0
 8008d6e:	9308      	str	r3, [sp, #32]
 8008d70:	f1b8 0f00 	cmp.w	r8, #0
 8008d74:	dd05      	ble.n	8008d82 <_dtoa_r+0x82a>
 8008d76:	4649      	mov	r1, r9
 8008d78:	4642      	mov	r2, r8
 8008d7a:	4658      	mov	r0, fp
 8008d7c:	f000 fcbe 	bl	80096fc <__lshift>
 8008d80:	4681      	mov	r9, r0
 8008d82:	9b08      	ldr	r3, [sp, #32]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dd05      	ble.n	8008d94 <_dtoa_r+0x83c>
 8008d88:	4621      	mov	r1, r4
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4658      	mov	r0, fp
 8008d8e:	f000 fcb5 	bl	80096fc <__lshift>
 8008d92:	4604      	mov	r4, r0
 8008d94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d059      	beq.n	8008e4e <_dtoa_r+0x8f6>
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4648      	mov	r0, r9
 8008d9e:	f000 fd19 	bl	80097d4 <__mcmp>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	da53      	bge.n	8008e4e <_dtoa_r+0x8f6>
 8008da6:	1e7b      	subs	r3, r7, #1
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	4649      	mov	r1, r9
 8008dac:	2300      	movs	r3, #0
 8008dae:	220a      	movs	r2, #10
 8008db0:	4658      	mov	r0, fp
 8008db2:	f000 faf7 	bl	80093a4 <__multadd>
 8008db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008db8:	4681      	mov	r9, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8172 	beq.w	80090a4 <_dtoa_r+0xb4c>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	220a      	movs	r2, #10
 8008dc6:	4658      	mov	r0, fp
 8008dc8:	f000 faec 	bl	80093a4 <__multadd>
 8008dcc:	9b00      	ldr	r3, [sp, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	dc67      	bgt.n	8008ea4 <_dtoa_r+0x94c>
 8008dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	dc41      	bgt.n	8008e5e <_dtoa_r+0x906>
 8008dda:	e063      	b.n	8008ea4 <_dtoa_r+0x94c>
 8008ddc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008dde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008de2:	e746      	b.n	8008c72 <_dtoa_r+0x71a>
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	1e5c      	subs	r4, r3, #1
 8008de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dea:	42a3      	cmp	r3, r4
 8008dec:	bfbf      	itttt	lt
 8008dee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008df0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008df2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008df4:	1ae3      	sublt	r3, r4, r3
 8008df6:	bfb4      	ite	lt
 8008df8:	18d2      	addlt	r2, r2, r3
 8008dfa:	1b1c      	subge	r4, r3, r4
 8008dfc:	9b07      	ldr	r3, [sp, #28]
 8008dfe:	bfbc      	itt	lt
 8008e00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e02:	2400      	movlt	r4, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bfb5      	itete	lt
 8008e08:	eba8 0603 	sublt.w	r6, r8, r3
 8008e0c:	9b07      	ldrge	r3, [sp, #28]
 8008e0e:	2300      	movlt	r3, #0
 8008e10:	4646      	movge	r6, r8
 8008e12:	e730      	b.n	8008c76 <_dtoa_r+0x71e>
 8008e14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e18:	4646      	mov	r6, r8
 8008e1a:	e735      	b.n	8008c88 <_dtoa_r+0x730>
 8008e1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e1e:	e75c      	b.n	8008cda <_dtoa_r+0x782>
 8008e20:	2300      	movs	r3, #0
 8008e22:	e788      	b.n	8008d36 <_dtoa_r+0x7de>
 8008e24:	3fe00000 	.word	0x3fe00000
 8008e28:	40240000 	.word	0x40240000
 8008e2c:	40140000 	.word	0x40140000
 8008e30:	9b02      	ldr	r3, [sp, #8]
 8008e32:	e780      	b.n	8008d36 <_dtoa_r+0x7de>
 8008e34:	2300      	movs	r3, #0
 8008e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e38:	e782      	b.n	8008d40 <_dtoa_r+0x7e8>
 8008e3a:	d099      	beq.n	8008d70 <_dtoa_r+0x818>
 8008e3c:	9a08      	ldr	r2, [sp, #32]
 8008e3e:	331c      	adds	r3, #28
 8008e40:	441a      	add	r2, r3
 8008e42:	4498      	add	r8, r3
 8008e44:	441e      	add	r6, r3
 8008e46:	9208      	str	r2, [sp, #32]
 8008e48:	e792      	b.n	8008d70 <_dtoa_r+0x818>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	e7f6      	b.n	8008e3c <_dtoa_r+0x8e4>
 8008e4e:	9b07      	ldr	r3, [sp, #28]
 8008e50:	9704      	str	r7, [sp, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dc20      	bgt.n	8008e98 <_dtoa_r+0x940>
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	dd1e      	ble.n	8008e9c <_dtoa_r+0x944>
 8008e5e:	9b00      	ldr	r3, [sp, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f47f aec0 	bne.w	8008be6 <_dtoa_r+0x68e>
 8008e66:	4621      	mov	r1, r4
 8008e68:	2205      	movs	r2, #5
 8008e6a:	4658      	mov	r0, fp
 8008e6c:	f000 fa9a 	bl	80093a4 <__multadd>
 8008e70:	4601      	mov	r1, r0
 8008e72:	4604      	mov	r4, r0
 8008e74:	4648      	mov	r0, r9
 8008e76:	f000 fcad 	bl	80097d4 <__mcmp>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	f77f aeb3 	ble.w	8008be6 <_dtoa_r+0x68e>
 8008e80:	4656      	mov	r6, sl
 8008e82:	2331      	movs	r3, #49	@ 0x31
 8008e84:	f806 3b01 	strb.w	r3, [r6], #1
 8008e88:	9b04      	ldr	r3, [sp, #16]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	e6ae      	b.n	8008bee <_dtoa_r+0x696>
 8008e90:	9c07      	ldr	r4, [sp, #28]
 8008e92:	9704      	str	r7, [sp, #16]
 8008e94:	4625      	mov	r5, r4
 8008e96:	e7f3      	b.n	8008e80 <_dtoa_r+0x928>
 8008e98:	9b07      	ldr	r3, [sp, #28]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 8104 	beq.w	80090ac <_dtoa_r+0xb54>
 8008ea4:	2e00      	cmp	r6, #0
 8008ea6:	dd05      	ble.n	8008eb4 <_dtoa_r+0x95c>
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	4632      	mov	r2, r6
 8008eac:	4658      	mov	r0, fp
 8008eae:	f000 fc25 	bl	80096fc <__lshift>
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d05a      	beq.n	8008f70 <_dtoa_r+0xa18>
 8008eba:	6869      	ldr	r1, [r5, #4]
 8008ebc:	4658      	mov	r0, fp
 8008ebe:	f000 fa0f 	bl	80092e0 <_Balloc>
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	b928      	cbnz	r0, 8008ed2 <_dtoa_r+0x97a>
 8008ec6:	4b84      	ldr	r3, [pc, #528]	@ (80090d8 <_dtoa_r+0xb80>)
 8008ec8:	4602      	mov	r2, r0
 8008eca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ece:	f7ff bb5a 	b.w	8008586 <_dtoa_r+0x2e>
 8008ed2:	692a      	ldr	r2, [r5, #16]
 8008ed4:	3202      	adds	r2, #2
 8008ed6:	0092      	lsls	r2, r2, #2
 8008ed8:	f105 010c 	add.w	r1, r5, #12
 8008edc:	300c      	adds	r0, #12
 8008ede:	f7ff faa4 	bl	800842a <memcpy>
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4658      	mov	r0, fp
 8008ee8:	f000 fc08 	bl	80096fc <__lshift>
 8008eec:	f10a 0301 	add.w	r3, sl, #1
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	9b00      	ldr	r3, [sp, #0]
 8008ef4:	4453      	add	r3, sl
 8008ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	462f      	mov	r7, r5
 8008f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f02:	4605      	mov	r5, r0
 8008f04:	9b07      	ldr	r3, [sp, #28]
 8008f06:	4621      	mov	r1, r4
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	4648      	mov	r0, r9
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	f7ff fa9a 	bl	8008446 <quorem>
 8008f12:	4639      	mov	r1, r7
 8008f14:	9002      	str	r0, [sp, #8]
 8008f16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f1a:	4648      	mov	r0, r9
 8008f1c:	f000 fc5a 	bl	80097d4 <__mcmp>
 8008f20:	462a      	mov	r2, r5
 8008f22:	9008      	str	r0, [sp, #32]
 8008f24:	4621      	mov	r1, r4
 8008f26:	4658      	mov	r0, fp
 8008f28:	f000 fc70 	bl	800980c <__mdiff>
 8008f2c:	68c2      	ldr	r2, [r0, #12]
 8008f2e:	4606      	mov	r6, r0
 8008f30:	bb02      	cbnz	r2, 8008f74 <_dtoa_r+0xa1c>
 8008f32:	4601      	mov	r1, r0
 8008f34:	4648      	mov	r0, r9
 8008f36:	f000 fc4d 	bl	80097d4 <__mcmp>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	4658      	mov	r0, fp
 8008f40:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f42:	f000 fa0d 	bl	8009360 <_Bfree>
 8008f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f4a:	9e07      	ldr	r6, [sp, #28]
 8008f4c:	ea43 0102 	orr.w	r1, r3, r2
 8008f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f52:	4319      	orrs	r1, r3
 8008f54:	d110      	bne.n	8008f78 <_dtoa_r+0xa20>
 8008f56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f5a:	d029      	beq.n	8008fb0 <_dtoa_r+0xa58>
 8008f5c:	9b08      	ldr	r3, [sp, #32]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	dd02      	ble.n	8008f68 <_dtoa_r+0xa10>
 8008f62:	9b02      	ldr	r3, [sp, #8]
 8008f64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008f68:	9b00      	ldr	r3, [sp, #0]
 8008f6a:	f883 8000 	strb.w	r8, [r3]
 8008f6e:	e63f      	b.n	8008bf0 <_dtoa_r+0x698>
 8008f70:	4628      	mov	r0, r5
 8008f72:	e7bb      	b.n	8008eec <_dtoa_r+0x994>
 8008f74:	2201      	movs	r2, #1
 8008f76:	e7e1      	b.n	8008f3c <_dtoa_r+0x9e4>
 8008f78:	9b08      	ldr	r3, [sp, #32]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	db04      	blt.n	8008f88 <_dtoa_r+0xa30>
 8008f7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f80:	430b      	orrs	r3, r1
 8008f82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f84:	430b      	orrs	r3, r1
 8008f86:	d120      	bne.n	8008fca <_dtoa_r+0xa72>
 8008f88:	2a00      	cmp	r2, #0
 8008f8a:	dded      	ble.n	8008f68 <_dtoa_r+0xa10>
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4658      	mov	r0, fp
 8008f92:	f000 fbb3 	bl	80096fc <__lshift>
 8008f96:	4621      	mov	r1, r4
 8008f98:	4681      	mov	r9, r0
 8008f9a:	f000 fc1b 	bl	80097d4 <__mcmp>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	dc03      	bgt.n	8008faa <_dtoa_r+0xa52>
 8008fa2:	d1e1      	bne.n	8008f68 <_dtoa_r+0xa10>
 8008fa4:	f018 0f01 	tst.w	r8, #1
 8008fa8:	d0de      	beq.n	8008f68 <_dtoa_r+0xa10>
 8008faa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fae:	d1d8      	bne.n	8008f62 <_dtoa_r+0xa0a>
 8008fb0:	9a00      	ldr	r2, [sp, #0]
 8008fb2:	2339      	movs	r3, #57	@ 0x39
 8008fb4:	7013      	strb	r3, [r2, #0]
 8008fb6:	4633      	mov	r3, r6
 8008fb8:	461e      	mov	r6, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008fc0:	2a39      	cmp	r2, #57	@ 0x39
 8008fc2:	d052      	beq.n	800906a <_dtoa_r+0xb12>
 8008fc4:	3201      	adds	r2, #1
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	e612      	b.n	8008bf0 <_dtoa_r+0x698>
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	dd07      	ble.n	8008fde <_dtoa_r+0xa86>
 8008fce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fd2:	d0ed      	beq.n	8008fb0 <_dtoa_r+0xa58>
 8008fd4:	9a00      	ldr	r2, [sp, #0]
 8008fd6:	f108 0301 	add.w	r3, r8, #1
 8008fda:	7013      	strb	r3, [r2, #0]
 8008fdc:	e608      	b.n	8008bf0 <_dtoa_r+0x698>
 8008fde:	9b07      	ldr	r3, [sp, #28]
 8008fe0:	9a07      	ldr	r2, [sp, #28]
 8008fe2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d028      	beq.n	800903e <_dtoa_r+0xae6>
 8008fec:	4649      	mov	r1, r9
 8008fee:	2300      	movs	r3, #0
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	4658      	mov	r0, fp
 8008ff4:	f000 f9d6 	bl	80093a4 <__multadd>
 8008ff8:	42af      	cmp	r7, r5
 8008ffa:	4681      	mov	r9, r0
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	f04f 020a 	mov.w	r2, #10
 8009004:	4639      	mov	r1, r7
 8009006:	4658      	mov	r0, fp
 8009008:	d107      	bne.n	800901a <_dtoa_r+0xac2>
 800900a:	f000 f9cb 	bl	80093a4 <__multadd>
 800900e:	4607      	mov	r7, r0
 8009010:	4605      	mov	r5, r0
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	3301      	adds	r3, #1
 8009016:	9307      	str	r3, [sp, #28]
 8009018:	e774      	b.n	8008f04 <_dtoa_r+0x9ac>
 800901a:	f000 f9c3 	bl	80093a4 <__multadd>
 800901e:	4629      	mov	r1, r5
 8009020:	4607      	mov	r7, r0
 8009022:	2300      	movs	r3, #0
 8009024:	220a      	movs	r2, #10
 8009026:	4658      	mov	r0, fp
 8009028:	f000 f9bc 	bl	80093a4 <__multadd>
 800902c:	4605      	mov	r5, r0
 800902e:	e7f0      	b.n	8009012 <_dtoa_r+0xaba>
 8009030:	9b00      	ldr	r3, [sp, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	bfcc      	ite	gt
 8009036:	461e      	movgt	r6, r3
 8009038:	2601      	movle	r6, #1
 800903a:	4456      	add	r6, sl
 800903c:	2700      	movs	r7, #0
 800903e:	4649      	mov	r1, r9
 8009040:	2201      	movs	r2, #1
 8009042:	4658      	mov	r0, fp
 8009044:	f000 fb5a 	bl	80096fc <__lshift>
 8009048:	4621      	mov	r1, r4
 800904a:	4681      	mov	r9, r0
 800904c:	f000 fbc2 	bl	80097d4 <__mcmp>
 8009050:	2800      	cmp	r0, #0
 8009052:	dcb0      	bgt.n	8008fb6 <_dtoa_r+0xa5e>
 8009054:	d102      	bne.n	800905c <_dtoa_r+0xb04>
 8009056:	f018 0f01 	tst.w	r8, #1
 800905a:	d1ac      	bne.n	8008fb6 <_dtoa_r+0xa5e>
 800905c:	4633      	mov	r3, r6
 800905e:	461e      	mov	r6, r3
 8009060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009064:	2a30      	cmp	r2, #48	@ 0x30
 8009066:	d0fa      	beq.n	800905e <_dtoa_r+0xb06>
 8009068:	e5c2      	b.n	8008bf0 <_dtoa_r+0x698>
 800906a:	459a      	cmp	sl, r3
 800906c:	d1a4      	bne.n	8008fb8 <_dtoa_r+0xa60>
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	3301      	adds	r3, #1
 8009072:	9304      	str	r3, [sp, #16]
 8009074:	2331      	movs	r3, #49	@ 0x31
 8009076:	f88a 3000 	strb.w	r3, [sl]
 800907a:	e5b9      	b.n	8008bf0 <_dtoa_r+0x698>
 800907c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800907e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80090dc <_dtoa_r+0xb84>
 8009082:	b11b      	cbz	r3, 800908c <_dtoa_r+0xb34>
 8009084:	f10a 0308 	add.w	r3, sl, #8
 8009088:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	4650      	mov	r0, sl
 800908e:	b019      	add	sp, #100	@ 0x64
 8009090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009096:	2b01      	cmp	r3, #1
 8009098:	f77f ae37 	ble.w	8008d0a <_dtoa_r+0x7b2>
 800909c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800909e:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a0:	2001      	movs	r0, #1
 80090a2:	e655      	b.n	8008d50 <_dtoa_r+0x7f8>
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f77f aed6 	ble.w	8008e58 <_dtoa_r+0x900>
 80090ac:	4656      	mov	r6, sl
 80090ae:	4621      	mov	r1, r4
 80090b0:	4648      	mov	r0, r9
 80090b2:	f7ff f9c8 	bl	8008446 <quorem>
 80090b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80090ba:	f806 8b01 	strb.w	r8, [r6], #1
 80090be:	9b00      	ldr	r3, [sp, #0]
 80090c0:	eba6 020a 	sub.w	r2, r6, sl
 80090c4:	4293      	cmp	r3, r2
 80090c6:	ddb3      	ble.n	8009030 <_dtoa_r+0xad8>
 80090c8:	4649      	mov	r1, r9
 80090ca:	2300      	movs	r3, #0
 80090cc:	220a      	movs	r2, #10
 80090ce:	4658      	mov	r0, fp
 80090d0:	f000 f968 	bl	80093a4 <__multadd>
 80090d4:	4681      	mov	r9, r0
 80090d6:	e7ea      	b.n	80090ae <_dtoa_r+0xb56>
 80090d8:	0800d095 	.word	0x0800d095
 80090dc:	0800d019 	.word	0x0800d019

080090e0 <_free_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4605      	mov	r5, r0
 80090e4:	2900      	cmp	r1, #0
 80090e6:	d041      	beq.n	800916c <_free_r+0x8c>
 80090e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ec:	1f0c      	subs	r4, r1, #4
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bfb8      	it	lt
 80090f2:	18e4      	addlt	r4, r4, r3
 80090f4:	f000 f8e8 	bl	80092c8 <__malloc_lock>
 80090f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009170 <_free_r+0x90>)
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	b933      	cbnz	r3, 800910c <_free_r+0x2c>
 80090fe:	6063      	str	r3, [r4, #4]
 8009100:	6014      	str	r4, [r2, #0]
 8009102:	4628      	mov	r0, r5
 8009104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009108:	f000 b8e4 	b.w	80092d4 <__malloc_unlock>
 800910c:	42a3      	cmp	r3, r4
 800910e:	d908      	bls.n	8009122 <_free_r+0x42>
 8009110:	6820      	ldr	r0, [r4, #0]
 8009112:	1821      	adds	r1, r4, r0
 8009114:	428b      	cmp	r3, r1
 8009116:	bf01      	itttt	eq
 8009118:	6819      	ldreq	r1, [r3, #0]
 800911a:	685b      	ldreq	r3, [r3, #4]
 800911c:	1809      	addeq	r1, r1, r0
 800911e:	6021      	streq	r1, [r4, #0]
 8009120:	e7ed      	b.n	80090fe <_free_r+0x1e>
 8009122:	461a      	mov	r2, r3
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	b10b      	cbz	r3, 800912c <_free_r+0x4c>
 8009128:	42a3      	cmp	r3, r4
 800912a:	d9fa      	bls.n	8009122 <_free_r+0x42>
 800912c:	6811      	ldr	r1, [r2, #0]
 800912e:	1850      	adds	r0, r2, r1
 8009130:	42a0      	cmp	r0, r4
 8009132:	d10b      	bne.n	800914c <_free_r+0x6c>
 8009134:	6820      	ldr	r0, [r4, #0]
 8009136:	4401      	add	r1, r0
 8009138:	1850      	adds	r0, r2, r1
 800913a:	4283      	cmp	r3, r0
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	d1e0      	bne.n	8009102 <_free_r+0x22>
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	6053      	str	r3, [r2, #4]
 8009146:	4408      	add	r0, r1
 8009148:	6010      	str	r0, [r2, #0]
 800914a:	e7da      	b.n	8009102 <_free_r+0x22>
 800914c:	d902      	bls.n	8009154 <_free_r+0x74>
 800914e:	230c      	movs	r3, #12
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	e7d6      	b.n	8009102 <_free_r+0x22>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	1821      	adds	r1, r4, r0
 8009158:	428b      	cmp	r3, r1
 800915a:	bf04      	itt	eq
 800915c:	6819      	ldreq	r1, [r3, #0]
 800915e:	685b      	ldreq	r3, [r3, #4]
 8009160:	6063      	str	r3, [r4, #4]
 8009162:	bf04      	itt	eq
 8009164:	1809      	addeq	r1, r1, r0
 8009166:	6021      	streq	r1, [r4, #0]
 8009168:	6054      	str	r4, [r2, #4]
 800916a:	e7ca      	b.n	8009102 <_free_r+0x22>
 800916c:	bd38      	pop	{r3, r4, r5, pc}
 800916e:	bf00      	nop
 8009170:	200008d8 	.word	0x200008d8

08009174 <malloc>:
 8009174:	4b02      	ldr	r3, [pc, #8]	@ (8009180 <malloc+0xc>)
 8009176:	4601      	mov	r1, r0
 8009178:	6818      	ldr	r0, [r3, #0]
 800917a:	f000 b825 	b.w	80091c8 <_malloc_r>
 800917e:	bf00      	nop
 8009180:	20000030 	.word	0x20000030

08009184 <sbrk_aligned>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	4e0f      	ldr	r6, [pc, #60]	@ (80091c4 <sbrk_aligned+0x40>)
 8009188:	460c      	mov	r4, r1
 800918a:	6831      	ldr	r1, [r6, #0]
 800918c:	4605      	mov	r5, r0
 800918e:	b911      	cbnz	r1, 8009196 <sbrk_aligned+0x12>
 8009190:	f000 fe46 	bl	8009e20 <_sbrk_r>
 8009194:	6030      	str	r0, [r6, #0]
 8009196:	4621      	mov	r1, r4
 8009198:	4628      	mov	r0, r5
 800919a:	f000 fe41 	bl	8009e20 <_sbrk_r>
 800919e:	1c43      	adds	r3, r0, #1
 80091a0:	d103      	bne.n	80091aa <sbrk_aligned+0x26>
 80091a2:	f04f 34ff 	mov.w	r4, #4294967295
 80091a6:	4620      	mov	r0, r4
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	1cc4      	adds	r4, r0, #3
 80091ac:	f024 0403 	bic.w	r4, r4, #3
 80091b0:	42a0      	cmp	r0, r4
 80091b2:	d0f8      	beq.n	80091a6 <sbrk_aligned+0x22>
 80091b4:	1a21      	subs	r1, r4, r0
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 fe32 	bl	8009e20 <_sbrk_r>
 80091bc:	3001      	adds	r0, #1
 80091be:	d1f2      	bne.n	80091a6 <sbrk_aligned+0x22>
 80091c0:	e7ef      	b.n	80091a2 <sbrk_aligned+0x1e>
 80091c2:	bf00      	nop
 80091c4:	200008d4 	.word	0x200008d4

080091c8 <_malloc_r>:
 80091c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091cc:	1ccd      	adds	r5, r1, #3
 80091ce:	f025 0503 	bic.w	r5, r5, #3
 80091d2:	3508      	adds	r5, #8
 80091d4:	2d0c      	cmp	r5, #12
 80091d6:	bf38      	it	cc
 80091d8:	250c      	movcc	r5, #12
 80091da:	2d00      	cmp	r5, #0
 80091dc:	4606      	mov	r6, r0
 80091de:	db01      	blt.n	80091e4 <_malloc_r+0x1c>
 80091e0:	42a9      	cmp	r1, r5
 80091e2:	d904      	bls.n	80091ee <_malloc_r+0x26>
 80091e4:	230c      	movs	r3, #12
 80091e6:	6033      	str	r3, [r6, #0]
 80091e8:	2000      	movs	r0, #0
 80091ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092c4 <_malloc_r+0xfc>
 80091f2:	f000 f869 	bl	80092c8 <__malloc_lock>
 80091f6:	f8d8 3000 	ldr.w	r3, [r8]
 80091fa:	461c      	mov	r4, r3
 80091fc:	bb44      	cbnz	r4, 8009250 <_malloc_r+0x88>
 80091fe:	4629      	mov	r1, r5
 8009200:	4630      	mov	r0, r6
 8009202:	f7ff ffbf 	bl	8009184 <sbrk_aligned>
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	4604      	mov	r4, r0
 800920a:	d158      	bne.n	80092be <_malloc_r+0xf6>
 800920c:	f8d8 4000 	ldr.w	r4, [r8]
 8009210:	4627      	mov	r7, r4
 8009212:	2f00      	cmp	r7, #0
 8009214:	d143      	bne.n	800929e <_malloc_r+0xd6>
 8009216:	2c00      	cmp	r4, #0
 8009218:	d04b      	beq.n	80092b2 <_malloc_r+0xea>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	4639      	mov	r1, r7
 800921e:	4630      	mov	r0, r6
 8009220:	eb04 0903 	add.w	r9, r4, r3
 8009224:	f000 fdfc 	bl	8009e20 <_sbrk_r>
 8009228:	4581      	cmp	r9, r0
 800922a:	d142      	bne.n	80092b2 <_malloc_r+0xea>
 800922c:	6821      	ldr	r1, [r4, #0]
 800922e:	1a6d      	subs	r5, r5, r1
 8009230:	4629      	mov	r1, r5
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff ffa6 	bl	8009184 <sbrk_aligned>
 8009238:	3001      	adds	r0, #1
 800923a:	d03a      	beq.n	80092b2 <_malloc_r+0xea>
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	442b      	add	r3, r5
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	f8d8 3000 	ldr.w	r3, [r8]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	bb62      	cbnz	r2, 80092a4 <_malloc_r+0xdc>
 800924a:	f8c8 7000 	str.w	r7, [r8]
 800924e:	e00f      	b.n	8009270 <_malloc_r+0xa8>
 8009250:	6822      	ldr	r2, [r4, #0]
 8009252:	1b52      	subs	r2, r2, r5
 8009254:	d420      	bmi.n	8009298 <_malloc_r+0xd0>
 8009256:	2a0b      	cmp	r2, #11
 8009258:	d917      	bls.n	800928a <_malloc_r+0xc2>
 800925a:	1961      	adds	r1, r4, r5
 800925c:	42a3      	cmp	r3, r4
 800925e:	6025      	str	r5, [r4, #0]
 8009260:	bf18      	it	ne
 8009262:	6059      	strne	r1, [r3, #4]
 8009264:	6863      	ldr	r3, [r4, #4]
 8009266:	bf08      	it	eq
 8009268:	f8c8 1000 	streq.w	r1, [r8]
 800926c:	5162      	str	r2, [r4, r5]
 800926e:	604b      	str	r3, [r1, #4]
 8009270:	4630      	mov	r0, r6
 8009272:	f000 f82f 	bl	80092d4 <__malloc_unlock>
 8009276:	f104 000b 	add.w	r0, r4, #11
 800927a:	1d23      	adds	r3, r4, #4
 800927c:	f020 0007 	bic.w	r0, r0, #7
 8009280:	1ac2      	subs	r2, r0, r3
 8009282:	bf1c      	itt	ne
 8009284:	1a1b      	subne	r3, r3, r0
 8009286:	50a3      	strne	r3, [r4, r2]
 8009288:	e7af      	b.n	80091ea <_malloc_r+0x22>
 800928a:	6862      	ldr	r2, [r4, #4]
 800928c:	42a3      	cmp	r3, r4
 800928e:	bf0c      	ite	eq
 8009290:	f8c8 2000 	streq.w	r2, [r8]
 8009294:	605a      	strne	r2, [r3, #4]
 8009296:	e7eb      	b.n	8009270 <_malloc_r+0xa8>
 8009298:	4623      	mov	r3, r4
 800929a:	6864      	ldr	r4, [r4, #4]
 800929c:	e7ae      	b.n	80091fc <_malloc_r+0x34>
 800929e:	463c      	mov	r4, r7
 80092a0:	687f      	ldr	r7, [r7, #4]
 80092a2:	e7b6      	b.n	8009212 <_malloc_r+0x4a>
 80092a4:	461a      	mov	r2, r3
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	42a3      	cmp	r3, r4
 80092aa:	d1fb      	bne.n	80092a4 <_malloc_r+0xdc>
 80092ac:	2300      	movs	r3, #0
 80092ae:	6053      	str	r3, [r2, #4]
 80092b0:	e7de      	b.n	8009270 <_malloc_r+0xa8>
 80092b2:	230c      	movs	r3, #12
 80092b4:	6033      	str	r3, [r6, #0]
 80092b6:	4630      	mov	r0, r6
 80092b8:	f000 f80c 	bl	80092d4 <__malloc_unlock>
 80092bc:	e794      	b.n	80091e8 <_malloc_r+0x20>
 80092be:	6005      	str	r5, [r0, #0]
 80092c0:	e7d6      	b.n	8009270 <_malloc_r+0xa8>
 80092c2:	bf00      	nop
 80092c4:	200008d8 	.word	0x200008d8

080092c8 <__malloc_lock>:
 80092c8:	4801      	ldr	r0, [pc, #4]	@ (80092d0 <__malloc_lock+0x8>)
 80092ca:	f7ff b8ac 	b.w	8008426 <__retarget_lock_acquire_recursive>
 80092ce:	bf00      	nop
 80092d0:	200008d0 	.word	0x200008d0

080092d4 <__malloc_unlock>:
 80092d4:	4801      	ldr	r0, [pc, #4]	@ (80092dc <__malloc_unlock+0x8>)
 80092d6:	f7ff b8a7 	b.w	8008428 <__retarget_lock_release_recursive>
 80092da:	bf00      	nop
 80092dc:	200008d0 	.word	0x200008d0

080092e0 <_Balloc>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	69c6      	ldr	r6, [r0, #28]
 80092e4:	4604      	mov	r4, r0
 80092e6:	460d      	mov	r5, r1
 80092e8:	b976      	cbnz	r6, 8009308 <_Balloc+0x28>
 80092ea:	2010      	movs	r0, #16
 80092ec:	f7ff ff42 	bl	8009174 <malloc>
 80092f0:	4602      	mov	r2, r0
 80092f2:	61e0      	str	r0, [r4, #28]
 80092f4:	b920      	cbnz	r0, 8009300 <_Balloc+0x20>
 80092f6:	4b18      	ldr	r3, [pc, #96]	@ (8009358 <_Balloc+0x78>)
 80092f8:	4818      	ldr	r0, [pc, #96]	@ (800935c <_Balloc+0x7c>)
 80092fa:	216b      	movs	r1, #107	@ 0x6b
 80092fc:	f000 fda0 	bl	8009e40 <__assert_func>
 8009300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009304:	6006      	str	r6, [r0, #0]
 8009306:	60c6      	str	r6, [r0, #12]
 8009308:	69e6      	ldr	r6, [r4, #28]
 800930a:	68f3      	ldr	r3, [r6, #12]
 800930c:	b183      	cbz	r3, 8009330 <_Balloc+0x50>
 800930e:	69e3      	ldr	r3, [r4, #28]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009316:	b9b8      	cbnz	r0, 8009348 <_Balloc+0x68>
 8009318:	2101      	movs	r1, #1
 800931a:	fa01 f605 	lsl.w	r6, r1, r5
 800931e:	1d72      	adds	r2, r6, #5
 8009320:	0092      	lsls	r2, r2, #2
 8009322:	4620      	mov	r0, r4
 8009324:	f000 fdaa 	bl	8009e7c <_calloc_r>
 8009328:	b160      	cbz	r0, 8009344 <_Balloc+0x64>
 800932a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800932e:	e00e      	b.n	800934e <_Balloc+0x6e>
 8009330:	2221      	movs	r2, #33	@ 0x21
 8009332:	2104      	movs	r1, #4
 8009334:	4620      	mov	r0, r4
 8009336:	f000 fda1 	bl	8009e7c <_calloc_r>
 800933a:	69e3      	ldr	r3, [r4, #28]
 800933c:	60f0      	str	r0, [r6, #12]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e4      	bne.n	800930e <_Balloc+0x2e>
 8009344:	2000      	movs	r0, #0
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	6802      	ldr	r2, [r0, #0]
 800934a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800934e:	2300      	movs	r3, #0
 8009350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009354:	e7f7      	b.n	8009346 <_Balloc+0x66>
 8009356:	bf00      	nop
 8009358:	0800d026 	.word	0x0800d026
 800935c:	0800d0a6 	.word	0x0800d0a6

08009360 <_Bfree>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	69c6      	ldr	r6, [r0, #28]
 8009364:	4605      	mov	r5, r0
 8009366:	460c      	mov	r4, r1
 8009368:	b976      	cbnz	r6, 8009388 <_Bfree+0x28>
 800936a:	2010      	movs	r0, #16
 800936c:	f7ff ff02 	bl	8009174 <malloc>
 8009370:	4602      	mov	r2, r0
 8009372:	61e8      	str	r0, [r5, #28]
 8009374:	b920      	cbnz	r0, 8009380 <_Bfree+0x20>
 8009376:	4b09      	ldr	r3, [pc, #36]	@ (800939c <_Bfree+0x3c>)
 8009378:	4809      	ldr	r0, [pc, #36]	@ (80093a0 <_Bfree+0x40>)
 800937a:	218f      	movs	r1, #143	@ 0x8f
 800937c:	f000 fd60 	bl	8009e40 <__assert_func>
 8009380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009384:	6006      	str	r6, [r0, #0]
 8009386:	60c6      	str	r6, [r0, #12]
 8009388:	b13c      	cbz	r4, 800939a <_Bfree+0x3a>
 800938a:	69eb      	ldr	r3, [r5, #28]
 800938c:	6862      	ldr	r2, [r4, #4]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009394:	6021      	str	r1, [r4, #0]
 8009396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	0800d026 	.word	0x0800d026
 80093a0:	0800d0a6 	.word	0x0800d0a6

080093a4 <__multadd>:
 80093a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a8:	690d      	ldr	r5, [r1, #16]
 80093aa:	4607      	mov	r7, r0
 80093ac:	460c      	mov	r4, r1
 80093ae:	461e      	mov	r6, r3
 80093b0:	f101 0c14 	add.w	ip, r1, #20
 80093b4:	2000      	movs	r0, #0
 80093b6:	f8dc 3000 	ldr.w	r3, [ip]
 80093ba:	b299      	uxth	r1, r3
 80093bc:	fb02 6101 	mla	r1, r2, r1, r6
 80093c0:	0c1e      	lsrs	r6, r3, #16
 80093c2:	0c0b      	lsrs	r3, r1, #16
 80093c4:	fb02 3306 	mla	r3, r2, r6, r3
 80093c8:	b289      	uxth	r1, r1
 80093ca:	3001      	adds	r0, #1
 80093cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093d0:	4285      	cmp	r5, r0
 80093d2:	f84c 1b04 	str.w	r1, [ip], #4
 80093d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093da:	dcec      	bgt.n	80093b6 <__multadd+0x12>
 80093dc:	b30e      	cbz	r6, 8009422 <__multadd+0x7e>
 80093de:	68a3      	ldr	r3, [r4, #8]
 80093e0:	42ab      	cmp	r3, r5
 80093e2:	dc19      	bgt.n	8009418 <__multadd+0x74>
 80093e4:	6861      	ldr	r1, [r4, #4]
 80093e6:	4638      	mov	r0, r7
 80093e8:	3101      	adds	r1, #1
 80093ea:	f7ff ff79 	bl	80092e0 <_Balloc>
 80093ee:	4680      	mov	r8, r0
 80093f0:	b928      	cbnz	r0, 80093fe <__multadd+0x5a>
 80093f2:	4602      	mov	r2, r0
 80093f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009428 <__multadd+0x84>)
 80093f6:	480d      	ldr	r0, [pc, #52]	@ (800942c <__multadd+0x88>)
 80093f8:	21ba      	movs	r1, #186	@ 0xba
 80093fa:	f000 fd21 	bl	8009e40 <__assert_func>
 80093fe:	6922      	ldr	r2, [r4, #16]
 8009400:	3202      	adds	r2, #2
 8009402:	f104 010c 	add.w	r1, r4, #12
 8009406:	0092      	lsls	r2, r2, #2
 8009408:	300c      	adds	r0, #12
 800940a:	f7ff f80e 	bl	800842a <memcpy>
 800940e:	4621      	mov	r1, r4
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff ffa5 	bl	8009360 <_Bfree>
 8009416:	4644      	mov	r4, r8
 8009418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800941c:	3501      	adds	r5, #1
 800941e:	615e      	str	r6, [r3, #20]
 8009420:	6125      	str	r5, [r4, #16]
 8009422:	4620      	mov	r0, r4
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	0800d095 	.word	0x0800d095
 800942c:	0800d0a6 	.word	0x0800d0a6

08009430 <__hi0bits>:
 8009430:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009434:	4603      	mov	r3, r0
 8009436:	bf36      	itet	cc
 8009438:	0403      	lslcc	r3, r0, #16
 800943a:	2000      	movcs	r0, #0
 800943c:	2010      	movcc	r0, #16
 800943e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009442:	bf3c      	itt	cc
 8009444:	021b      	lslcc	r3, r3, #8
 8009446:	3008      	addcc	r0, #8
 8009448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800944c:	bf3c      	itt	cc
 800944e:	011b      	lslcc	r3, r3, #4
 8009450:	3004      	addcc	r0, #4
 8009452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009456:	bf3c      	itt	cc
 8009458:	009b      	lslcc	r3, r3, #2
 800945a:	3002      	addcc	r0, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	db05      	blt.n	800946c <__hi0bits+0x3c>
 8009460:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009464:	f100 0001 	add.w	r0, r0, #1
 8009468:	bf08      	it	eq
 800946a:	2020      	moveq	r0, #32
 800946c:	4770      	bx	lr

0800946e <__lo0bits>:
 800946e:	6803      	ldr	r3, [r0, #0]
 8009470:	4602      	mov	r2, r0
 8009472:	f013 0007 	ands.w	r0, r3, #7
 8009476:	d00b      	beq.n	8009490 <__lo0bits+0x22>
 8009478:	07d9      	lsls	r1, r3, #31
 800947a:	d421      	bmi.n	80094c0 <__lo0bits+0x52>
 800947c:	0798      	lsls	r0, r3, #30
 800947e:	bf49      	itett	mi
 8009480:	085b      	lsrmi	r3, r3, #1
 8009482:	089b      	lsrpl	r3, r3, #2
 8009484:	2001      	movmi	r0, #1
 8009486:	6013      	strmi	r3, [r2, #0]
 8009488:	bf5c      	itt	pl
 800948a:	6013      	strpl	r3, [r2, #0]
 800948c:	2002      	movpl	r0, #2
 800948e:	4770      	bx	lr
 8009490:	b299      	uxth	r1, r3
 8009492:	b909      	cbnz	r1, 8009498 <__lo0bits+0x2a>
 8009494:	0c1b      	lsrs	r3, r3, #16
 8009496:	2010      	movs	r0, #16
 8009498:	b2d9      	uxtb	r1, r3
 800949a:	b909      	cbnz	r1, 80094a0 <__lo0bits+0x32>
 800949c:	3008      	adds	r0, #8
 800949e:	0a1b      	lsrs	r3, r3, #8
 80094a0:	0719      	lsls	r1, r3, #28
 80094a2:	bf04      	itt	eq
 80094a4:	091b      	lsreq	r3, r3, #4
 80094a6:	3004      	addeq	r0, #4
 80094a8:	0799      	lsls	r1, r3, #30
 80094aa:	bf04      	itt	eq
 80094ac:	089b      	lsreq	r3, r3, #2
 80094ae:	3002      	addeq	r0, #2
 80094b0:	07d9      	lsls	r1, r3, #31
 80094b2:	d403      	bmi.n	80094bc <__lo0bits+0x4e>
 80094b4:	085b      	lsrs	r3, r3, #1
 80094b6:	f100 0001 	add.w	r0, r0, #1
 80094ba:	d003      	beq.n	80094c4 <__lo0bits+0x56>
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	4770      	bx	lr
 80094c0:	2000      	movs	r0, #0
 80094c2:	4770      	bx	lr
 80094c4:	2020      	movs	r0, #32
 80094c6:	4770      	bx	lr

080094c8 <__i2b>:
 80094c8:	b510      	push	{r4, lr}
 80094ca:	460c      	mov	r4, r1
 80094cc:	2101      	movs	r1, #1
 80094ce:	f7ff ff07 	bl	80092e0 <_Balloc>
 80094d2:	4602      	mov	r2, r0
 80094d4:	b928      	cbnz	r0, 80094e2 <__i2b+0x1a>
 80094d6:	4b05      	ldr	r3, [pc, #20]	@ (80094ec <__i2b+0x24>)
 80094d8:	4805      	ldr	r0, [pc, #20]	@ (80094f0 <__i2b+0x28>)
 80094da:	f240 1145 	movw	r1, #325	@ 0x145
 80094de:	f000 fcaf 	bl	8009e40 <__assert_func>
 80094e2:	2301      	movs	r3, #1
 80094e4:	6144      	str	r4, [r0, #20]
 80094e6:	6103      	str	r3, [r0, #16]
 80094e8:	bd10      	pop	{r4, pc}
 80094ea:	bf00      	nop
 80094ec:	0800d095 	.word	0x0800d095
 80094f0:	0800d0a6 	.word	0x0800d0a6

080094f4 <__multiply>:
 80094f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	4614      	mov	r4, r2
 80094fa:	690a      	ldr	r2, [r1, #16]
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	429a      	cmp	r2, r3
 8009500:	bfa8      	it	ge
 8009502:	4623      	movge	r3, r4
 8009504:	460f      	mov	r7, r1
 8009506:	bfa4      	itt	ge
 8009508:	460c      	movge	r4, r1
 800950a:	461f      	movge	r7, r3
 800950c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009510:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009514:	68a3      	ldr	r3, [r4, #8]
 8009516:	6861      	ldr	r1, [r4, #4]
 8009518:	eb0a 0609 	add.w	r6, sl, r9
 800951c:	42b3      	cmp	r3, r6
 800951e:	b085      	sub	sp, #20
 8009520:	bfb8      	it	lt
 8009522:	3101      	addlt	r1, #1
 8009524:	f7ff fedc 	bl	80092e0 <_Balloc>
 8009528:	b930      	cbnz	r0, 8009538 <__multiply+0x44>
 800952a:	4602      	mov	r2, r0
 800952c:	4b44      	ldr	r3, [pc, #272]	@ (8009640 <__multiply+0x14c>)
 800952e:	4845      	ldr	r0, [pc, #276]	@ (8009644 <__multiply+0x150>)
 8009530:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009534:	f000 fc84 	bl	8009e40 <__assert_func>
 8009538:	f100 0514 	add.w	r5, r0, #20
 800953c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009540:	462b      	mov	r3, r5
 8009542:	2200      	movs	r2, #0
 8009544:	4543      	cmp	r3, r8
 8009546:	d321      	bcc.n	800958c <__multiply+0x98>
 8009548:	f107 0114 	add.w	r1, r7, #20
 800954c:	f104 0214 	add.w	r2, r4, #20
 8009550:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009554:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	1b13      	subs	r3, r2, r4
 800955c:	3b15      	subs	r3, #21
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	3304      	adds	r3, #4
 8009564:	f104 0715 	add.w	r7, r4, #21
 8009568:	42ba      	cmp	r2, r7
 800956a:	bf38      	it	cc
 800956c:	2304      	movcc	r3, #4
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	9b02      	ldr	r3, [sp, #8]
 8009572:	9103      	str	r1, [sp, #12]
 8009574:	428b      	cmp	r3, r1
 8009576:	d80c      	bhi.n	8009592 <__multiply+0x9e>
 8009578:	2e00      	cmp	r6, #0
 800957a:	dd03      	ble.n	8009584 <__multiply+0x90>
 800957c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009580:	2b00      	cmp	r3, #0
 8009582:	d05b      	beq.n	800963c <__multiply+0x148>
 8009584:	6106      	str	r6, [r0, #16]
 8009586:	b005      	add	sp, #20
 8009588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958c:	f843 2b04 	str.w	r2, [r3], #4
 8009590:	e7d8      	b.n	8009544 <__multiply+0x50>
 8009592:	f8b1 a000 	ldrh.w	sl, [r1]
 8009596:	f1ba 0f00 	cmp.w	sl, #0
 800959a:	d024      	beq.n	80095e6 <__multiply+0xf2>
 800959c:	f104 0e14 	add.w	lr, r4, #20
 80095a0:	46a9      	mov	r9, r5
 80095a2:	f04f 0c00 	mov.w	ip, #0
 80095a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095aa:	f8d9 3000 	ldr.w	r3, [r9]
 80095ae:	fa1f fb87 	uxth.w	fp, r7
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80095b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80095bc:	f8d9 7000 	ldr.w	r7, [r9]
 80095c0:	4463      	add	r3, ip
 80095c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80095ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095d4:	4572      	cmp	r2, lr
 80095d6:	f849 3b04 	str.w	r3, [r9], #4
 80095da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095de:	d8e2      	bhi.n	80095a6 <__multiply+0xb2>
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	f845 c003 	str.w	ip, [r5, r3]
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80095ec:	3104      	adds	r1, #4
 80095ee:	f1b9 0f00 	cmp.w	r9, #0
 80095f2:	d021      	beq.n	8009638 <__multiply+0x144>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	f104 0c14 	add.w	ip, r4, #20
 80095fa:	46ae      	mov	lr, r5
 80095fc:	f04f 0a00 	mov.w	sl, #0
 8009600:	f8bc b000 	ldrh.w	fp, [ip]
 8009604:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009608:	fb09 770b 	mla	r7, r9, fp, r7
 800960c:	4457      	add	r7, sl
 800960e:	b29b      	uxth	r3, r3
 8009610:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009614:	f84e 3b04 	str.w	r3, [lr], #4
 8009618:	f85c 3b04 	ldr.w	r3, [ip], #4
 800961c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009620:	f8be 3000 	ldrh.w	r3, [lr]
 8009624:	fb09 330a 	mla	r3, r9, sl, r3
 8009628:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800962c:	4562      	cmp	r2, ip
 800962e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009632:	d8e5      	bhi.n	8009600 <__multiply+0x10c>
 8009634:	9f01      	ldr	r7, [sp, #4]
 8009636:	51eb      	str	r3, [r5, r7]
 8009638:	3504      	adds	r5, #4
 800963a:	e799      	b.n	8009570 <__multiply+0x7c>
 800963c:	3e01      	subs	r6, #1
 800963e:	e79b      	b.n	8009578 <__multiply+0x84>
 8009640:	0800d095 	.word	0x0800d095
 8009644:	0800d0a6 	.word	0x0800d0a6

08009648 <__pow5mult>:
 8009648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800964c:	4615      	mov	r5, r2
 800964e:	f012 0203 	ands.w	r2, r2, #3
 8009652:	4607      	mov	r7, r0
 8009654:	460e      	mov	r6, r1
 8009656:	d007      	beq.n	8009668 <__pow5mult+0x20>
 8009658:	4c25      	ldr	r4, [pc, #148]	@ (80096f0 <__pow5mult+0xa8>)
 800965a:	3a01      	subs	r2, #1
 800965c:	2300      	movs	r3, #0
 800965e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009662:	f7ff fe9f 	bl	80093a4 <__multadd>
 8009666:	4606      	mov	r6, r0
 8009668:	10ad      	asrs	r5, r5, #2
 800966a:	d03d      	beq.n	80096e8 <__pow5mult+0xa0>
 800966c:	69fc      	ldr	r4, [r7, #28]
 800966e:	b97c      	cbnz	r4, 8009690 <__pow5mult+0x48>
 8009670:	2010      	movs	r0, #16
 8009672:	f7ff fd7f 	bl	8009174 <malloc>
 8009676:	4602      	mov	r2, r0
 8009678:	61f8      	str	r0, [r7, #28]
 800967a:	b928      	cbnz	r0, 8009688 <__pow5mult+0x40>
 800967c:	4b1d      	ldr	r3, [pc, #116]	@ (80096f4 <__pow5mult+0xac>)
 800967e:	481e      	ldr	r0, [pc, #120]	@ (80096f8 <__pow5mult+0xb0>)
 8009680:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009684:	f000 fbdc 	bl	8009e40 <__assert_func>
 8009688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800968c:	6004      	str	r4, [r0, #0]
 800968e:	60c4      	str	r4, [r0, #12]
 8009690:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009698:	b94c      	cbnz	r4, 80096ae <__pow5mult+0x66>
 800969a:	f240 2171 	movw	r1, #625	@ 0x271
 800969e:	4638      	mov	r0, r7
 80096a0:	f7ff ff12 	bl	80094c8 <__i2b>
 80096a4:	2300      	movs	r3, #0
 80096a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80096aa:	4604      	mov	r4, r0
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	f04f 0900 	mov.w	r9, #0
 80096b2:	07eb      	lsls	r3, r5, #31
 80096b4:	d50a      	bpl.n	80096cc <__pow5mult+0x84>
 80096b6:	4631      	mov	r1, r6
 80096b8:	4622      	mov	r2, r4
 80096ba:	4638      	mov	r0, r7
 80096bc:	f7ff ff1a 	bl	80094f4 <__multiply>
 80096c0:	4631      	mov	r1, r6
 80096c2:	4680      	mov	r8, r0
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff fe4b 	bl	8009360 <_Bfree>
 80096ca:	4646      	mov	r6, r8
 80096cc:	106d      	asrs	r5, r5, #1
 80096ce:	d00b      	beq.n	80096e8 <__pow5mult+0xa0>
 80096d0:	6820      	ldr	r0, [r4, #0]
 80096d2:	b938      	cbnz	r0, 80096e4 <__pow5mult+0x9c>
 80096d4:	4622      	mov	r2, r4
 80096d6:	4621      	mov	r1, r4
 80096d8:	4638      	mov	r0, r7
 80096da:	f7ff ff0b 	bl	80094f4 <__multiply>
 80096de:	6020      	str	r0, [r4, #0]
 80096e0:	f8c0 9000 	str.w	r9, [r0]
 80096e4:	4604      	mov	r4, r0
 80096e6:	e7e4      	b.n	80096b2 <__pow5mult+0x6a>
 80096e8:	4630      	mov	r0, r6
 80096ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ee:	bf00      	nop
 80096f0:	0800d100 	.word	0x0800d100
 80096f4:	0800d026 	.word	0x0800d026
 80096f8:	0800d0a6 	.word	0x0800d0a6

080096fc <__lshift>:
 80096fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009700:	460c      	mov	r4, r1
 8009702:	6849      	ldr	r1, [r1, #4]
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	4607      	mov	r7, r0
 800970e:	4691      	mov	r9, r2
 8009710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009714:	f108 0601 	add.w	r6, r8, #1
 8009718:	42b3      	cmp	r3, r6
 800971a:	db0b      	blt.n	8009734 <__lshift+0x38>
 800971c:	4638      	mov	r0, r7
 800971e:	f7ff fddf 	bl	80092e0 <_Balloc>
 8009722:	4605      	mov	r5, r0
 8009724:	b948      	cbnz	r0, 800973a <__lshift+0x3e>
 8009726:	4602      	mov	r2, r0
 8009728:	4b28      	ldr	r3, [pc, #160]	@ (80097cc <__lshift+0xd0>)
 800972a:	4829      	ldr	r0, [pc, #164]	@ (80097d0 <__lshift+0xd4>)
 800972c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009730:	f000 fb86 	bl	8009e40 <__assert_func>
 8009734:	3101      	adds	r1, #1
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	e7ee      	b.n	8009718 <__lshift+0x1c>
 800973a:	2300      	movs	r3, #0
 800973c:	f100 0114 	add.w	r1, r0, #20
 8009740:	f100 0210 	add.w	r2, r0, #16
 8009744:	4618      	mov	r0, r3
 8009746:	4553      	cmp	r3, sl
 8009748:	db33      	blt.n	80097b2 <__lshift+0xb6>
 800974a:	6920      	ldr	r0, [r4, #16]
 800974c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009750:	f104 0314 	add.w	r3, r4, #20
 8009754:	f019 091f 	ands.w	r9, r9, #31
 8009758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800975c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009760:	d02b      	beq.n	80097ba <__lshift+0xbe>
 8009762:	f1c9 0e20 	rsb	lr, r9, #32
 8009766:	468a      	mov	sl, r1
 8009768:	2200      	movs	r2, #0
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	fa00 f009 	lsl.w	r0, r0, r9
 8009770:	4310      	orrs	r0, r2
 8009772:	f84a 0b04 	str.w	r0, [sl], #4
 8009776:	f853 2b04 	ldr.w	r2, [r3], #4
 800977a:	459c      	cmp	ip, r3
 800977c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009780:	d8f3      	bhi.n	800976a <__lshift+0x6e>
 8009782:	ebac 0304 	sub.w	r3, ip, r4
 8009786:	3b15      	subs	r3, #21
 8009788:	f023 0303 	bic.w	r3, r3, #3
 800978c:	3304      	adds	r3, #4
 800978e:	f104 0015 	add.w	r0, r4, #21
 8009792:	4584      	cmp	ip, r0
 8009794:	bf38      	it	cc
 8009796:	2304      	movcc	r3, #4
 8009798:	50ca      	str	r2, [r1, r3]
 800979a:	b10a      	cbz	r2, 80097a0 <__lshift+0xa4>
 800979c:	f108 0602 	add.w	r6, r8, #2
 80097a0:	3e01      	subs	r6, #1
 80097a2:	4638      	mov	r0, r7
 80097a4:	612e      	str	r6, [r5, #16]
 80097a6:	4621      	mov	r1, r4
 80097a8:	f7ff fdda 	bl	8009360 <_Bfree>
 80097ac:	4628      	mov	r0, r5
 80097ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80097b6:	3301      	adds	r3, #1
 80097b8:	e7c5      	b.n	8009746 <__lshift+0x4a>
 80097ba:	3904      	subs	r1, #4
 80097bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80097c4:	459c      	cmp	ip, r3
 80097c6:	d8f9      	bhi.n	80097bc <__lshift+0xc0>
 80097c8:	e7ea      	b.n	80097a0 <__lshift+0xa4>
 80097ca:	bf00      	nop
 80097cc:	0800d095 	.word	0x0800d095
 80097d0:	0800d0a6 	.word	0x0800d0a6

080097d4 <__mcmp>:
 80097d4:	690a      	ldr	r2, [r1, #16]
 80097d6:	4603      	mov	r3, r0
 80097d8:	6900      	ldr	r0, [r0, #16]
 80097da:	1a80      	subs	r0, r0, r2
 80097dc:	b530      	push	{r4, r5, lr}
 80097de:	d10e      	bne.n	80097fe <__mcmp+0x2a>
 80097e0:	3314      	adds	r3, #20
 80097e2:	3114      	adds	r1, #20
 80097e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097f4:	4295      	cmp	r5, r2
 80097f6:	d003      	beq.n	8009800 <__mcmp+0x2c>
 80097f8:	d205      	bcs.n	8009806 <__mcmp+0x32>
 80097fa:	f04f 30ff 	mov.w	r0, #4294967295
 80097fe:	bd30      	pop	{r4, r5, pc}
 8009800:	42a3      	cmp	r3, r4
 8009802:	d3f3      	bcc.n	80097ec <__mcmp+0x18>
 8009804:	e7fb      	b.n	80097fe <__mcmp+0x2a>
 8009806:	2001      	movs	r0, #1
 8009808:	e7f9      	b.n	80097fe <__mcmp+0x2a>
	...

0800980c <__mdiff>:
 800980c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4689      	mov	r9, r1
 8009812:	4606      	mov	r6, r0
 8009814:	4611      	mov	r1, r2
 8009816:	4648      	mov	r0, r9
 8009818:	4614      	mov	r4, r2
 800981a:	f7ff ffdb 	bl	80097d4 <__mcmp>
 800981e:	1e05      	subs	r5, r0, #0
 8009820:	d112      	bne.n	8009848 <__mdiff+0x3c>
 8009822:	4629      	mov	r1, r5
 8009824:	4630      	mov	r0, r6
 8009826:	f7ff fd5b 	bl	80092e0 <_Balloc>
 800982a:	4602      	mov	r2, r0
 800982c:	b928      	cbnz	r0, 800983a <__mdiff+0x2e>
 800982e:	4b3f      	ldr	r3, [pc, #252]	@ (800992c <__mdiff+0x120>)
 8009830:	f240 2137 	movw	r1, #567	@ 0x237
 8009834:	483e      	ldr	r0, [pc, #248]	@ (8009930 <__mdiff+0x124>)
 8009836:	f000 fb03 	bl	8009e40 <__assert_func>
 800983a:	2301      	movs	r3, #1
 800983c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009840:	4610      	mov	r0, r2
 8009842:	b003      	add	sp, #12
 8009844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009848:	bfbc      	itt	lt
 800984a:	464b      	movlt	r3, r9
 800984c:	46a1      	movlt	r9, r4
 800984e:	4630      	mov	r0, r6
 8009850:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009854:	bfba      	itte	lt
 8009856:	461c      	movlt	r4, r3
 8009858:	2501      	movlt	r5, #1
 800985a:	2500      	movge	r5, #0
 800985c:	f7ff fd40 	bl	80092e0 <_Balloc>
 8009860:	4602      	mov	r2, r0
 8009862:	b918      	cbnz	r0, 800986c <__mdiff+0x60>
 8009864:	4b31      	ldr	r3, [pc, #196]	@ (800992c <__mdiff+0x120>)
 8009866:	f240 2145 	movw	r1, #581	@ 0x245
 800986a:	e7e3      	b.n	8009834 <__mdiff+0x28>
 800986c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009870:	6926      	ldr	r6, [r4, #16]
 8009872:	60c5      	str	r5, [r0, #12]
 8009874:	f109 0310 	add.w	r3, r9, #16
 8009878:	f109 0514 	add.w	r5, r9, #20
 800987c:	f104 0e14 	add.w	lr, r4, #20
 8009880:	f100 0b14 	add.w	fp, r0, #20
 8009884:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009888:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	46d9      	mov	r9, fp
 8009890:	f04f 0c00 	mov.w	ip, #0
 8009894:	9b01      	ldr	r3, [sp, #4]
 8009896:	f85e 0b04 	ldr.w	r0, [lr], #4
 800989a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	fa1f f38a 	uxth.w	r3, sl
 80098a4:	4619      	mov	r1, r3
 80098a6:	b283      	uxth	r3, r0
 80098a8:	1acb      	subs	r3, r1, r3
 80098aa:	0c00      	lsrs	r0, r0, #16
 80098ac:	4463      	add	r3, ip
 80098ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80098b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80098bc:	4576      	cmp	r6, lr
 80098be:	f849 3b04 	str.w	r3, [r9], #4
 80098c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098c6:	d8e5      	bhi.n	8009894 <__mdiff+0x88>
 80098c8:	1b33      	subs	r3, r6, r4
 80098ca:	3b15      	subs	r3, #21
 80098cc:	f023 0303 	bic.w	r3, r3, #3
 80098d0:	3415      	adds	r4, #21
 80098d2:	3304      	adds	r3, #4
 80098d4:	42a6      	cmp	r6, r4
 80098d6:	bf38      	it	cc
 80098d8:	2304      	movcc	r3, #4
 80098da:	441d      	add	r5, r3
 80098dc:	445b      	add	r3, fp
 80098de:	461e      	mov	r6, r3
 80098e0:	462c      	mov	r4, r5
 80098e2:	4544      	cmp	r4, r8
 80098e4:	d30e      	bcc.n	8009904 <__mdiff+0xf8>
 80098e6:	f108 0103 	add.w	r1, r8, #3
 80098ea:	1b49      	subs	r1, r1, r5
 80098ec:	f021 0103 	bic.w	r1, r1, #3
 80098f0:	3d03      	subs	r5, #3
 80098f2:	45a8      	cmp	r8, r5
 80098f4:	bf38      	it	cc
 80098f6:	2100      	movcc	r1, #0
 80098f8:	440b      	add	r3, r1
 80098fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098fe:	b191      	cbz	r1, 8009926 <__mdiff+0x11a>
 8009900:	6117      	str	r7, [r2, #16]
 8009902:	e79d      	b.n	8009840 <__mdiff+0x34>
 8009904:	f854 1b04 	ldr.w	r1, [r4], #4
 8009908:	46e6      	mov	lr, ip
 800990a:	0c08      	lsrs	r0, r1, #16
 800990c:	fa1c fc81 	uxtah	ip, ip, r1
 8009910:	4471      	add	r1, lr
 8009912:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009916:	b289      	uxth	r1, r1
 8009918:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800991c:	f846 1b04 	str.w	r1, [r6], #4
 8009920:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009924:	e7dd      	b.n	80098e2 <__mdiff+0xd6>
 8009926:	3f01      	subs	r7, #1
 8009928:	e7e7      	b.n	80098fa <__mdiff+0xee>
 800992a:	bf00      	nop
 800992c:	0800d095 	.word	0x0800d095
 8009930:	0800d0a6 	.word	0x0800d0a6

08009934 <__d2b>:
 8009934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009938:	460f      	mov	r7, r1
 800993a:	2101      	movs	r1, #1
 800993c:	ec59 8b10 	vmov	r8, r9, d0
 8009940:	4616      	mov	r6, r2
 8009942:	f7ff fccd 	bl	80092e0 <_Balloc>
 8009946:	4604      	mov	r4, r0
 8009948:	b930      	cbnz	r0, 8009958 <__d2b+0x24>
 800994a:	4602      	mov	r2, r0
 800994c:	4b23      	ldr	r3, [pc, #140]	@ (80099dc <__d2b+0xa8>)
 800994e:	4824      	ldr	r0, [pc, #144]	@ (80099e0 <__d2b+0xac>)
 8009950:	f240 310f 	movw	r1, #783	@ 0x30f
 8009954:	f000 fa74 	bl	8009e40 <__assert_func>
 8009958:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800995c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009960:	b10d      	cbz	r5, 8009966 <__d2b+0x32>
 8009962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	f1b8 0300 	subs.w	r3, r8, #0
 800996c:	d023      	beq.n	80099b6 <__d2b+0x82>
 800996e:	4668      	mov	r0, sp
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	f7ff fd7c 	bl	800946e <__lo0bits>
 8009976:	e9dd 1200 	ldrd	r1, r2, [sp]
 800997a:	b1d0      	cbz	r0, 80099b2 <__d2b+0x7e>
 800997c:	f1c0 0320 	rsb	r3, r0, #32
 8009980:	fa02 f303 	lsl.w	r3, r2, r3
 8009984:	430b      	orrs	r3, r1
 8009986:	40c2      	lsrs	r2, r0
 8009988:	6163      	str	r3, [r4, #20]
 800998a:	9201      	str	r2, [sp, #4]
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	61a3      	str	r3, [r4, #24]
 8009990:	2b00      	cmp	r3, #0
 8009992:	bf0c      	ite	eq
 8009994:	2201      	moveq	r2, #1
 8009996:	2202      	movne	r2, #2
 8009998:	6122      	str	r2, [r4, #16]
 800999a:	b1a5      	cbz	r5, 80099c6 <__d2b+0x92>
 800999c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80099a0:	4405      	add	r5, r0
 80099a2:	603d      	str	r5, [r7, #0]
 80099a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099a8:	6030      	str	r0, [r6, #0]
 80099aa:	4620      	mov	r0, r4
 80099ac:	b003      	add	sp, #12
 80099ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099b2:	6161      	str	r1, [r4, #20]
 80099b4:	e7ea      	b.n	800998c <__d2b+0x58>
 80099b6:	a801      	add	r0, sp, #4
 80099b8:	f7ff fd59 	bl	800946e <__lo0bits>
 80099bc:	9b01      	ldr	r3, [sp, #4]
 80099be:	6163      	str	r3, [r4, #20]
 80099c0:	3020      	adds	r0, #32
 80099c2:	2201      	movs	r2, #1
 80099c4:	e7e8      	b.n	8009998 <__d2b+0x64>
 80099c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80099ce:	6038      	str	r0, [r7, #0]
 80099d0:	6918      	ldr	r0, [r3, #16]
 80099d2:	f7ff fd2d 	bl	8009430 <__hi0bits>
 80099d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099da:	e7e5      	b.n	80099a8 <__d2b+0x74>
 80099dc:	0800d095 	.word	0x0800d095
 80099e0:	0800d0a6 	.word	0x0800d0a6

080099e4 <__ssputs_r>:
 80099e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	688e      	ldr	r6, [r1, #8]
 80099ea:	461f      	mov	r7, r3
 80099ec:	42be      	cmp	r6, r7
 80099ee:	680b      	ldr	r3, [r1, #0]
 80099f0:	4682      	mov	sl, r0
 80099f2:	460c      	mov	r4, r1
 80099f4:	4690      	mov	r8, r2
 80099f6:	d82d      	bhi.n	8009a54 <__ssputs_r+0x70>
 80099f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a00:	d026      	beq.n	8009a50 <__ssputs_r+0x6c>
 8009a02:	6965      	ldr	r5, [r4, #20]
 8009a04:	6909      	ldr	r1, [r1, #16]
 8009a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a0a:	eba3 0901 	sub.w	r9, r3, r1
 8009a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a12:	1c7b      	adds	r3, r7, #1
 8009a14:	444b      	add	r3, r9
 8009a16:	106d      	asrs	r5, r5, #1
 8009a18:	429d      	cmp	r5, r3
 8009a1a:	bf38      	it	cc
 8009a1c:	461d      	movcc	r5, r3
 8009a1e:	0553      	lsls	r3, r2, #21
 8009a20:	d527      	bpl.n	8009a72 <__ssputs_r+0x8e>
 8009a22:	4629      	mov	r1, r5
 8009a24:	f7ff fbd0 	bl	80091c8 <_malloc_r>
 8009a28:	4606      	mov	r6, r0
 8009a2a:	b360      	cbz	r0, 8009a86 <__ssputs_r+0xa2>
 8009a2c:	6921      	ldr	r1, [r4, #16]
 8009a2e:	464a      	mov	r2, r9
 8009a30:	f7fe fcfb 	bl	800842a <memcpy>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	6126      	str	r6, [r4, #16]
 8009a42:	6165      	str	r5, [r4, #20]
 8009a44:	444e      	add	r6, r9
 8009a46:	eba5 0509 	sub.w	r5, r5, r9
 8009a4a:	6026      	str	r6, [r4, #0]
 8009a4c:	60a5      	str	r5, [r4, #8]
 8009a4e:	463e      	mov	r6, r7
 8009a50:	42be      	cmp	r6, r7
 8009a52:	d900      	bls.n	8009a56 <__ssputs_r+0x72>
 8009a54:	463e      	mov	r6, r7
 8009a56:	6820      	ldr	r0, [r4, #0]
 8009a58:	4632      	mov	r2, r6
 8009a5a:	4641      	mov	r1, r8
 8009a5c:	f000 f9c6 	bl	8009dec <memmove>
 8009a60:	68a3      	ldr	r3, [r4, #8]
 8009a62:	1b9b      	subs	r3, r3, r6
 8009a64:	60a3      	str	r3, [r4, #8]
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	4433      	add	r3, r6
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a72:	462a      	mov	r2, r5
 8009a74:	f000 fa28 	bl	8009ec8 <_realloc_r>
 8009a78:	4606      	mov	r6, r0
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d1e0      	bne.n	8009a40 <__ssputs_r+0x5c>
 8009a7e:	6921      	ldr	r1, [r4, #16]
 8009a80:	4650      	mov	r0, sl
 8009a82:	f7ff fb2d 	bl	80090e0 <_free_r>
 8009a86:	230c      	movs	r3, #12
 8009a88:	f8ca 3000 	str.w	r3, [sl]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	f04f 30ff 	mov.w	r0, #4294967295
 8009a98:	e7e9      	b.n	8009a6e <__ssputs_r+0x8a>
	...

08009a9c <_svfiprintf_r>:
 8009a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa0:	4698      	mov	r8, r3
 8009aa2:	898b      	ldrh	r3, [r1, #12]
 8009aa4:	061b      	lsls	r3, r3, #24
 8009aa6:	b09d      	sub	sp, #116	@ 0x74
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	4614      	mov	r4, r2
 8009aae:	d510      	bpl.n	8009ad2 <_svfiprintf_r+0x36>
 8009ab0:	690b      	ldr	r3, [r1, #16]
 8009ab2:	b973      	cbnz	r3, 8009ad2 <_svfiprintf_r+0x36>
 8009ab4:	2140      	movs	r1, #64	@ 0x40
 8009ab6:	f7ff fb87 	bl	80091c8 <_malloc_r>
 8009aba:	6028      	str	r0, [r5, #0]
 8009abc:	6128      	str	r0, [r5, #16]
 8009abe:	b930      	cbnz	r0, 8009ace <_svfiprintf_r+0x32>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	b01d      	add	sp, #116	@ 0x74
 8009aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ace:	2340      	movs	r3, #64	@ 0x40
 8009ad0:	616b      	str	r3, [r5, #20]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad6:	2320      	movs	r3, #32
 8009ad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ae0:	2330      	movs	r3, #48	@ 0x30
 8009ae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c80 <_svfiprintf_r+0x1e4>
 8009ae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009aea:	f04f 0901 	mov.w	r9, #1
 8009aee:	4623      	mov	r3, r4
 8009af0:	469a      	mov	sl, r3
 8009af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af6:	b10a      	cbz	r2, 8009afc <_svfiprintf_r+0x60>
 8009af8:	2a25      	cmp	r2, #37	@ 0x25
 8009afa:	d1f9      	bne.n	8009af0 <_svfiprintf_r+0x54>
 8009afc:	ebba 0b04 	subs.w	fp, sl, r4
 8009b00:	d00b      	beq.n	8009b1a <_svfiprintf_r+0x7e>
 8009b02:	465b      	mov	r3, fp
 8009b04:	4622      	mov	r2, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	4638      	mov	r0, r7
 8009b0a:	f7ff ff6b 	bl	80099e4 <__ssputs_r>
 8009b0e:	3001      	adds	r0, #1
 8009b10:	f000 80a7 	beq.w	8009c62 <_svfiprintf_r+0x1c6>
 8009b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b16:	445a      	add	r2, fp
 8009b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f000 809f 	beq.w	8009c62 <_svfiprintf_r+0x1c6>
 8009b24:	2300      	movs	r3, #0
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b2e:	f10a 0a01 	add.w	sl, sl, #1
 8009b32:	9304      	str	r3, [sp, #16]
 8009b34:	9307      	str	r3, [sp, #28]
 8009b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b3c:	4654      	mov	r4, sl
 8009b3e:	2205      	movs	r2, #5
 8009b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b44:	484e      	ldr	r0, [pc, #312]	@ (8009c80 <_svfiprintf_r+0x1e4>)
 8009b46:	f7f6 fb43 	bl	80001d0 <memchr>
 8009b4a:	9a04      	ldr	r2, [sp, #16]
 8009b4c:	b9d8      	cbnz	r0, 8009b86 <_svfiprintf_r+0xea>
 8009b4e:	06d0      	lsls	r0, r2, #27
 8009b50:	bf44      	itt	mi
 8009b52:	2320      	movmi	r3, #32
 8009b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b58:	0711      	lsls	r1, r2, #28
 8009b5a:	bf44      	itt	mi
 8009b5c:	232b      	movmi	r3, #43	@ 0x2b
 8009b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b62:	f89a 3000 	ldrb.w	r3, [sl]
 8009b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b68:	d015      	beq.n	8009b96 <_svfiprintf_r+0xfa>
 8009b6a:	9a07      	ldr	r2, [sp, #28]
 8009b6c:	4654      	mov	r4, sl
 8009b6e:	2000      	movs	r0, #0
 8009b70:	f04f 0c0a 	mov.w	ip, #10
 8009b74:	4621      	mov	r1, r4
 8009b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b7a:	3b30      	subs	r3, #48	@ 0x30
 8009b7c:	2b09      	cmp	r3, #9
 8009b7e:	d94b      	bls.n	8009c18 <_svfiprintf_r+0x17c>
 8009b80:	b1b0      	cbz	r0, 8009bb0 <_svfiprintf_r+0x114>
 8009b82:	9207      	str	r2, [sp, #28]
 8009b84:	e014      	b.n	8009bb0 <_svfiprintf_r+0x114>
 8009b86:	eba0 0308 	sub.w	r3, r0, r8
 8009b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	9304      	str	r3, [sp, #16]
 8009b92:	46a2      	mov	sl, r4
 8009b94:	e7d2      	b.n	8009b3c <_svfiprintf_r+0xa0>
 8009b96:	9b03      	ldr	r3, [sp, #12]
 8009b98:	1d19      	adds	r1, r3, #4
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	9103      	str	r1, [sp, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfbb      	ittet	lt
 8009ba2:	425b      	neglt	r3, r3
 8009ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ba8:	9307      	strge	r3, [sp, #28]
 8009baa:	9307      	strlt	r3, [sp, #28]
 8009bac:	bfb8      	it	lt
 8009bae:	9204      	strlt	r2, [sp, #16]
 8009bb0:	7823      	ldrb	r3, [r4, #0]
 8009bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bb4:	d10a      	bne.n	8009bcc <_svfiprintf_r+0x130>
 8009bb6:	7863      	ldrb	r3, [r4, #1]
 8009bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bba:	d132      	bne.n	8009c22 <_svfiprintf_r+0x186>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	1d1a      	adds	r2, r3, #4
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	9203      	str	r2, [sp, #12]
 8009bc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bc8:	3402      	adds	r4, #2
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c90 <_svfiprintf_r+0x1f4>
 8009bd0:	7821      	ldrb	r1, [r4, #0]
 8009bd2:	2203      	movs	r2, #3
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	f7f6 fafb 	bl	80001d0 <memchr>
 8009bda:	b138      	cbz	r0, 8009bec <_svfiprintf_r+0x150>
 8009bdc:	9b04      	ldr	r3, [sp, #16]
 8009bde:	eba0 000a 	sub.w	r0, r0, sl
 8009be2:	2240      	movs	r2, #64	@ 0x40
 8009be4:	4082      	lsls	r2, r0
 8009be6:	4313      	orrs	r3, r2
 8009be8:	3401      	adds	r4, #1
 8009bea:	9304      	str	r3, [sp, #16]
 8009bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf0:	4824      	ldr	r0, [pc, #144]	@ (8009c84 <_svfiprintf_r+0x1e8>)
 8009bf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bf6:	2206      	movs	r2, #6
 8009bf8:	f7f6 faea 	bl	80001d0 <memchr>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d036      	beq.n	8009c6e <_svfiprintf_r+0x1d2>
 8009c00:	4b21      	ldr	r3, [pc, #132]	@ (8009c88 <_svfiprintf_r+0x1ec>)
 8009c02:	bb1b      	cbnz	r3, 8009c4c <_svfiprintf_r+0x1b0>
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	3307      	adds	r3, #7
 8009c08:	f023 0307 	bic.w	r3, r3, #7
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	9303      	str	r3, [sp, #12]
 8009c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c12:	4433      	add	r3, r6
 8009c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c16:	e76a      	b.n	8009aee <_svfiprintf_r+0x52>
 8009c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	2001      	movs	r0, #1
 8009c20:	e7a8      	b.n	8009b74 <_svfiprintf_r+0xd8>
 8009c22:	2300      	movs	r3, #0
 8009c24:	3401      	adds	r4, #1
 8009c26:	9305      	str	r3, [sp, #20]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f04f 0c0a 	mov.w	ip, #10
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c34:	3a30      	subs	r2, #48	@ 0x30
 8009c36:	2a09      	cmp	r2, #9
 8009c38:	d903      	bls.n	8009c42 <_svfiprintf_r+0x1a6>
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0c6      	beq.n	8009bcc <_svfiprintf_r+0x130>
 8009c3e:	9105      	str	r1, [sp, #20]
 8009c40:	e7c4      	b.n	8009bcc <_svfiprintf_r+0x130>
 8009c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c46:	4604      	mov	r4, r0
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e7f0      	b.n	8009c2e <_svfiprintf_r+0x192>
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b0e      	ldr	r3, [pc, #56]	@ (8009c8c <_svfiprintf_r+0x1f0>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4638      	mov	r0, r7
 8009c58:	f7fd fe6a 	bl	8007930 <_printf_float>
 8009c5c:	1c42      	adds	r2, r0, #1
 8009c5e:	4606      	mov	r6, r0
 8009c60:	d1d6      	bne.n	8009c10 <_svfiprintf_r+0x174>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	065b      	lsls	r3, r3, #25
 8009c66:	f53f af2d 	bmi.w	8009ac4 <_svfiprintf_r+0x28>
 8009c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c6c:	e72c      	b.n	8009ac8 <_svfiprintf_r+0x2c>
 8009c6e:	ab03      	add	r3, sp, #12
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	462a      	mov	r2, r5
 8009c74:	4b05      	ldr	r3, [pc, #20]	@ (8009c8c <_svfiprintf_r+0x1f0>)
 8009c76:	a904      	add	r1, sp, #16
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7fe f8f1 	bl	8007e60 <_printf_i>
 8009c7e:	e7ed      	b.n	8009c5c <_svfiprintf_r+0x1c0>
 8009c80:	0800d200 	.word	0x0800d200
 8009c84:	0800d20a 	.word	0x0800d20a
 8009c88:	08007931 	.word	0x08007931
 8009c8c:	080099e5 	.word	0x080099e5
 8009c90:	0800d206 	.word	0x0800d206

08009c94 <__sflush_r>:
 8009c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	0716      	lsls	r6, r2, #28
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	d454      	bmi.n	8009d4e <__sflush_r+0xba>
 8009ca4:	684b      	ldr	r3, [r1, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dc02      	bgt.n	8009cb0 <__sflush_r+0x1c>
 8009caa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dd48      	ble.n	8009d42 <__sflush_r+0xae>
 8009cb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	d045      	beq.n	8009d42 <__sflush_r+0xae>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009cbc:	682f      	ldr	r7, [r5, #0]
 8009cbe:	6a21      	ldr	r1, [r4, #32]
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	d030      	beq.n	8009d26 <__sflush_r+0x92>
 8009cc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	0759      	lsls	r1, r3, #29
 8009cca:	d505      	bpl.n	8009cd8 <__sflush_r+0x44>
 8009ccc:	6863      	ldr	r3, [r4, #4]
 8009cce:	1ad2      	subs	r2, r2, r3
 8009cd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cd2:	b10b      	cbz	r3, 8009cd8 <__sflush_r+0x44>
 8009cd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cd6:	1ad2      	subs	r2, r2, r3
 8009cd8:	2300      	movs	r3, #0
 8009cda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cdc:	6a21      	ldr	r1, [r4, #32]
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b0      	blx	r6
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	d106      	bne.n	8009cf6 <__sflush_r+0x62>
 8009ce8:	6829      	ldr	r1, [r5, #0]
 8009cea:	291d      	cmp	r1, #29
 8009cec:	d82b      	bhi.n	8009d46 <__sflush_r+0xb2>
 8009cee:	4a2a      	ldr	r2, [pc, #168]	@ (8009d98 <__sflush_r+0x104>)
 8009cf0:	410a      	asrs	r2, r1
 8009cf2:	07d6      	lsls	r6, r2, #31
 8009cf4:	d427      	bmi.n	8009d46 <__sflush_r+0xb2>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	6062      	str	r2, [r4, #4]
 8009cfa:	04d9      	lsls	r1, r3, #19
 8009cfc:	6922      	ldr	r2, [r4, #16]
 8009cfe:	6022      	str	r2, [r4, #0]
 8009d00:	d504      	bpl.n	8009d0c <__sflush_r+0x78>
 8009d02:	1c42      	adds	r2, r0, #1
 8009d04:	d101      	bne.n	8009d0a <__sflush_r+0x76>
 8009d06:	682b      	ldr	r3, [r5, #0]
 8009d08:	b903      	cbnz	r3, 8009d0c <__sflush_r+0x78>
 8009d0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d0e:	602f      	str	r7, [r5, #0]
 8009d10:	b1b9      	cbz	r1, 8009d42 <__sflush_r+0xae>
 8009d12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d16:	4299      	cmp	r1, r3
 8009d18:	d002      	beq.n	8009d20 <__sflush_r+0x8c>
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f7ff f9e0 	bl	80090e0 <_free_r>
 8009d20:	2300      	movs	r3, #0
 8009d22:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d24:	e00d      	b.n	8009d42 <__sflush_r+0xae>
 8009d26:	2301      	movs	r3, #1
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b0      	blx	r6
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	1c50      	adds	r0, r2, #1
 8009d30:	d1c9      	bne.n	8009cc6 <__sflush_r+0x32>
 8009d32:	682b      	ldr	r3, [r5, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0c6      	beq.n	8009cc6 <__sflush_r+0x32>
 8009d38:	2b1d      	cmp	r3, #29
 8009d3a:	d001      	beq.n	8009d40 <__sflush_r+0xac>
 8009d3c:	2b16      	cmp	r3, #22
 8009d3e:	d11e      	bne.n	8009d7e <__sflush_r+0xea>
 8009d40:	602f      	str	r7, [r5, #0]
 8009d42:	2000      	movs	r0, #0
 8009d44:	e022      	b.n	8009d8c <__sflush_r+0xf8>
 8009d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d4a:	b21b      	sxth	r3, r3
 8009d4c:	e01b      	b.n	8009d86 <__sflush_r+0xf2>
 8009d4e:	690f      	ldr	r7, [r1, #16]
 8009d50:	2f00      	cmp	r7, #0
 8009d52:	d0f6      	beq.n	8009d42 <__sflush_r+0xae>
 8009d54:	0793      	lsls	r3, r2, #30
 8009d56:	680e      	ldr	r6, [r1, #0]
 8009d58:	bf08      	it	eq
 8009d5a:	694b      	ldreq	r3, [r1, #20]
 8009d5c:	600f      	str	r7, [r1, #0]
 8009d5e:	bf18      	it	ne
 8009d60:	2300      	movne	r3, #0
 8009d62:	eba6 0807 	sub.w	r8, r6, r7
 8009d66:	608b      	str	r3, [r1, #8]
 8009d68:	f1b8 0f00 	cmp.w	r8, #0
 8009d6c:	dde9      	ble.n	8009d42 <__sflush_r+0xae>
 8009d6e:	6a21      	ldr	r1, [r4, #32]
 8009d70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d72:	4643      	mov	r3, r8
 8009d74:	463a      	mov	r2, r7
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b0      	blx	r6
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	dc08      	bgt.n	8009d90 <__sflush_r+0xfc>
 8009d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d86:	81a3      	strh	r3, [r4, #12]
 8009d88:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d90:	4407      	add	r7, r0
 8009d92:	eba8 0800 	sub.w	r8, r8, r0
 8009d96:	e7e7      	b.n	8009d68 <__sflush_r+0xd4>
 8009d98:	dfbffffe 	.word	0xdfbffffe

08009d9c <_fflush_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	690b      	ldr	r3, [r1, #16]
 8009da0:	4605      	mov	r5, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	b913      	cbnz	r3, 8009dac <_fflush_r+0x10>
 8009da6:	2500      	movs	r5, #0
 8009da8:	4628      	mov	r0, r5
 8009daa:	bd38      	pop	{r3, r4, r5, pc}
 8009dac:	b118      	cbz	r0, 8009db6 <_fflush_r+0x1a>
 8009dae:	6a03      	ldr	r3, [r0, #32]
 8009db0:	b90b      	cbnz	r3, 8009db6 <_fflush_r+0x1a>
 8009db2:	f7fe fa01 	bl	80081b8 <__sinit>
 8009db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0f3      	beq.n	8009da6 <_fflush_r+0xa>
 8009dbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dc0:	07d0      	lsls	r0, r2, #31
 8009dc2:	d404      	bmi.n	8009dce <_fflush_r+0x32>
 8009dc4:	0599      	lsls	r1, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_fflush_r+0x32>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dca:	f7fe fb2c 	bl	8008426 <__retarget_lock_acquire_recursive>
 8009dce:	4628      	mov	r0, r5
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	f7ff ff5f 	bl	8009c94 <__sflush_r>
 8009dd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dd8:	07da      	lsls	r2, r3, #31
 8009dda:	4605      	mov	r5, r0
 8009ddc:	d4e4      	bmi.n	8009da8 <_fflush_r+0xc>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	059b      	lsls	r3, r3, #22
 8009de2:	d4e1      	bmi.n	8009da8 <_fflush_r+0xc>
 8009de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009de6:	f7fe fb1f 	bl	8008428 <__retarget_lock_release_recursive>
 8009dea:	e7dd      	b.n	8009da8 <_fflush_r+0xc>

08009dec <memmove>:
 8009dec:	4288      	cmp	r0, r1
 8009dee:	b510      	push	{r4, lr}
 8009df0:	eb01 0402 	add.w	r4, r1, r2
 8009df4:	d902      	bls.n	8009dfc <memmove+0x10>
 8009df6:	4284      	cmp	r4, r0
 8009df8:	4623      	mov	r3, r4
 8009dfa:	d807      	bhi.n	8009e0c <memmove+0x20>
 8009dfc:	1e43      	subs	r3, r0, #1
 8009dfe:	42a1      	cmp	r1, r4
 8009e00:	d008      	beq.n	8009e14 <memmove+0x28>
 8009e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e0a:	e7f8      	b.n	8009dfe <memmove+0x12>
 8009e0c:	4402      	add	r2, r0
 8009e0e:	4601      	mov	r1, r0
 8009e10:	428a      	cmp	r2, r1
 8009e12:	d100      	bne.n	8009e16 <memmove+0x2a>
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e1e:	e7f7      	b.n	8009e10 <memmove+0x24>

08009e20 <_sbrk_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d06      	ldr	r5, [pc, #24]	@ (8009e3c <_sbrk_r+0x1c>)
 8009e24:	2300      	movs	r3, #0
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	f7f8 fdf2 	bl	8002a14 <_sbrk>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_sbrk_r+0x1a>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_sbrk_r+0x1a>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	200008cc 	.word	0x200008cc

08009e40 <__assert_func>:
 8009e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e42:	4614      	mov	r4, r2
 8009e44:	461a      	mov	r2, r3
 8009e46:	4b09      	ldr	r3, [pc, #36]	@ (8009e6c <__assert_func+0x2c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	68d8      	ldr	r0, [r3, #12]
 8009e4e:	b954      	cbnz	r4, 8009e66 <__assert_func+0x26>
 8009e50:	4b07      	ldr	r3, [pc, #28]	@ (8009e70 <__assert_func+0x30>)
 8009e52:	461c      	mov	r4, r3
 8009e54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e58:	9100      	str	r1, [sp, #0]
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	4905      	ldr	r1, [pc, #20]	@ (8009e74 <__assert_func+0x34>)
 8009e5e:	f000 f86f 	bl	8009f40 <fiprintf>
 8009e62:	f000 f87f 	bl	8009f64 <abort>
 8009e66:	4b04      	ldr	r3, [pc, #16]	@ (8009e78 <__assert_func+0x38>)
 8009e68:	e7f4      	b.n	8009e54 <__assert_func+0x14>
 8009e6a:	bf00      	nop
 8009e6c:	20000030 	.word	0x20000030
 8009e70:	0800d256 	.word	0x0800d256
 8009e74:	0800d228 	.word	0x0800d228
 8009e78:	0800d21b 	.word	0x0800d21b

08009e7c <_calloc_r>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	fba1 5402 	umull	r5, r4, r1, r2
 8009e82:	b93c      	cbnz	r4, 8009e94 <_calloc_r+0x18>
 8009e84:	4629      	mov	r1, r5
 8009e86:	f7ff f99f 	bl	80091c8 <_malloc_r>
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	b928      	cbnz	r0, 8009e9a <_calloc_r+0x1e>
 8009e8e:	2600      	movs	r6, #0
 8009e90:	4630      	mov	r0, r6
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	220c      	movs	r2, #12
 8009e96:	6002      	str	r2, [r0, #0]
 8009e98:	e7f9      	b.n	8009e8e <_calloc_r+0x12>
 8009e9a:	462a      	mov	r2, r5
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	f7fe fa38 	bl	8008312 <memset>
 8009ea2:	e7f5      	b.n	8009e90 <_calloc_r+0x14>

08009ea4 <__ascii_mbtowc>:
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	b901      	cbnz	r1, 8009eaa <__ascii_mbtowc+0x6>
 8009ea8:	a901      	add	r1, sp, #4
 8009eaa:	b142      	cbz	r2, 8009ebe <__ascii_mbtowc+0x1a>
 8009eac:	b14b      	cbz	r3, 8009ec2 <__ascii_mbtowc+0x1e>
 8009eae:	7813      	ldrb	r3, [r2, #0]
 8009eb0:	600b      	str	r3, [r1, #0]
 8009eb2:	7812      	ldrb	r2, [r2, #0]
 8009eb4:	1e10      	subs	r0, r2, #0
 8009eb6:	bf18      	it	ne
 8009eb8:	2001      	movne	r0, #1
 8009eba:	b002      	add	sp, #8
 8009ebc:	4770      	bx	lr
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	e7fb      	b.n	8009eba <__ascii_mbtowc+0x16>
 8009ec2:	f06f 0001 	mvn.w	r0, #1
 8009ec6:	e7f8      	b.n	8009eba <__ascii_mbtowc+0x16>

08009ec8 <_realloc_r>:
 8009ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ecc:	4680      	mov	r8, r0
 8009ece:	4615      	mov	r5, r2
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	b921      	cbnz	r1, 8009ede <_realloc_r+0x16>
 8009ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed8:	4611      	mov	r1, r2
 8009eda:	f7ff b975 	b.w	80091c8 <_malloc_r>
 8009ede:	b92a      	cbnz	r2, 8009eec <_realloc_r+0x24>
 8009ee0:	f7ff f8fe 	bl	80090e0 <_free_r>
 8009ee4:	2400      	movs	r4, #0
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eec:	f000 f841 	bl	8009f72 <_malloc_usable_size_r>
 8009ef0:	4285      	cmp	r5, r0
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	d802      	bhi.n	8009efc <_realloc_r+0x34>
 8009ef6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009efa:	d8f4      	bhi.n	8009ee6 <_realloc_r+0x1e>
 8009efc:	4629      	mov	r1, r5
 8009efe:	4640      	mov	r0, r8
 8009f00:	f7ff f962 	bl	80091c8 <_malloc_r>
 8009f04:	4607      	mov	r7, r0
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d0ec      	beq.n	8009ee4 <_realloc_r+0x1c>
 8009f0a:	42b5      	cmp	r5, r6
 8009f0c:	462a      	mov	r2, r5
 8009f0e:	4621      	mov	r1, r4
 8009f10:	bf28      	it	cs
 8009f12:	4632      	movcs	r2, r6
 8009f14:	f7fe fa89 	bl	800842a <memcpy>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	f7ff f8e0 	bl	80090e0 <_free_r>
 8009f20:	463c      	mov	r4, r7
 8009f22:	e7e0      	b.n	8009ee6 <_realloc_r+0x1e>

08009f24 <__ascii_wctomb>:
 8009f24:	4603      	mov	r3, r0
 8009f26:	4608      	mov	r0, r1
 8009f28:	b141      	cbz	r1, 8009f3c <__ascii_wctomb+0x18>
 8009f2a:	2aff      	cmp	r2, #255	@ 0xff
 8009f2c:	d904      	bls.n	8009f38 <__ascii_wctomb+0x14>
 8009f2e:	228a      	movs	r2, #138	@ 0x8a
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	f04f 30ff 	mov.w	r0, #4294967295
 8009f36:	4770      	bx	lr
 8009f38:	700a      	strb	r2, [r1, #0]
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	4770      	bx	lr
	...

08009f40 <fiprintf>:
 8009f40:	b40e      	push	{r1, r2, r3}
 8009f42:	b503      	push	{r0, r1, lr}
 8009f44:	4601      	mov	r1, r0
 8009f46:	ab03      	add	r3, sp, #12
 8009f48:	4805      	ldr	r0, [pc, #20]	@ (8009f60 <fiprintf+0x20>)
 8009f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f4e:	6800      	ldr	r0, [r0, #0]
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	f000 f83f 	bl	8009fd4 <_vfiprintf_r>
 8009f56:	b002      	add	sp, #8
 8009f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f5c:	b003      	add	sp, #12
 8009f5e:	4770      	bx	lr
 8009f60:	20000030 	.word	0x20000030

08009f64 <abort>:
 8009f64:	b508      	push	{r3, lr}
 8009f66:	2006      	movs	r0, #6
 8009f68:	f000 fa08 	bl	800a37c <raise>
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	f7f8 fcd9 	bl	8002924 <_exit>

08009f72 <_malloc_usable_size_r>:
 8009f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f76:	1f18      	subs	r0, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bfbc      	itt	lt
 8009f7c:	580b      	ldrlt	r3, [r1, r0]
 8009f7e:	18c0      	addlt	r0, r0, r3
 8009f80:	4770      	bx	lr

08009f82 <__sfputc_r>:
 8009f82:	6893      	ldr	r3, [r2, #8]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	b410      	push	{r4}
 8009f8a:	6093      	str	r3, [r2, #8]
 8009f8c:	da08      	bge.n	8009fa0 <__sfputc_r+0x1e>
 8009f8e:	6994      	ldr	r4, [r2, #24]
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	db01      	blt.n	8009f98 <__sfputc_r+0x16>
 8009f94:	290a      	cmp	r1, #10
 8009f96:	d103      	bne.n	8009fa0 <__sfputc_r+0x1e>
 8009f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f9c:	f000 b932 	b.w	800a204 <__swbuf_r>
 8009fa0:	6813      	ldr	r3, [r2, #0]
 8009fa2:	1c58      	adds	r0, r3, #1
 8009fa4:	6010      	str	r0, [r2, #0]
 8009fa6:	7019      	strb	r1, [r3, #0]
 8009fa8:	4608      	mov	r0, r1
 8009faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <__sfputs_r>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	4614      	mov	r4, r2
 8009fb8:	18d5      	adds	r5, r2, r3
 8009fba:	42ac      	cmp	r4, r5
 8009fbc:	d101      	bne.n	8009fc2 <__sfputs_r+0x12>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	e007      	b.n	8009fd2 <__sfputs_r+0x22>
 8009fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff ffda 	bl	8009f82 <__sfputc_r>
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	d1f3      	bne.n	8009fba <__sfputs_r+0xa>
 8009fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fd4 <_vfiprintf_r>:
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	460d      	mov	r5, r1
 8009fda:	b09d      	sub	sp, #116	@ 0x74
 8009fdc:	4614      	mov	r4, r2
 8009fde:	4698      	mov	r8, r3
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	b118      	cbz	r0, 8009fec <_vfiprintf_r+0x18>
 8009fe4:	6a03      	ldr	r3, [r0, #32]
 8009fe6:	b90b      	cbnz	r3, 8009fec <_vfiprintf_r+0x18>
 8009fe8:	f7fe f8e6 	bl	80081b8 <__sinit>
 8009fec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fee:	07d9      	lsls	r1, r3, #31
 8009ff0:	d405      	bmi.n	8009ffe <_vfiprintf_r+0x2a>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	059a      	lsls	r2, r3, #22
 8009ff6:	d402      	bmi.n	8009ffe <_vfiprintf_r+0x2a>
 8009ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ffa:	f7fe fa14 	bl	8008426 <__retarget_lock_acquire_recursive>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	071b      	lsls	r3, r3, #28
 800a002:	d501      	bpl.n	800a008 <_vfiprintf_r+0x34>
 800a004:	692b      	ldr	r3, [r5, #16]
 800a006:	b99b      	cbnz	r3, 800a030 <_vfiprintf_r+0x5c>
 800a008:	4629      	mov	r1, r5
 800a00a:	4630      	mov	r0, r6
 800a00c:	f000 f938 	bl	800a280 <__swsetup_r>
 800a010:	b170      	cbz	r0, 800a030 <_vfiprintf_r+0x5c>
 800a012:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a014:	07dc      	lsls	r4, r3, #31
 800a016:	d504      	bpl.n	800a022 <_vfiprintf_r+0x4e>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	b01d      	add	sp, #116	@ 0x74
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a022:	89ab      	ldrh	r3, [r5, #12]
 800a024:	0598      	lsls	r0, r3, #22
 800a026:	d4f7      	bmi.n	800a018 <_vfiprintf_r+0x44>
 800a028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a02a:	f7fe f9fd 	bl	8008428 <__retarget_lock_release_recursive>
 800a02e:	e7f3      	b.n	800a018 <_vfiprintf_r+0x44>
 800a030:	2300      	movs	r3, #0
 800a032:	9309      	str	r3, [sp, #36]	@ 0x24
 800a034:	2320      	movs	r3, #32
 800a036:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a03e:	2330      	movs	r3, #48	@ 0x30
 800a040:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a1f0 <_vfiprintf_r+0x21c>
 800a044:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a048:	f04f 0901 	mov.w	r9, #1
 800a04c:	4623      	mov	r3, r4
 800a04e:	469a      	mov	sl, r3
 800a050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a054:	b10a      	cbz	r2, 800a05a <_vfiprintf_r+0x86>
 800a056:	2a25      	cmp	r2, #37	@ 0x25
 800a058:	d1f9      	bne.n	800a04e <_vfiprintf_r+0x7a>
 800a05a:	ebba 0b04 	subs.w	fp, sl, r4
 800a05e:	d00b      	beq.n	800a078 <_vfiprintf_r+0xa4>
 800a060:	465b      	mov	r3, fp
 800a062:	4622      	mov	r2, r4
 800a064:	4629      	mov	r1, r5
 800a066:	4630      	mov	r0, r6
 800a068:	f7ff ffa2 	bl	8009fb0 <__sfputs_r>
 800a06c:	3001      	adds	r0, #1
 800a06e:	f000 80a7 	beq.w	800a1c0 <_vfiprintf_r+0x1ec>
 800a072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a074:	445a      	add	r2, fp
 800a076:	9209      	str	r2, [sp, #36]	@ 0x24
 800a078:	f89a 3000 	ldrb.w	r3, [sl]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 809f 	beq.w	800a1c0 <_vfiprintf_r+0x1ec>
 800a082:	2300      	movs	r3, #0
 800a084:	f04f 32ff 	mov.w	r2, #4294967295
 800a088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a08c:	f10a 0a01 	add.w	sl, sl, #1
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	9307      	str	r3, [sp, #28]
 800a094:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a098:	931a      	str	r3, [sp, #104]	@ 0x68
 800a09a:	4654      	mov	r4, sl
 800a09c:	2205      	movs	r2, #5
 800a09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a2:	4853      	ldr	r0, [pc, #332]	@ (800a1f0 <_vfiprintf_r+0x21c>)
 800a0a4:	f7f6 f894 	bl	80001d0 <memchr>
 800a0a8:	9a04      	ldr	r2, [sp, #16]
 800a0aa:	b9d8      	cbnz	r0, 800a0e4 <_vfiprintf_r+0x110>
 800a0ac:	06d1      	lsls	r1, r2, #27
 800a0ae:	bf44      	itt	mi
 800a0b0:	2320      	movmi	r3, #32
 800a0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0b6:	0713      	lsls	r3, r2, #28
 800a0b8:	bf44      	itt	mi
 800a0ba:	232b      	movmi	r3, #43	@ 0x2b
 800a0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0c6:	d015      	beq.n	800a0f4 <_vfiprintf_r+0x120>
 800a0c8:	9a07      	ldr	r2, [sp, #28]
 800a0ca:	4654      	mov	r4, sl
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	f04f 0c0a 	mov.w	ip, #10
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d8:	3b30      	subs	r3, #48	@ 0x30
 800a0da:	2b09      	cmp	r3, #9
 800a0dc:	d94b      	bls.n	800a176 <_vfiprintf_r+0x1a2>
 800a0de:	b1b0      	cbz	r0, 800a10e <_vfiprintf_r+0x13a>
 800a0e0:	9207      	str	r2, [sp, #28]
 800a0e2:	e014      	b.n	800a10e <_vfiprintf_r+0x13a>
 800a0e4:	eba0 0308 	sub.w	r3, r0, r8
 800a0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	9304      	str	r3, [sp, #16]
 800a0f0:	46a2      	mov	sl, r4
 800a0f2:	e7d2      	b.n	800a09a <_vfiprintf_r+0xc6>
 800a0f4:	9b03      	ldr	r3, [sp, #12]
 800a0f6:	1d19      	adds	r1, r3, #4
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	9103      	str	r1, [sp, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	bfbb      	ittet	lt
 800a100:	425b      	neglt	r3, r3
 800a102:	f042 0202 	orrlt.w	r2, r2, #2
 800a106:	9307      	strge	r3, [sp, #28]
 800a108:	9307      	strlt	r3, [sp, #28]
 800a10a:	bfb8      	it	lt
 800a10c:	9204      	strlt	r2, [sp, #16]
 800a10e:	7823      	ldrb	r3, [r4, #0]
 800a110:	2b2e      	cmp	r3, #46	@ 0x2e
 800a112:	d10a      	bne.n	800a12a <_vfiprintf_r+0x156>
 800a114:	7863      	ldrb	r3, [r4, #1]
 800a116:	2b2a      	cmp	r3, #42	@ 0x2a
 800a118:	d132      	bne.n	800a180 <_vfiprintf_r+0x1ac>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	1d1a      	adds	r2, r3, #4
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	9203      	str	r2, [sp, #12]
 800a122:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a126:	3402      	adds	r4, #2
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a200 <_vfiprintf_r+0x22c>
 800a12e:	7821      	ldrb	r1, [r4, #0]
 800a130:	2203      	movs	r2, #3
 800a132:	4650      	mov	r0, sl
 800a134:	f7f6 f84c 	bl	80001d0 <memchr>
 800a138:	b138      	cbz	r0, 800a14a <_vfiprintf_r+0x176>
 800a13a:	9b04      	ldr	r3, [sp, #16]
 800a13c:	eba0 000a 	sub.w	r0, r0, sl
 800a140:	2240      	movs	r2, #64	@ 0x40
 800a142:	4082      	lsls	r2, r0
 800a144:	4313      	orrs	r3, r2
 800a146:	3401      	adds	r4, #1
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14e:	4829      	ldr	r0, [pc, #164]	@ (800a1f4 <_vfiprintf_r+0x220>)
 800a150:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a154:	2206      	movs	r2, #6
 800a156:	f7f6 f83b 	bl	80001d0 <memchr>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d03f      	beq.n	800a1de <_vfiprintf_r+0x20a>
 800a15e:	4b26      	ldr	r3, [pc, #152]	@ (800a1f8 <_vfiprintf_r+0x224>)
 800a160:	bb1b      	cbnz	r3, 800a1aa <_vfiprintf_r+0x1d6>
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	3307      	adds	r3, #7
 800a166:	f023 0307 	bic.w	r3, r3, #7
 800a16a:	3308      	adds	r3, #8
 800a16c:	9303      	str	r3, [sp, #12]
 800a16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a170:	443b      	add	r3, r7
 800a172:	9309      	str	r3, [sp, #36]	@ 0x24
 800a174:	e76a      	b.n	800a04c <_vfiprintf_r+0x78>
 800a176:	fb0c 3202 	mla	r2, ip, r2, r3
 800a17a:	460c      	mov	r4, r1
 800a17c:	2001      	movs	r0, #1
 800a17e:	e7a8      	b.n	800a0d2 <_vfiprintf_r+0xfe>
 800a180:	2300      	movs	r3, #0
 800a182:	3401      	adds	r4, #1
 800a184:	9305      	str	r3, [sp, #20]
 800a186:	4619      	mov	r1, r3
 800a188:	f04f 0c0a 	mov.w	ip, #10
 800a18c:	4620      	mov	r0, r4
 800a18e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a192:	3a30      	subs	r2, #48	@ 0x30
 800a194:	2a09      	cmp	r2, #9
 800a196:	d903      	bls.n	800a1a0 <_vfiprintf_r+0x1cc>
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0c6      	beq.n	800a12a <_vfiprintf_r+0x156>
 800a19c:	9105      	str	r1, [sp, #20]
 800a19e:	e7c4      	b.n	800a12a <_vfiprintf_r+0x156>
 800a1a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e7f0      	b.n	800a18c <_vfiprintf_r+0x1b8>
 800a1aa:	ab03      	add	r3, sp, #12
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4b12      	ldr	r3, [pc, #72]	@ (800a1fc <_vfiprintf_r+0x228>)
 800a1b2:	a904      	add	r1, sp, #16
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f7fd fbbb 	bl	8007930 <_printf_float>
 800a1ba:	4607      	mov	r7, r0
 800a1bc:	1c78      	adds	r0, r7, #1
 800a1be:	d1d6      	bne.n	800a16e <_vfiprintf_r+0x19a>
 800a1c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1c2:	07d9      	lsls	r1, r3, #31
 800a1c4:	d405      	bmi.n	800a1d2 <_vfiprintf_r+0x1fe>
 800a1c6:	89ab      	ldrh	r3, [r5, #12]
 800a1c8:	059a      	lsls	r2, r3, #22
 800a1ca:	d402      	bmi.n	800a1d2 <_vfiprintf_r+0x1fe>
 800a1cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1ce:	f7fe f92b 	bl	8008428 <__retarget_lock_release_recursive>
 800a1d2:	89ab      	ldrh	r3, [r5, #12]
 800a1d4:	065b      	lsls	r3, r3, #25
 800a1d6:	f53f af1f 	bmi.w	800a018 <_vfiprintf_r+0x44>
 800a1da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1dc:	e71e      	b.n	800a01c <_vfiprintf_r+0x48>
 800a1de:	ab03      	add	r3, sp, #12
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	462a      	mov	r2, r5
 800a1e4:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <_vfiprintf_r+0x228>)
 800a1e6:	a904      	add	r1, sp, #16
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7fd fe39 	bl	8007e60 <_printf_i>
 800a1ee:	e7e4      	b.n	800a1ba <_vfiprintf_r+0x1e6>
 800a1f0:	0800d200 	.word	0x0800d200
 800a1f4:	0800d20a 	.word	0x0800d20a
 800a1f8:	08007931 	.word	0x08007931
 800a1fc:	08009fb1 	.word	0x08009fb1
 800a200:	0800d206 	.word	0x0800d206

0800a204 <__swbuf_r>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	460e      	mov	r6, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	4605      	mov	r5, r0
 800a20c:	b118      	cbz	r0, 800a216 <__swbuf_r+0x12>
 800a20e:	6a03      	ldr	r3, [r0, #32]
 800a210:	b90b      	cbnz	r3, 800a216 <__swbuf_r+0x12>
 800a212:	f7fd ffd1 	bl	80081b8 <__sinit>
 800a216:	69a3      	ldr	r3, [r4, #24]
 800a218:	60a3      	str	r3, [r4, #8]
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	071a      	lsls	r2, r3, #28
 800a21e:	d501      	bpl.n	800a224 <__swbuf_r+0x20>
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	b943      	cbnz	r3, 800a236 <__swbuf_r+0x32>
 800a224:	4621      	mov	r1, r4
 800a226:	4628      	mov	r0, r5
 800a228:	f000 f82a 	bl	800a280 <__swsetup_r>
 800a22c:	b118      	cbz	r0, 800a236 <__swbuf_r+0x32>
 800a22e:	f04f 37ff 	mov.w	r7, #4294967295
 800a232:	4638      	mov	r0, r7
 800a234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	6922      	ldr	r2, [r4, #16]
 800a23a:	1a98      	subs	r0, r3, r2
 800a23c:	6963      	ldr	r3, [r4, #20]
 800a23e:	b2f6      	uxtb	r6, r6
 800a240:	4283      	cmp	r3, r0
 800a242:	4637      	mov	r7, r6
 800a244:	dc05      	bgt.n	800a252 <__swbuf_r+0x4e>
 800a246:	4621      	mov	r1, r4
 800a248:	4628      	mov	r0, r5
 800a24a:	f7ff fda7 	bl	8009d9c <_fflush_r>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d1ed      	bne.n	800a22e <__swbuf_r+0x2a>
 800a252:	68a3      	ldr	r3, [r4, #8]
 800a254:	3b01      	subs	r3, #1
 800a256:	60a3      	str	r3, [r4, #8]
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	701e      	strb	r6, [r3, #0]
 800a260:	6962      	ldr	r2, [r4, #20]
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	429a      	cmp	r2, r3
 800a266:	d004      	beq.n	800a272 <__swbuf_r+0x6e>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	07db      	lsls	r3, r3, #31
 800a26c:	d5e1      	bpl.n	800a232 <__swbuf_r+0x2e>
 800a26e:	2e0a      	cmp	r6, #10
 800a270:	d1df      	bne.n	800a232 <__swbuf_r+0x2e>
 800a272:	4621      	mov	r1, r4
 800a274:	4628      	mov	r0, r5
 800a276:	f7ff fd91 	bl	8009d9c <_fflush_r>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d0d9      	beq.n	800a232 <__swbuf_r+0x2e>
 800a27e:	e7d6      	b.n	800a22e <__swbuf_r+0x2a>

0800a280 <__swsetup_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4b29      	ldr	r3, [pc, #164]	@ (800a328 <__swsetup_r+0xa8>)
 800a284:	4605      	mov	r5, r0
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	460c      	mov	r4, r1
 800a28a:	b118      	cbz	r0, 800a294 <__swsetup_r+0x14>
 800a28c:	6a03      	ldr	r3, [r0, #32]
 800a28e:	b90b      	cbnz	r3, 800a294 <__swsetup_r+0x14>
 800a290:	f7fd ff92 	bl	80081b8 <__sinit>
 800a294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a298:	0719      	lsls	r1, r3, #28
 800a29a:	d422      	bmi.n	800a2e2 <__swsetup_r+0x62>
 800a29c:	06da      	lsls	r2, r3, #27
 800a29e:	d407      	bmi.n	800a2b0 <__swsetup_r+0x30>
 800a2a0:	2209      	movs	r2, #9
 800a2a2:	602a      	str	r2, [r5, #0]
 800a2a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	e033      	b.n	800a318 <__swsetup_r+0x98>
 800a2b0:	0758      	lsls	r0, r3, #29
 800a2b2:	d512      	bpl.n	800a2da <__swsetup_r+0x5a>
 800a2b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2b6:	b141      	cbz	r1, 800a2ca <__swsetup_r+0x4a>
 800a2b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	d002      	beq.n	800a2c6 <__swsetup_r+0x46>
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f7fe ff0d 	bl	80090e0 <_free_r>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	6063      	str	r3, [r4, #4]
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	f043 0308 	orr.w	r3, r3, #8
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	b94b      	cbnz	r3, 800a2fa <__swsetup_r+0x7a>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2f0:	d003      	beq.n	800a2fa <__swsetup_r+0x7a>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f000 f883 	bl	800a400 <__smakebuf_r>
 800a2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2fe:	f013 0201 	ands.w	r2, r3, #1
 800a302:	d00a      	beq.n	800a31a <__swsetup_r+0x9a>
 800a304:	2200      	movs	r2, #0
 800a306:	60a2      	str	r2, [r4, #8]
 800a308:	6962      	ldr	r2, [r4, #20]
 800a30a:	4252      	negs	r2, r2
 800a30c:	61a2      	str	r2, [r4, #24]
 800a30e:	6922      	ldr	r2, [r4, #16]
 800a310:	b942      	cbnz	r2, 800a324 <__swsetup_r+0xa4>
 800a312:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a316:	d1c5      	bne.n	800a2a4 <__swsetup_r+0x24>
 800a318:	bd38      	pop	{r3, r4, r5, pc}
 800a31a:	0799      	lsls	r1, r3, #30
 800a31c:	bf58      	it	pl
 800a31e:	6962      	ldrpl	r2, [r4, #20]
 800a320:	60a2      	str	r2, [r4, #8]
 800a322:	e7f4      	b.n	800a30e <__swsetup_r+0x8e>
 800a324:	2000      	movs	r0, #0
 800a326:	e7f7      	b.n	800a318 <__swsetup_r+0x98>
 800a328:	20000030 	.word	0x20000030

0800a32c <_raise_r>:
 800a32c:	291f      	cmp	r1, #31
 800a32e:	b538      	push	{r3, r4, r5, lr}
 800a330:	4605      	mov	r5, r0
 800a332:	460c      	mov	r4, r1
 800a334:	d904      	bls.n	800a340 <_raise_r+0x14>
 800a336:	2316      	movs	r3, #22
 800a338:	6003      	str	r3, [r0, #0]
 800a33a:	f04f 30ff 	mov.w	r0, #4294967295
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a342:	b112      	cbz	r2, 800a34a <_raise_r+0x1e>
 800a344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a348:	b94b      	cbnz	r3, 800a35e <_raise_r+0x32>
 800a34a:	4628      	mov	r0, r5
 800a34c:	f000 f830 	bl	800a3b0 <_getpid_r>
 800a350:	4622      	mov	r2, r4
 800a352:	4601      	mov	r1, r0
 800a354:	4628      	mov	r0, r5
 800a356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a35a:	f000 b817 	b.w	800a38c <_kill_r>
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d00a      	beq.n	800a378 <_raise_r+0x4c>
 800a362:	1c59      	adds	r1, r3, #1
 800a364:	d103      	bne.n	800a36e <_raise_r+0x42>
 800a366:	2316      	movs	r3, #22
 800a368:	6003      	str	r3, [r0, #0]
 800a36a:	2001      	movs	r0, #1
 800a36c:	e7e7      	b.n	800a33e <_raise_r+0x12>
 800a36e:	2100      	movs	r1, #0
 800a370:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a374:	4620      	mov	r0, r4
 800a376:	4798      	blx	r3
 800a378:	2000      	movs	r0, #0
 800a37a:	e7e0      	b.n	800a33e <_raise_r+0x12>

0800a37c <raise>:
 800a37c:	4b02      	ldr	r3, [pc, #8]	@ (800a388 <raise+0xc>)
 800a37e:	4601      	mov	r1, r0
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	f7ff bfd3 	b.w	800a32c <_raise_r>
 800a386:	bf00      	nop
 800a388:	20000030 	.word	0x20000030

0800a38c <_kill_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d07      	ldr	r5, [pc, #28]	@ (800a3ac <_kill_r+0x20>)
 800a390:	2300      	movs	r3, #0
 800a392:	4604      	mov	r4, r0
 800a394:	4608      	mov	r0, r1
 800a396:	4611      	mov	r1, r2
 800a398:	602b      	str	r3, [r5, #0]
 800a39a:	f7f8 fab3 	bl	8002904 <_kill>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	d102      	bne.n	800a3a8 <_kill_r+0x1c>
 800a3a2:	682b      	ldr	r3, [r5, #0]
 800a3a4:	b103      	cbz	r3, 800a3a8 <_kill_r+0x1c>
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	bd38      	pop	{r3, r4, r5, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200008cc 	.word	0x200008cc

0800a3b0 <_getpid_r>:
 800a3b0:	f7f8 baa0 	b.w	80028f4 <_getpid>

0800a3b4 <__swhatbuf_r>:
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	b096      	sub	sp, #88	@ 0x58
 800a3c0:	4615      	mov	r5, r2
 800a3c2:	461e      	mov	r6, r3
 800a3c4:	da0d      	bge.n	800a3e2 <__swhatbuf_r+0x2e>
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3cc:	f04f 0100 	mov.w	r1, #0
 800a3d0:	bf14      	ite	ne
 800a3d2:	2340      	movne	r3, #64	@ 0x40
 800a3d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3d8:	2000      	movs	r0, #0
 800a3da:	6031      	str	r1, [r6, #0]
 800a3dc:	602b      	str	r3, [r5, #0]
 800a3de:	b016      	add	sp, #88	@ 0x58
 800a3e0:	bd70      	pop	{r4, r5, r6, pc}
 800a3e2:	466a      	mov	r2, sp
 800a3e4:	f000 f848 	bl	800a478 <_fstat_r>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	dbec      	blt.n	800a3c6 <__swhatbuf_r+0x12>
 800a3ec:	9901      	ldr	r1, [sp, #4]
 800a3ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3f6:	4259      	negs	r1, r3
 800a3f8:	4159      	adcs	r1, r3
 800a3fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3fe:	e7eb      	b.n	800a3d8 <__swhatbuf_r+0x24>

0800a400 <__smakebuf_r>:
 800a400:	898b      	ldrh	r3, [r1, #12]
 800a402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a404:	079d      	lsls	r5, r3, #30
 800a406:	4606      	mov	r6, r0
 800a408:	460c      	mov	r4, r1
 800a40a:	d507      	bpl.n	800a41c <__smakebuf_r+0x1c>
 800a40c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	6123      	str	r3, [r4, #16]
 800a414:	2301      	movs	r3, #1
 800a416:	6163      	str	r3, [r4, #20]
 800a418:	b003      	add	sp, #12
 800a41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a41c:	ab01      	add	r3, sp, #4
 800a41e:	466a      	mov	r2, sp
 800a420:	f7ff ffc8 	bl	800a3b4 <__swhatbuf_r>
 800a424:	9f00      	ldr	r7, [sp, #0]
 800a426:	4605      	mov	r5, r0
 800a428:	4639      	mov	r1, r7
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7fe fecc 	bl	80091c8 <_malloc_r>
 800a430:	b948      	cbnz	r0, 800a446 <__smakebuf_r+0x46>
 800a432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a436:	059a      	lsls	r2, r3, #22
 800a438:	d4ee      	bmi.n	800a418 <__smakebuf_r+0x18>
 800a43a:	f023 0303 	bic.w	r3, r3, #3
 800a43e:	f043 0302 	orr.w	r3, r3, #2
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	e7e2      	b.n	800a40c <__smakebuf_r+0xc>
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	6020      	str	r0, [r4, #0]
 800a44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	9b01      	ldr	r3, [sp, #4]
 800a452:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a456:	b15b      	cbz	r3, 800a470 <__smakebuf_r+0x70>
 800a458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a45c:	4630      	mov	r0, r6
 800a45e:	f000 f81d 	bl	800a49c <_isatty_r>
 800a462:	b128      	cbz	r0, 800a470 <__smakebuf_r+0x70>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f023 0303 	bic.w	r3, r3, #3
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	431d      	orrs	r5, r3
 800a474:	81a5      	strh	r5, [r4, #12]
 800a476:	e7cf      	b.n	800a418 <__smakebuf_r+0x18>

0800a478 <_fstat_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	@ (800a498 <_fstat_r+0x20>)
 800a47c:	2300      	movs	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	4611      	mov	r1, r2
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	f7f8 fa9d 	bl	80029c4 <_fstat>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	d102      	bne.n	800a494 <_fstat_r+0x1c>
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	b103      	cbz	r3, 800a494 <_fstat_r+0x1c>
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	bd38      	pop	{r3, r4, r5, pc}
 800a496:	bf00      	nop
 800a498:	200008cc 	.word	0x200008cc

0800a49c <_isatty_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d06      	ldr	r5, [pc, #24]	@ (800a4b8 <_isatty_r+0x1c>)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	602b      	str	r3, [r5, #0]
 800a4a8:	f7f8 fa9c 	bl	80029e4 <_isatty>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	d102      	bne.n	800a4b6 <_isatty_r+0x1a>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	b103      	cbz	r3, 800a4b6 <_isatty_r+0x1a>
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	200008cc 	.word	0x200008cc

0800a4bc <_init>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	bf00      	nop
 800a4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c2:	bc08      	pop	{r3}
 800a4c4:	469e      	mov	lr, r3
 800a4c6:	4770      	bx	lr

0800a4c8 <_fini>:
 800a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ca:	bf00      	nop
 800a4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ce:	bc08      	pop	{r3}
 800a4d0:	469e      	mov	lr, r3
 800a4d2:	4770      	bx	lr
